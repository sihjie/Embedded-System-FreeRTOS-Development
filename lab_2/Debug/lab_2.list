
lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e48  08005e48  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e48  08005e48  00006e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e50  08005e50  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e50  08005e50  00006e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e54  08005e54  00006e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005e58  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00013064  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200130c4  200130c4  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011cad  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b6b  00000000  00000000  00018d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  0001b8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d17  00000000  00000000  0001c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f01  00000000  00000000  0001d68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013dfe  00000000  00000000  00040590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d30e9  00000000  00000000  0005438e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127477  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b58  00000000  00000000  001274bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0012c014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cfc 	.word	0x08005cfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005cfc 	.word	0x08005cfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fc1f 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f88f 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f921 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f8f5 	bl	80007ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(Red_LED_App, "Red_LED_App", 128, NULL, 1, NULL);
 80005c2:	2300      	movs	r3, #0
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	4913      	ldr	r1, [pc, #76]	@ (800061c <main+0x70>)
 80005d0:	4813      	ldr	r0, [pc, #76]	@ (8000620 <main+0x74>)
 80005d2:	f002 ffe7 	bl	80035a4 <xTaskCreate>
  xTaskCreate(Green_LED_App, "Green_LED_App", 128, NULL, 1, NULL);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	4910      	ldr	r1, [pc, #64]	@ (8000624 <main+0x78>)
 80005e4:	4810      	ldr	r0, [pc, #64]	@ (8000628 <main+0x7c>)
 80005e6:	f002 ffdd 	bl	80035a4 <xTaskCreate>
  xTaskCreate(Delay_App, "Delay_App", 128, NULL, 14, NULL);
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	230e      	movs	r3, #14
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2280      	movs	r2, #128	@ 0x80
 80005f6:	490d      	ldr	r1, [pc, #52]	@ (800062c <main+0x80>)
 80005f8:	480d      	ldr	r0, [pc, #52]	@ (8000630 <main+0x84>)
 80005fa:	f002 ffd3 	bl	80035a4 <xTaskCreate>
  xTaskCreate(TaskMonitor_App, "TaskMonitor_App", 512, NULL, 3, NULL);
 80005fe:	2300      	movs	r3, #0
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2303      	movs	r3, #3
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800060c:	4909      	ldr	r1, [pc, #36]	@ (8000634 <main+0x88>)
 800060e:	480a      	ldr	r0, [pc, #40]	@ (8000638 <main+0x8c>)
 8000610:	f002 ffc8 	bl	80035a4 <xTaskCreate>
  vTaskStartScheduler();
 8000614:	f003 f93c 	bl	8003890 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0x6c>
 800061c:	08005d14 	.word	0x08005d14
 8000620:	08000655 	.word	0x08000655
 8000624:	08005d20 	.word	0x08005d20
 8000628:	08000681 	.word	0x08000681
 800062c:	08005d30 	.word	0x08005d30
 8000630:	080006ad 	.word	0x080006ad
 8000634:	08005d3c 	.word	0x08005d3c
 8000638:	0800063d 	.word	0x0800063d

0800063c <TaskMonitor_App>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void TaskMonitor_App(void *pvParameters){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	for(;;){
		Taskmonitor();
 8000644:	f003 fea0 	bl	8004388 <Taskmonitor>
		vTaskDelay(1000);
 8000648:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800064c:	f003 f8ea 	bl	8003824 <vTaskDelay>
		Taskmonitor();
 8000650:	bf00      	nop
 8000652:	e7f7      	b.n	8000644 <TaskMonitor_App+0x8>

08000654 <Red_LED_App>:
	}
 }

 void Red_LED_App(void *pvParameters){
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 800;
 800065c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000660:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000662:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <Red_LED_App+0x28>)
 8000668:	f000 fe9d 	bl	80013a6 <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f003 f8d9 	bl	8003824 <vTaskDelay>
		Redtimer+=1;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000678:	bf00      	nop
 800067a:	e7f2      	b.n	8000662 <Red_LED_App+0xe>
 800067c:	40020c00 	.word	0x40020c00

08000680 <Green_LED_App>:
	}
 }

 void Green_LED_App(void *pvParameters){
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 1000;
 8000688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068c:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 800068e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <Green_LED_App+0x28>)
 8000694:	f000 fe87 	bl	80013a6 <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f003 f8c3 	bl	8003824 <vTaskDelay>
		Greentimer+=2;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	3302      	adds	r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 80006a4:	bf00      	nop
 80006a6:	e7f2      	b.n	800068e <Green_LED_App+0xe>
 80006a8:	40020c00 	.word	0x40020c00

080006ac <Delay_App>:
	 }
 }

 void Delay_App(void *pvParameters){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	int delayflag=0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
	uint32_t delaytime;
	while(1){
		if(delayflag==0){
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d105      	bne.n	80006ca <Delay_App+0x1e>
			delaytime = 1000;
 80006be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c2:	60bb      	str	r3, [r7, #8]
			delayflag = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e002      	b.n	80006d0 <Delay_App+0x24>
		}
		else{
			delaytime = 0xFFFFFFFF;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	60bb      	str	r3, [r7, #8]
		}
		vTaskDelay(delaytime);
 80006d0:	68b8      	ldr	r0, [r7, #8]
 80006d2:	f003 f8a7 	bl	8003824 <vTaskDelay>
		if(delayflag==0){
 80006d6:	e7ef      	b.n	80006b8 <Delay_App+0xc>

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	@ 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	@ 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fe8a 	bl	8005400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	@ (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	@ 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	@ (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800074c:	2332      	movs	r3, #50	@ 0x32
 800074e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000750:	2304      	movs	r3, #4
 8000752:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fe3d 	bl	80013dc <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 f9ba 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f89e 	bl	80018cc <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 f9a3 	bl	8000ae0 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	@ 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <MX_USART2_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f001 fd66 	bl	80022b4 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f977 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000007c 	.word	0x2000007c
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	@ 0x30
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	4ba2      	ldr	r3, [pc, #648]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4aa1      	ldr	r2, [pc, #644]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b9f      	ldr	r3, [pc, #636]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	4b9b      	ldr	r3, [pc, #620]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a9a      	ldr	r2, [pc, #616]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b98      	ldr	r3, [pc, #608]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b94      	ldr	r3, [pc, #592]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a93      	ldr	r2, [pc, #588]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b91      	ldr	r3, [pc, #580]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b8d      	ldr	r3, [pc, #564]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a8c      	ldr	r2, [pc, #560]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b8a      	ldr	r3, [pc, #552]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b86      	ldr	r3, [pc, #536]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a85      	ldr	r2, [pc, #532]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b83      	ldr	r3, [pc, #524]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b7f      	ldr	r3, [pc, #508]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a7e      	ldr	r2, [pc, #504]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b7c      	ldr	r3, [pc, #496]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	4879      	ldr	r0, [pc, #484]	@ (8000aa8 <MX_GPIO_Init+0x2a8>)
 80008c4:	f000 fd56 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2101      	movs	r1, #1
 80008cc:	4877      	ldr	r0, [pc, #476]	@ (8000aac <MX_GPIO_Init+0x2ac>)
 80008ce:	f000 fd51 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 80008d2:	2200      	movs	r2, #0
 80008d4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008d8:	4875      	ldr	r0, [pc, #468]	@ (8000ab0 <MX_GPIO_Init+0x2b0>)
 80008da:	f000 fd4b 	bl	8001374 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	486c      	ldr	r0, [pc, #432]	@ (8000aa8 <MX_GPIO_Init+0x2a8>)
 80008f6:	f000 fba1 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4866      	ldr	r0, [pc, #408]	@ (8000aac <MX_GPIO_Init+0x2ac>)
 8000912:	f000 fb93 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	485e      	ldr	r0, [pc, #376]	@ (8000aac <MX_GPIO_Init+0x2ac>)
 8000932:	f000 fb83 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	485a      	ldr	r0, [pc, #360]	@ (8000ab4 <MX_GPIO_Init+0x2b4>)
 800094c:	f000 fb76 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000950:	2310      	movs	r3, #16
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000960:	2306      	movs	r3, #6
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4852      	ldr	r0, [pc, #328]	@ (8000ab4 <MX_GPIO_Init+0x2b4>)
 800096c:	f000 fb66 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000970:	23e0      	movs	r3, #224	@ 0xe0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000980:	2305      	movs	r3, #5
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	484a      	ldr	r0, [pc, #296]	@ (8000ab4 <MX_GPIO_Init+0x2b4>)
 800098c:	f000 fb56 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000990:	2304      	movs	r3, #4
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4845      	ldr	r0, [pc, #276]	@ (8000ab8 <MX_GPIO_Init+0x2b8>)
 80009a4:	f000 fb4a 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ba:	2305      	movs	r3, #5
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	483c      	ldr	r0, [pc, #240]	@ (8000ab8 <MX_GPIO_Init+0x2b8>)
 80009c6:	f000 fb39 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 80009ca:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4833      	ldr	r0, [pc, #204]	@ (8000ab0 <MX_GPIO_Init+0x2b0>)
 80009e4:	f000 fb2a 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009e8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009fa:	2306      	movs	r3, #6
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4829      	ldr	r0, [pc, #164]	@ (8000aac <MX_GPIO_Init+0x2ac>)
 8000a06:	f000 fb19 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4825      	ldr	r0, [pc, #148]	@ (8000ab4 <MX_GPIO_Init+0x2b4>)
 8000a20:	f000 fb0c 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a24:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a36:	230a      	movs	r3, #10
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481c      	ldr	r0, [pc, #112]	@ (8000ab4 <MX_GPIO_Init+0x2b4>)
 8000a42:	f000 fafb 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a46:	2320      	movs	r3, #32
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4815      	ldr	r0, [pc, #84]	@ (8000ab0 <MX_GPIO_Init+0x2b0>)
 8000a5a:	f000 faef 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a5e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a70:	2304      	movs	r3, #4
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480f      	ldr	r0, [pc, #60]	@ (8000ab8 <MX_GPIO_Init+0x2b8>)
 8000a7c:	f000 fade 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a84:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_GPIO_Init+0x2a8>)
 8000a96:	f000 fad1 	bl	800103c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	@ 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400

08000abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ace:	f000 f9b3 	bl	8000e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40001400 	.word	0x40001400

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a08      	ldr	r2, [pc, #32]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b96:	230c      	movs	r3, #12
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb2:	f000 fa43 	bl	800103c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	@ 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	@ 0x38
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4b33      	ldr	r3, [pc, #204]	@ (8000cb0 <HAL_InitTick+0xe4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	4a32      	ldr	r2, [pc, #200]	@ (8000cb0 <HAL_InitTick+0xe4>)
 8000be6:	f043 0320 	orr.w	r3, r3, #32
 8000bea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bec:	4b30      	ldr	r3, [pc, #192]	@ (8000cb0 <HAL_InitTick+0xe4>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf8:	f107 0210 	add.w	r2, r7, #16
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f882 	bl	8001d0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c12:	f001 f853 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8000c16:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c1a:	f001 f84f 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c26:	4a23      	ldr	r2, [pc, #140]	@ (8000cb4 <HAL_InitTick+0xe8>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	0c9b      	lsrs	r3, r3, #18
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c32:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <HAL_InitTick+0xec>)
 8000c34:	4a21      	ldr	r2, [pc, #132]	@ (8000cbc <HAL_InitTick+0xf0>)
 8000c36:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <HAL_InitTick+0xec>)
 8000c3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c3e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c40:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb8 <HAL_InitTick+0xec>)
 8000c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c44:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <HAL_InitTick+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_InitTick+0xec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <HAL_InitTick+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000c58:	4817      	ldr	r0, [pc, #92]	@ (8000cb8 <HAL_InitTick+0xec>)
 8000c5a:	f001 f889 	bl	8001d70 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d11b      	bne.n	8000ca4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000c6c:	4812      	ldr	r0, [pc, #72]	@ (8000cb8 <HAL_InitTick+0xec>)
 8000c6e:	f001 f8d9 	bl	8001e24 <HAL_TIM_Base_Start_IT>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d111      	bne.n	8000ca4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c80:	2037      	movs	r0, #55	@ 0x37
 8000c82:	f000 f9cd 	bl	8001020 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d808      	bhi.n	8000c9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2037      	movs	r0, #55	@ 0x37
 8000c92:	f000 f9a9 	bl	8000fe8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_InitTick+0xf4>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e002      	b.n	8000ca4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3738      	adds	r7, #56	@ 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	200000c4 	.word	0x200000c4
 8000cbc:	40001400 	.word	0x40001400
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <TIM7_IRQHandler+0x10>)
 8000d02:	f001 f8ff 	bl	8001f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200000c4 	.word	0x200000c4

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f004 fb66 	bl	8005410 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20020000 	.word	0x20020000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	2000010c 	.word	0x2000010c
 8000d78:	200130c8 	.word	0x200130c8

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000da4:	f7ff ffea 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f004 fb25 	bl	800541c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fbeb 	bl	80005ac <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000de4:	08005e58 	.word	0x08005e58
  ldr r2, =_sbss
 8000de8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dec:	200130c4 	.word	0x200130c4

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	@ (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f8d8 	bl	8000fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff fed2 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fe60 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000110 	.word	0x20000110

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000110 	.word	0x20000110

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	@ (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	@ (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	@ 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff4c 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffa:	f7ff ff61 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8000ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	68b9      	ldr	r1, [r7, #8]
 8001004:	6978      	ldr	r0, [r7, #20]
 8001006:	f7ff ffb1 	bl	8000f6c <NVIC_EncodePriority>
 800100a:	4602      	mov	r2, r0
 800100c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff80 	bl	8000f18 <__NVIC_SetPriority>
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff54 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e16b      	b.n	8001330 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 815a 	bne.w	800132a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80b4 	beq.w	800132a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b60      	ldr	r3, [pc, #384]	@ (8001348 <HAL_GPIO_Init+0x30c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001348 <HAL_GPIO_Init+0x30c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001348 <HAL_GPIO_Init+0x30c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a5b      	ldr	r2, [pc, #364]	@ (800134c <HAL_GPIO_Init+0x310>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a52      	ldr	r2, [pc, #328]	@ (8001350 <HAL_GPIO_Init+0x314>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d02b      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a51      	ldr	r2, [pc, #324]	@ (8001354 <HAL_GPIO_Init+0x318>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x222>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a50      	ldr	r2, [pc, #320]	@ (8001358 <HAL_GPIO_Init+0x31c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4f      	ldr	r2, [pc, #316]	@ (800135c <HAL_GPIO_Init+0x320>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4e      	ldr	r2, [pc, #312]	@ (8001360 <HAL_GPIO_Init+0x324>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4d      	ldr	r2, [pc, #308]	@ (8001364 <HAL_GPIO_Init+0x328>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4c      	ldr	r2, [pc, #304]	@ (8001368 <HAL_GPIO_Init+0x32c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x20e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4b      	ldr	r2, [pc, #300]	@ (800136c <HAL_GPIO_Init+0x330>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x20a>
 8001242:	2307      	movs	r3, #7
 8001244:	e00e      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001246:	2308      	movs	r3, #8
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124a:	2306      	movs	r3, #6
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4935      	ldr	r1, [pc, #212]	@ (800134c <HAL_GPIO_Init+0x310>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b3b      	ldr	r3, [pc, #236]	@ (8001370 <HAL_GPIO_Init+0x334>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a6:	4a32      	ldr	r2, [pc, #200]	@ (8001370 <HAL_GPIO_Init+0x334>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ac:	4b30      	ldr	r3, [pc, #192]	@ (8001370 <HAL_GPIO_Init+0x334>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d0:	4a27      	ldr	r2, [pc, #156]	@ (8001370 <HAL_GPIO_Init+0x334>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d6:	4b26      	ldr	r3, [pc, #152]	@ (8001370 <HAL_GPIO_Init+0x334>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <HAL_GPIO_Init+0x334>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_GPIO_Init+0x334>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001324:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <HAL_GPIO_Init+0x334>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae90 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3724      	adds	r7, #36	@ 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b8:	887a      	ldrh	r2, [r7, #2]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4013      	ands	r3, r2
 80013be:	041a      	lsls	r2, r3, #16
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	400b      	ands	r3, r1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	619a      	str	r2, [r3, #24]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e267      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d075      	beq.n	80014e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013fa:	4b88      	ldr	r3, [pc, #544]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b04      	cmp	r3, #4
 8001404:	d00c      	beq.n	8001420 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001406:	4b85      	ldr	r3, [pc, #532]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800140e:	2b08      	cmp	r3, #8
 8001410:	d112      	bne.n	8001438 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001412:	4b82      	ldr	r3, [pc, #520]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800141a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800141e:	d10b      	bne.n	8001438 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	4b7e      	ldr	r3, [pc, #504]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d05b      	beq.n	80014e4 <HAL_RCC_OscConfig+0x108>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d157      	bne.n	80014e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e242      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d106      	bne.n	8001450 <HAL_RCC_OscConfig+0x74>
 8001442:	4b76      	ldr	r3, [pc, #472]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a75      	ldr	r2, [pc, #468]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e01d      	b.n	800148c <HAL_RCC_OscConfig+0xb0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x98>
 800145a:	4b70      	ldr	r3, [pc, #448]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6f      	ldr	r2, [pc, #444]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b6d      	ldr	r3, [pc, #436]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6c      	ldr	r2, [pc, #432]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e00b      	b.n	800148c <HAL_RCC_OscConfig+0xb0>
 8001474:	4b69      	ldr	r3, [pc, #420]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a68      	ldr	r2, [pc, #416]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 800147a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b66      	ldr	r3, [pc, #408]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a65      	ldr	r2, [pc, #404]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800148a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fce4 	bl	8000e60 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fce0 	bl	8000e60 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e207      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b5b      	ldr	r3, [pc, #364]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0xc0>
 80014ba:	e014      	b.n	80014e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fcd0 	bl	8000e60 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fccc 	bl	8000e60 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1f3      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d6:	4b51      	ldr	r3, [pc, #324]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0xe8>
 80014e2:	e000      	b.n	80014e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d063      	beq.n	80015ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014f2:	4b4a      	ldr	r3, [pc, #296]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00b      	beq.n	8001516 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	4b47      	ldr	r3, [pc, #284]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001506:	2b08      	cmp	r3, #8
 8001508:	d11c      	bne.n	8001544 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150a:	4b44      	ldr	r3, [pc, #272]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d116      	bne.n	8001544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	4b41      	ldr	r3, [pc, #260]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_RCC_OscConfig+0x152>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d001      	beq.n	800152e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e1c7      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4937      	ldr	r1, [pc, #220]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	e03a      	b.n	80015ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d020      	beq.n	800158e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154c:	4b34      	ldr	r3, [pc, #208]	@ (8001620 <HAL_RCC_OscConfig+0x244>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fc85 	bl	8000e60 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fc81 	bl	8000e60 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e1a8      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156c:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b28      	ldr	r3, [pc, #160]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4925      	ldr	r1, [pc, #148]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
 800158c:	e015      	b.n	80015ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <HAL_RCC_OscConfig+0x244>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fc64 	bl	8000e60 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159c:	f7ff fc60 	bl	8000e60 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e187      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ae:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d036      	beq.n	8001634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d016      	beq.n	80015fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_RCC_OscConfig+0x248>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fc44 	bl	8000e60 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc40 	bl	8000e60 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e167      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <HAL_RCC_OscConfig+0x240>)
 80015f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x200>
 80015fa:	e01b      	b.n	8001634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <HAL_RCC_OscConfig+0x248>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff fc2d 	bl	8000e60 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001608:	e00e      	b.n	8001628 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff fc29 	bl	8000e60 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d907      	bls.n	8001628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e150      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
 800161c:	40023800 	.word	0x40023800
 8001620:	42470000 	.word	0x42470000
 8001624:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	4b88      	ldr	r3, [pc, #544]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 800162a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ea      	bne.n	800160a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8097 	beq.w	8001770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001646:	4b81      	ldr	r3, [pc, #516]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10f      	bne.n	8001672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b7d      	ldr	r3, [pc, #500]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	4a7c      	ldr	r2, [pc, #496]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	@ 0x40
 8001662:	4b7a      	ldr	r3, [pc, #488]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166e:	2301      	movs	r3, #1
 8001670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b77      	ldr	r3, [pc, #476]	@ (8001850 <HAL_RCC_OscConfig+0x474>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d118      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167e:	4b74      	ldr	r3, [pc, #464]	@ (8001850 <HAL_RCC_OscConfig+0x474>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a73      	ldr	r2, [pc, #460]	@ (8001850 <HAL_RCC_OscConfig+0x474>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168a:	f7ff fbe9 	bl	8000e60 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001692:	f7ff fbe5 	bl	8000e60 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e10c      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001850 <HAL_RCC_OscConfig+0x474>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x2ea>
 80016b8:	4b64      	ldr	r3, [pc, #400]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016bc:	4a63      	ldr	r2, [pc, #396]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c4:	e01c      	b.n	8001700 <HAL_RCC_OscConfig+0x324>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x30c>
 80016ce:	4b5f      	ldr	r3, [pc, #380]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d2:	4a5e      	ldr	r2, [pc, #376]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016da:	4b5c      	ldr	r3, [pc, #368]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016de:	4a5b      	ldr	r2, [pc, #364]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0x324>
 80016e8:	4b58      	ldr	r3, [pc, #352]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ec:	4a57      	ldr	r2, [pc, #348]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f4:	4b55      	ldr	r3, [pc, #340]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f8:	4a54      	ldr	r2, [pc, #336]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d015      	beq.n	8001734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff fbaa 	bl	8000e60 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff fba6 	bl	8000e60 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0cb      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	4b49      	ldr	r3, [pc, #292]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0ee      	beq.n	8001710 <HAL_RCC_OscConfig+0x334>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff fb94 	bl	8000e60 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff fb90 	bl	8000e60 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e0b5      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001752:	4b3e      	ldr	r3, [pc, #248]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ee      	bne.n	800173c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b39      	ldr	r3, [pc, #228]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	4a38      	ldr	r2, [pc, #224]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 800176a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80a1 	beq.w	80018bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800177a:	4b34      	ldr	r3, [pc, #208]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b08      	cmp	r3, #8
 8001784:	d05c      	beq.n	8001840 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d141      	bne.n	8001812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <HAL_RCC_OscConfig+0x478>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fb64 	bl	8000e60 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fb60 	bl	8000e60 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e087      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	4b27      	ldr	r3, [pc, #156]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69da      	ldr	r2, [r3, #28]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	019b      	lsls	r3, r3, #6
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	3b01      	subs	r3, #1
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	491b      	ldr	r1, [pc, #108]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_RCC_OscConfig+0x478>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb39 	bl	8000e60 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff fb35 	bl	8000e60 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e05c      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x416>
 8001810:	e054      	b.n	80018bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <HAL_RCC_OscConfig+0x478>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fb22 	bl	8000e60 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fb1e 	bl	8000e60 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e045      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_RCC_OscConfig+0x470>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x444>
 800183e:	e03d      	b.n	80018bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e038      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000
 8001854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_RCC_OscConfig+0x4ec>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d028      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d121      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d11a      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001888:	4013      	ands	r3, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800188e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001890:	4293      	cmp	r3, r2
 8001892:	d111      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	3b01      	subs	r3, #1
 80018a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0cc      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b68      	ldr	r3, [pc, #416]	@ (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d90c      	bls.n	8001908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b65      	ldr	r3, [pc, #404]	@ (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b63      	ldr	r3, [pc, #396]	@ (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b8      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001920:	4b59      	ldr	r3, [pc, #356]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a58      	ldr	r2, [pc, #352]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800192a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001938:	4b53      	ldr	r3, [pc, #332]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a52      	ldr	r2, [pc, #328]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b50      	ldr	r3, [pc, #320]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	494d      	ldr	r1, [pc, #308]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d044      	beq.n	80019ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b47      	ldr	r3, [pc, #284]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d119      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d003      	beq.n	800198a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001986:	2b03      	cmp	r3, #3
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e06f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e067      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b37      	ldr	r3, [pc, #220]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4934      	ldr	r1, [pc, #208]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019bc:	f7ff fa50 	bl	8000e60 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7ff fa4c 	bl	8000e60 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e04f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2b      	ldr	r3, [pc, #172]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d20c      	bcs.n	8001a14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e032      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a20:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4916      	ldr	r1, [pc, #88]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	490e      	ldr	r1, [pc, #56]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a52:	f000 f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	490a      	ldr	r1, [pc, #40]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	5ccb      	ldrb	r3, [r1, r3]
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	4a09      	ldr	r2, [pc, #36]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f8aa 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	08005dfc 	.word	0x08005dfc
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a9c:	b094      	sub	sp, #80	@ 0x50
 8001a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab0:	4b79      	ldr	r3, [pc, #484]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d00d      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	f200 80e1 	bhi.w	8001c84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x34>
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aca:	e0db      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b73      	ldr	r3, [pc, #460]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001ace:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ad0:	e0db      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad2:	4b73      	ldr	r3, [pc, #460]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ad6:	e0d8      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ae0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d063      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	4b6a      	ldr	r3, [pc, #424]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	2200      	movs	r2, #0
 8001af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001af8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b0a:	4622      	mov	r2, r4
 8001b0c:	462b      	mov	r3, r5
 8001b0e:	f04f 0000 	mov.w	r0, #0
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	0159      	lsls	r1, r3, #5
 8001b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b1c:	0150      	lsls	r0, r2, #5
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4621      	mov	r1, r4
 8001b24:	1a51      	subs	r1, r2, r1
 8001b26:	6139      	str	r1, [r7, #16]
 8001b28:	4629      	mov	r1, r5
 8001b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b3c:	4659      	mov	r1, fp
 8001b3e:	018b      	lsls	r3, r1, #6
 8001b40:	4651      	mov	r1, sl
 8001b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b46:	4651      	mov	r1, sl
 8001b48:	018a      	lsls	r2, r1, #6
 8001b4a:	4651      	mov	r1, sl
 8001b4c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b50:	4659      	mov	r1, fp
 8001b52:	eb63 0901 	sbc.w	r9, r3, r1
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b6a:	4690      	mov	r8, r2
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	4623      	mov	r3, r4
 8001b70:	eb18 0303 	adds.w	r3, r8, r3
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	462b      	mov	r3, r5
 8001b78:	eb49 0303 	adc.w	r3, r9, r3
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	024b      	lsls	r3, r1, #9
 8001b8e:	4621      	mov	r1, r4
 8001b90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b94:	4621      	mov	r1, r4
 8001b96:	024a      	lsls	r2, r1, #9
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ba8:	f7fe fb6a 	bl	8000280 <__aeabi_uldivmod>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bb4:	e058      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb6:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	0159      	lsls	r1, r3, #5
 8001bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be2:	0150      	lsls	r0, r2, #5
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4641      	mov	r1, r8
 8001bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bee:	4649      	mov	r1, r9
 8001bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c08:	ebb2 040a 	subs.w	r4, r2, sl
 8001c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	00eb      	lsls	r3, r5, #3
 8001c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c1e:	00e2      	lsls	r2, r4, #3
 8001c20:	4614      	mov	r4, r2
 8001c22:	461d      	mov	r5, r3
 8001c24:	4643      	mov	r3, r8
 8001c26:	18e3      	adds	r3, r4, r3
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	eb45 0303 	adc.w	r3, r5, r3
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c3e:	4629      	mov	r1, r5
 8001c40:	028b      	lsls	r3, r1, #10
 8001c42:	4621      	mov	r1, r4
 8001c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c48:	4621      	mov	r1, r4
 8001c4a:	028a      	lsls	r2, r1, #10
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c52:	2200      	movs	r2, #0
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	61fa      	str	r2, [r7, #28]
 8001c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c5c:	f7fe fb10 	bl	8000280 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4613      	mov	r3, r2
 8001c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	3301      	adds	r3, #1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c82:	e002      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3750      	adds	r7, #80	@ 0x50
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	007a1200 	.word	0x007a1200

08001ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0a9b      	lsrs	r3, r3, #10
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	@ (8001ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08005e0c 	.word	0x08005e0c

08001ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce8:	f7ff ffdc 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0b5b      	lsrs	r3, r3, #13
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	@ (8001d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	08005e0c 	.word	0x08005e0c

08001d0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	220f      	movs	r2, #15
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d28:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d40:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <HAL_RCC_GetClockConfig+0x60>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0207 	and.w	r2, r3, #7
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	601a      	str	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40023c00 	.word	0x40023c00

08001d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e041      	b.n	8001e06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f839 	bl	8001e0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f9c0 	bl	8002134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d001      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e04e      	b.n	8001eda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a23      	ldr	r2, [pc, #140]	@ (8001ee8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d022      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e66:	d01d      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001eec <HAL_TIM_Base_Start_IT+0xc8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d018      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00e      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d009      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <HAL_TIM_Base_Start_IT+0xd8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d111      	bne.n	8001ec8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d010      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec6:	e007      	b.n	8001ed8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40000400 	.word	0x40000400
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40000c00 	.word	0x40000c00
 8001ef8:	40010400 	.word	0x40010400
 8001efc:	40014000 	.word	0x40014000
 8001f00:	40001800 	.word	0x40001800

08001f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d020      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01b      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0202 	mvn.w	r2, #2
 8001f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8d2 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8c4 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f8d5 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d020      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01b      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0204 	mvn.w	r2, #4
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8ac 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f89e 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8af 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d020      	beq.n	8002000 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0208 	mvn.w	r2, #8
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f886 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f878 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f889 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d020      	beq.n	800204c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0210 	mvn.w	r2, #16
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2208      	movs	r2, #8
 8002022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f860 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f852 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f863 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00c      	beq.n	8002070 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0201 	mvn.w	r2, #1
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fd26 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f906 	bl	80022a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f834 	bl	8002120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0220 	mvn.w	r2, #32
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8d8 	bl	800228c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a46      	ldr	r2, [pc, #280]	@ (8002260 <TIM_Base_SetConfig+0x12c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002152:	d00f      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a43      	ldr	r2, [pc, #268]	@ (8002264 <TIM_Base_SetConfig+0x130>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00b      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a42      	ldr	r2, [pc, #264]	@ (8002268 <TIM_Base_SetConfig+0x134>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a41      	ldr	r2, [pc, #260]	@ (800226c <TIM_Base_SetConfig+0x138>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a40      	ldr	r2, [pc, #256]	@ (8002270 <TIM_Base_SetConfig+0x13c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d108      	bne.n	8002186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800217a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a35      	ldr	r2, [pc, #212]	@ (8002260 <TIM_Base_SetConfig+0x12c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002194:	d027      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a32      	ldr	r2, [pc, #200]	@ (8002264 <TIM_Base_SetConfig+0x130>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d023      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a31      	ldr	r2, [pc, #196]	@ (8002268 <TIM_Base_SetConfig+0x134>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a30      	ldr	r2, [pc, #192]	@ (800226c <TIM_Base_SetConfig+0x138>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002270 <TIM_Base_SetConfig+0x13c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d017      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002274 <TIM_Base_SetConfig+0x140>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002278 <TIM_Base_SetConfig+0x144>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00f      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2c      	ldr	r2, [pc, #176]	@ (800227c <TIM_Base_SetConfig+0x148>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002280 <TIM_Base_SetConfig+0x14c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002284 <TIM_Base_SetConfig+0x150>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d003      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a29      	ldr	r2, [pc, #164]	@ (8002288 <TIM_Base_SetConfig+0x154>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d108      	bne.n	80021f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <TIM_Base_SetConfig+0x12c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d003      	beq.n	800222c <TIM_Base_SetConfig+0xf8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a12      	ldr	r2, [pc, #72]	@ (8002270 <TIM_Base_SetConfig+0x13c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d103      	bne.n	8002234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f023 0201 	bic.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]
  }
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40010000 	.word	0x40010000
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800
 800226c:	40000c00 	.word	0x40000c00
 8002270:	40010400 	.word	0x40010400
 8002274:	40014000 	.word	0x40014000
 8002278:	40014400 	.word	0x40014400
 800227c:	40014800 	.word	0x40014800
 8002280:	40001800 	.word	0x40001800
 8002284:	40001c00 	.word	0x40001c00
 8002288:	40002000 	.word	0x40002000

0800228c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e042      	b.n	800234c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fc2e 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2224      	movs	r2, #36	@ 0x24
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f973 	bl	80025e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800230c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800231c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800232c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	@ 0x28
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	4613      	mov	r3, r2
 8002362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b20      	cmp	r3, #32
 8002372:	d175      	bne.n	8002460 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_UART_Transmit+0x2c>
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e06e      	b.n	8002462 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2221      	movs	r2, #33	@ 0x21
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002392:	f7fe fd65 	bl	8000e60 <HAL_GetTick>
 8002396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	88fa      	ldrh	r2, [r7, #6]
 800239c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	88fa      	ldrh	r2, [r7, #6]
 80023a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ac:	d108      	bne.n	80023c0 <HAL_UART_Transmit+0x6c>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d104      	bne.n	80023c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	e003      	b.n	80023c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023c8:	e02e      	b.n	8002428 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f848 	bl	800246a <UART_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e03a      	b.n	8002462 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10b      	bne.n	800240a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	3302      	adds	r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	e007      	b.n	800241a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3301      	adds	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1cb      	bne.n	80023ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2200      	movs	r2, #0
 800243a:	2140      	movs	r1, #64	@ 0x40
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f814 	bl	800246a <UART_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e006      	b.n	8002462 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	4613      	mov	r3, r2
 8002478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800247a:	e03b      	b.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002482:	d037      	beq.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002484:	f7fe fcec 	bl	8000e60 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	6a3a      	ldr	r2, [r7, #32]
 8002490:	429a      	cmp	r2, r3
 8002492:	d302      	bcc.n	800249a <UART_WaitOnFlagUntilTimeout+0x30>
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e03a      	b.n	8002514 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d023      	beq.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b80      	cmp	r3, #128	@ 0x80
 80024b0:	d020      	beq.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b40      	cmp	r3, #64	@ 0x40
 80024b6:	d01d      	beq.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d116      	bne.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f81d 	bl	800251c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2208      	movs	r2, #8
 80024e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e00f      	b.n	8002514 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	429a      	cmp	r2, r3
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	429a      	cmp	r2, r3
 8002510:	d0b4      	beq.n	800247c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800251c:	b480      	push	{r7}
 800251e:	b095      	sub	sp, #84	@ 0x54
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	330c      	adds	r3, #12
 800252a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252e:	e853 3f00 	ldrex	r3, [r3]
 8002532:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800253a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	330c      	adds	r3, #12
 8002542:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002544:	643a      	str	r2, [r7, #64]	@ 0x40
 8002546:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002548:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800254a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800254c:	e841 2300 	strex	r3, r2, [r1]
 8002550:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e5      	bne.n	8002524 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3314      	adds	r3, #20
 800255e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	e853 3f00 	ldrex	r3, [r3]
 8002566:	61fb      	str	r3, [r7, #28]
   return(result);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3314      	adds	r3, #20
 8002576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002578:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800257a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800257e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002580:	e841 2300 	strex	r3, r2, [r1]
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e5      	bne.n	8002558 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	2b01      	cmp	r3, #1
 8002592:	d119      	bne.n	80025c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	330c      	adds	r3, #12
 800259a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	e853 3f00 	ldrex	r3, [r3]
 80025a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f023 0310 	bic.w	r3, r3, #16
 80025aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025b4:	61ba      	str	r2, [r7, #24]
 80025b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b8:	6979      	ldr	r1, [r7, #20]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	e841 2300 	strex	r3, r2, [r1]
 80025c0:	613b      	str	r3, [r7, #16]
   return(result);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e5      	bne.n	8002594 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025d6:	bf00      	nop
 80025d8:	3754      	adds	r7, #84	@ 0x54
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e8:	b0c0      	sub	sp, #256	@ 0x100
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002600:	68d9      	ldr	r1, [r3, #12]
 8002602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	ea40 0301 	orr.w	r3, r0, r1
 800260c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	431a      	orrs	r2, r3
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	431a      	orrs	r2, r3
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800263c:	f021 010c 	bic.w	r1, r1, #12
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800264a:	430b      	orrs	r3, r1
 800264c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800264e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265e:	6999      	ldr	r1, [r3, #24]
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	ea40 0301 	orr.w	r3, r0, r1
 800266a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b8f      	ldr	r3, [pc, #572]	@ (80028b0 <UART_SetConfig+0x2cc>)
 8002674:	429a      	cmp	r2, r3
 8002676:	d005      	beq.n	8002684 <UART_SetConfig+0xa0>
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b8d      	ldr	r3, [pc, #564]	@ (80028b4 <UART_SetConfig+0x2d0>)
 8002680:	429a      	cmp	r2, r3
 8002682:	d104      	bne.n	800268e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002684:	f7ff fb2e 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 8002688:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800268c:	e003      	b.n	8002696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800268e:	f7ff fb15 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002692:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026a0:	f040 810c 	bne.w	80028bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026b6:	4622      	mov	r2, r4
 80026b8:	462b      	mov	r3, r5
 80026ba:	1891      	adds	r1, r2, r2
 80026bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026be:	415b      	adcs	r3, r3
 80026c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026c6:	4621      	mov	r1, r4
 80026c8:	eb12 0801 	adds.w	r8, r2, r1
 80026cc:	4629      	mov	r1, r5
 80026ce:	eb43 0901 	adc.w	r9, r3, r1
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e6:	4690      	mov	r8, r2
 80026e8:	4699      	mov	r9, r3
 80026ea:	4623      	mov	r3, r4
 80026ec:	eb18 0303 	adds.w	r3, r8, r3
 80026f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026f4:	462b      	mov	r3, r5
 80026f6:	eb49 0303 	adc.w	r3, r9, r3
 80026fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800270a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800270e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002712:	460b      	mov	r3, r1
 8002714:	18db      	adds	r3, r3, r3
 8002716:	653b      	str	r3, [r7, #80]	@ 0x50
 8002718:	4613      	mov	r3, r2
 800271a:	eb42 0303 	adc.w	r3, r2, r3
 800271e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002728:	f7fd fdaa 	bl	8000280 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4b61      	ldr	r3, [pc, #388]	@ (80028b8 <UART_SetConfig+0x2d4>)
 8002732:	fba3 2302 	umull	r2, r3, r3, r2
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	011c      	lsls	r4, r3, #4
 800273a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002744:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800274c:	4642      	mov	r2, r8
 800274e:	464b      	mov	r3, r9
 8002750:	1891      	adds	r1, r2, r2
 8002752:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002754:	415b      	adcs	r3, r3
 8002756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800275c:	4641      	mov	r1, r8
 800275e:	eb12 0a01 	adds.w	sl, r2, r1
 8002762:	4649      	mov	r1, r9
 8002764:	eb43 0b01 	adc.w	fp, r3, r1
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800277c:	4692      	mov	sl, r2
 800277e:	469b      	mov	fp, r3
 8002780:	4643      	mov	r3, r8
 8002782:	eb1a 0303 	adds.w	r3, sl, r3
 8002786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800278a:	464b      	mov	r3, r9
 800278c:	eb4b 0303 	adc.w	r3, fp, r3
 8002790:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80027a8:	460b      	mov	r3, r1
 80027aa:	18db      	adds	r3, r3, r3
 80027ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80027ae:	4613      	mov	r3, r2
 80027b0:	eb42 0303 	adc.w	r3, r2, r3
 80027b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027be:	f7fd fd5f 	bl	8000280 <__aeabi_uldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	4b3b      	ldr	r3, [pc, #236]	@ (80028b8 <UART_SetConfig+0x2d4>)
 80027ca:	fba3 2301 	umull	r2, r3, r3, r1
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2264      	movs	r2, #100	@ 0x64
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	1acb      	subs	r3, r1, r3
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027de:	4b36      	ldr	r3, [pc, #216]	@ (80028b8 <UART_SetConfig+0x2d4>)
 80027e0:	fba3 2302 	umull	r2, r3, r3, r2
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027ec:	441c      	add	r4, r3
 80027ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	1891      	adds	r1, r2, r2
 8002806:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002808:	415b      	adcs	r3, r3
 800280a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800280c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002810:	4641      	mov	r1, r8
 8002812:	1851      	adds	r1, r2, r1
 8002814:	6339      	str	r1, [r7, #48]	@ 0x30
 8002816:	4649      	mov	r1, r9
 8002818:	414b      	adcs	r3, r1
 800281a:	637b      	str	r3, [r7, #52]	@ 0x34
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002828:	4659      	mov	r1, fp
 800282a:	00cb      	lsls	r3, r1, #3
 800282c:	4651      	mov	r1, sl
 800282e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002832:	4651      	mov	r1, sl
 8002834:	00ca      	lsls	r2, r1, #3
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	4603      	mov	r3, r0
 800283c:	4642      	mov	r2, r8
 800283e:	189b      	adds	r3, r3, r2
 8002840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002844:	464b      	mov	r3, r9
 8002846:	460a      	mov	r2, r1
 8002848:	eb42 0303 	adc.w	r3, r2, r3
 800284c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800285c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002864:	460b      	mov	r3, r1
 8002866:	18db      	adds	r3, r3, r3
 8002868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800286a:	4613      	mov	r3, r2
 800286c:	eb42 0303 	adc.w	r3, r2, r3
 8002870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800287a:	f7fd fd01 	bl	8000280 <__aeabi_uldivmod>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <UART_SetConfig+0x2d4>)
 8002884:	fba3 1302 	umull	r1, r3, r3, r2
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	2164      	movs	r1, #100	@ 0x64
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	3332      	adds	r3, #50	@ 0x32
 8002896:	4a08      	ldr	r2, [pc, #32]	@ (80028b8 <UART_SetConfig+0x2d4>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	f003 0207 	and.w	r2, r3, #7
 80028a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4422      	add	r2, r4
 80028aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028ac:	e106      	b.n	8002abc <UART_SetConfig+0x4d8>
 80028ae:	bf00      	nop
 80028b0:	40011000 	.word	0x40011000
 80028b4:	40011400 	.word	0x40011400
 80028b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028c0:	2200      	movs	r2, #0
 80028c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028ce:	4642      	mov	r2, r8
 80028d0:	464b      	mov	r3, r9
 80028d2:	1891      	adds	r1, r2, r2
 80028d4:	6239      	str	r1, [r7, #32]
 80028d6:	415b      	adcs	r3, r3
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028de:	4641      	mov	r1, r8
 80028e0:	1854      	adds	r4, r2, r1
 80028e2:	4649      	mov	r1, r9
 80028e4:	eb43 0501 	adc.w	r5, r3, r1
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	00eb      	lsls	r3, r5, #3
 80028f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f6:	00e2      	lsls	r2, r4, #3
 80028f8:	4614      	mov	r4, r2
 80028fa:	461d      	mov	r5, r3
 80028fc:	4643      	mov	r3, r8
 80028fe:	18e3      	adds	r3, r4, r3
 8002900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002904:	464b      	mov	r3, r9
 8002906:	eb45 0303 	adc.w	r3, r5, r3
 800290a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800291a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800292a:	4629      	mov	r1, r5
 800292c:	008b      	lsls	r3, r1, #2
 800292e:	4621      	mov	r1, r4
 8002930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002934:	4621      	mov	r1, r4
 8002936:	008a      	lsls	r2, r1, #2
 8002938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800293c:	f7fd fca0 	bl	8000280 <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4b60      	ldr	r3, [pc, #384]	@ (8002ac8 <UART_SetConfig+0x4e4>)
 8002946:	fba3 2302 	umull	r2, r3, r3, r2
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	011c      	lsls	r4, r3, #4
 800294e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002952:	2200      	movs	r2, #0
 8002954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002958:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800295c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002960:	4642      	mov	r2, r8
 8002962:	464b      	mov	r3, r9
 8002964:	1891      	adds	r1, r2, r2
 8002966:	61b9      	str	r1, [r7, #24]
 8002968:	415b      	adcs	r3, r3
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002970:	4641      	mov	r1, r8
 8002972:	1851      	adds	r1, r2, r1
 8002974:	6139      	str	r1, [r7, #16]
 8002976:	4649      	mov	r1, r9
 8002978:	414b      	adcs	r3, r1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002988:	4659      	mov	r1, fp
 800298a:	00cb      	lsls	r3, r1, #3
 800298c:	4651      	mov	r1, sl
 800298e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002992:	4651      	mov	r1, sl
 8002994:	00ca      	lsls	r2, r1, #3
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	4603      	mov	r3, r0
 800299c:	4642      	mov	r2, r8
 800299e:	189b      	adds	r3, r3, r2
 80029a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029a4:	464b      	mov	r3, r9
 80029a6:	460a      	mov	r2, r1
 80029a8:	eb42 0303 	adc.w	r3, r2, r3
 80029ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029c8:	4649      	mov	r1, r9
 80029ca:	008b      	lsls	r3, r1, #2
 80029cc:	4641      	mov	r1, r8
 80029ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d2:	4641      	mov	r1, r8
 80029d4:	008a      	lsls	r2, r1, #2
 80029d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029da:	f7fd fc51 	bl	8000280 <__aeabi_uldivmod>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	4b38      	ldr	r3, [pc, #224]	@ (8002ac8 <UART_SetConfig+0x4e4>)
 80029e6:	fba3 2301 	umull	r2, r3, r3, r1
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2264      	movs	r2, #100	@ 0x64
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	1acb      	subs	r3, r1, r3
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	3332      	adds	r3, #50	@ 0x32
 80029f8:	4a33      	ldr	r2, [pc, #204]	@ (8002ac8 <UART_SetConfig+0x4e4>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a04:	441c      	add	r4, r3
 8002a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a14:	4642      	mov	r2, r8
 8002a16:	464b      	mov	r3, r9
 8002a18:	1891      	adds	r1, r2, r2
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	415b      	adcs	r3, r3
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a24:	4641      	mov	r1, r8
 8002a26:	1851      	adds	r1, r2, r1
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	414b      	adcs	r3, r1
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a3c:	4659      	mov	r1, fp
 8002a3e:	00cb      	lsls	r3, r1, #3
 8002a40:	4651      	mov	r1, sl
 8002a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a46:	4651      	mov	r1, sl
 8002a48:	00ca      	lsls	r2, r1, #3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4642      	mov	r2, r8
 8002a52:	189b      	adds	r3, r3, r2
 8002a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a56:	464b      	mov	r3, r9
 8002a58:	460a      	mov	r2, r1
 8002a5a:	eb42 0303 	adc.w	r3, r2, r3
 8002a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a78:	4649      	mov	r1, r9
 8002a7a:	008b      	lsls	r3, r1, #2
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a82:	4641      	mov	r1, r8
 8002a84:	008a      	lsls	r2, r1, #2
 8002a86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a8a:	f7fd fbf9 	bl	8000280 <__aeabi_uldivmod>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <UART_SetConfig+0x4e4>)
 8002a94:	fba3 1302 	umull	r1, r3, r3, r2
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	2164      	movs	r1, #100	@ 0x64
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	3332      	adds	r3, #50	@ 0x32
 8002aa6:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <UART_SetConfig+0x4e4>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	f003 020f 	and.w	r2, r3, #15
 8002ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4422      	add	r2, r4
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	bf00      	nop
 8002abe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac8:	51eb851f 	.word	0x51eb851f

08002acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f103 0208 	add.w	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f103 0208 	add.w	r2, r3, #8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f103 0208 	add.w	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d103      	bne.n	8002b8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e00c      	b.n	8002ba8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3308      	adds	r3, #8
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e002      	b.n	8002b9c <vListInsert+0x2e>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d2f6      	bcs.n	8002b96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	601a      	str	r2, [r3, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6852      	ldr	r2, [r2, #4]
 8002c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d103      	bne.n	8002c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	1e5a      	subs	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c60:	f002 f8a4 	bl	8004dac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	441a      	add	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	3b01      	subs	r3, #1
 8002c92:	68f9      	ldr	r1, [r7, #12]
 8002c94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	441a      	add	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	22ff      	movs	r2, #255	@ 0xff
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	22ff      	movs	r2, #255	@ 0xff
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d114      	bne.n	8002ce0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01a      	beq.n	8002cf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3310      	adds	r3, #16
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 f856 	bl	8003d74 <xTaskRemoveFromEventList>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d012      	beq.n	8002cf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <xQueueGenericReset+0xd0>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	e009      	b.n	8002cf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3310      	adds	r3, #16
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fef1 	bl	8002acc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3324      	adds	r3, #36	@ 0x24
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff feec 	bl	8002acc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cf4:	f002 f88c 	bl	8004e10 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cf8:	2301      	movs	r3, #1
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	4613      	mov	r3, r2
 8002d14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	613b      	str	r3, [r7, #16]
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e004      	b.n	8002d4a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3350      	adds	r3, #80	@ 0x50
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 f954 	bl	8004ffc <pvPortMalloc>
 8002d54:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3350      	adds	r3, #80	@ 0x50
 8002d64:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d66:	79fa      	ldrb	r2, [r7, #7]
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f805 	bl	8002d82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d78:	69bb      	ldr	r3, [r7, #24]
	}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e002      	b.n	8002da4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002db0:	2101      	movs	r1, #1
 8002db2:	69b8      	ldr	r0, [r7, #24]
 8002db4:	f7ff ff3e 	bl	8002c34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08e      	sub	sp, #56	@ 0x38
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <xQueueGenericSend+0x34>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d103      	bne.n	8002e0a <xQueueGenericSend+0x42>
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <xQueueGenericSend+0x46>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <xQueueGenericSend+0x48>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10b      	bne.n	8002e2c <xQueueGenericSend+0x64>
	__asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d103      	bne.n	8002e3a <xQueueGenericSend+0x72>
 8002e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <xQueueGenericSend+0x76>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <xQueueGenericSend+0x78>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <xQueueGenericSend+0x94>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	623b      	str	r3, [r7, #32]
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e5c:	f001 f92a 	bl	80040b4 <xTaskGetSchedulerState>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <xQueueGenericSend+0xa4>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <xQueueGenericSend+0xa8>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <xQueueGenericSend+0xaa>
 8002e70:	2300      	movs	r3, #0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10b      	bne.n	8002e8e <xQueueGenericSend+0xc6>
	__asm volatile
 8002e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	61fb      	str	r3, [r7, #28]
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	e7fd      	b.n	8002e8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e8e:	f001 ff8d 	bl	8004dac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <xQueueGenericSend+0xdc>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d129      	bne.n	8002ef8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eaa:	f000 fa0d 	bl	80032c8 <prvCopyDataToQueue>
 8002eae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eba:	3324      	adds	r3, #36	@ 0x24
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 ff59 	bl	8003d74 <xTaskRemoveFromEventList>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc8 <xQueueGenericSend+0x200>)
 8002eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	e00a      	b.n	8002ef0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ee0:	4b39      	ldr	r3, [pc, #228]	@ (8002fc8 <xQueueGenericSend+0x200>)
 8002ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ef0:	f001 ff8e 	bl	8004e10 <vPortExitCritical>
				return pdPASS;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e063      	b.n	8002fc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002efe:	f001 ff87 	bl	8004e10 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e05c      	b.n	8002fc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 ff93 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f16:	2301      	movs	r3, #1
 8002f18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f1a:	f001 ff79 	bl	8004e10 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f1e:	f000 fd05 	bl	800392c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f22:	f001 ff43 	bl	8004dac <vPortEnterCritical>
 8002f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f2c:	b25b      	sxtb	r3, r3
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d103      	bne.n	8002f3c <xQueueGenericSend+0x174>
 8002f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d103      	bne.n	8002f52 <xQueueGenericSend+0x18a>
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f52:	f001 ff5d 	bl	8004e10 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f56:	1d3a      	adds	r2, r7, #4
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 ff82 	bl	8003e68 <xTaskCheckForTimeOut>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d124      	bne.n	8002fb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f6c:	f000 faa4 	bl	80034b8 <prvIsQueueFull>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d018      	beq.n	8002fa8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	3310      	adds	r3, #16
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fea6 	bl	8003cd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f86:	f000 fa2f 	bl	80033e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f8a:	f000 fcdd 	bl	8003948 <xTaskResumeAll>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f47f af7c 	bne.w	8002e8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f96:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <xQueueGenericSend+0x200>)
 8002f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	e772      	b.n	8002e8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002faa:	f000 fa1d 	bl	80033e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fae:	f000 fccb 	bl	8003948 <xTaskResumeAll>
 8002fb2:	e76c      	b.n	8002e8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fb6:	f000 fa17 	bl	80033e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fba:	f000 fcc5 	bl	8003948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3738      	adds	r7, #56	@ 0x38
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	e000ed04 	.word	0xe000ed04

08002fcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08e      	sub	sp, #56	@ 0x38
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <xQueueGenericSendFromISR+0x3e>
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <xQueueGenericSendFromISR+0x42>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <xQueueGenericSendFromISR+0x44>
 800300e:	2300      	movs	r3, #0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	623b      	str	r3, [r7, #32]
}
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d103      	bne.n	800303a <xQueueGenericSendFromISR+0x6e>
 8003032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <xQueueGenericSendFromISR+0x72>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <xQueueGenericSendFromISR+0x74>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	61fb      	str	r3, [r7, #28]
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800305c:	f001 ff8c 	bl	8004f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003060:	f3ef 8211 	mrs	r2, BASEPRI
 8003064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	61ba      	str	r2, [r7, #24]
 8003076:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003078:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003084:	429a      	cmp	r2, r3
 8003086:	d302      	bcc.n	800308e <xQueueGenericSendFromISR+0xc2>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d12c      	bne.n	80030e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800309e:	f000 f913 	bl	80032c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d112      	bne.n	80030d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d016      	beq.n	80030e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b6:	3324      	adds	r3, #36	@ 0x24
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fe5b 	bl	8003d74 <xTaskRemoveFromEventList>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e007      	b.n	80030e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030d6:	3301      	adds	r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	b25a      	sxtb	r2, r3
 80030dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80030e2:	2301      	movs	r3, #1
 80030e4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80030e6:	e001      	b.n	80030ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3738      	adds	r7, #56	@ 0x38
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	@ 0x30
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10b      	bne.n	8003136 <xQueueReceive+0x32>
	__asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	623b      	str	r3, [r7, #32]
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	e7fd      	b.n	8003132 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <xQueueReceive+0x40>
 800313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <xQueueReceive+0x44>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <xQueueReceive+0x46>
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <xQueueReceive+0x62>
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	61fb      	str	r3, [r7, #28]
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	e7fd      	b.n	8003162 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003166:	f000 ffa5 	bl	80040b4 <xTaskGetSchedulerState>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <xQueueReceive+0x72>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <xQueueReceive+0x76>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <xQueueReceive+0x78>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <xQueueReceive+0x94>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	61bb      	str	r3, [r7, #24]
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003198:	f001 fe08 	bl	8004dac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800319c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01f      	beq.n	80031e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ac:	f000 f8f6 	bl	800339c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	1e5a      	subs	r2, r3, #1
 80031b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00f      	beq.n	80031e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	3310      	adds	r3, #16
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fdd5 	bl	8003d74 <xTaskRemoveFromEventList>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031d0:	4b3c      	ldr	r3, [pc, #240]	@ (80032c4 <xQueueReceive+0x1c0>)
 80031d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031e0:	f001 fe16 	bl	8004e10 <vPortExitCritical>
				return pdPASS;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e069      	b.n	80032bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031ee:	f001 fe0f 	bl	8004e10 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e062      	b.n	80032bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d106      	bne.n	800320a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031fc:	f107 0310 	add.w	r3, r7, #16
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fe1b 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003206:	2301      	movs	r3, #1
 8003208:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800320a:	f001 fe01 	bl	8004e10 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800320e:	f000 fb8d 	bl	800392c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003212:	f001 fdcb 	bl	8004dac <vPortEnterCritical>
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800321c:	b25b      	sxtb	r3, r3
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d103      	bne.n	800322c <xQueueReceive+0x128>
 8003224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003232:	b25b      	sxtb	r3, r3
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d103      	bne.n	8003242 <xQueueReceive+0x13e>
 800323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003242:	f001 fde5 	bl	8004e10 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003246:	1d3a      	adds	r2, r7, #4
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fe0a 	bl	8003e68 <xTaskCheckForTimeOut>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d123      	bne.n	80032a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800325a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800325c:	f000 f916 	bl	800348c <prvIsQueueEmpty>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d017      	beq.n	8003296 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	3324      	adds	r3, #36	@ 0x24
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fd2e 	bl	8003cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003276:	f000 f8b7 	bl	80033e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800327a:	f000 fb65 	bl	8003948 <xTaskResumeAll>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d189      	bne.n	8003198 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003284:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <xQueueReceive+0x1c0>)
 8003286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	e780      	b.n	8003198 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003298:	f000 f8a6 	bl	80033e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800329c:	f000 fb54 	bl	8003948 <xTaskResumeAll>
 80032a0:	e77a      	b.n	8003198 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032a4:	f000 f8a0 	bl	80033e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032a8:	f000 fb4e 	bl	8003948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032ae:	f000 f8ed 	bl	800348c <prvIsQueueEmpty>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f43f af6f 	beq.w	8003198 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3730      	adds	r7, #48	@ 0x30
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10d      	bne.n	8003302 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d14d      	bne.n	800338a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fefc 	bl	80040f0 <xTaskPriorityDisinherit>
 80032f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	e043      	b.n	800338a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d119      	bne.n	800333c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6858      	ldr	r0, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	461a      	mov	r2, r3
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	f002 f8a8 	bl	8005468 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	441a      	add	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	d32b      	bcc.n	800338a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	e026      	b.n	800338a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68d8      	ldr	r0, [r3, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	461a      	mov	r2, r3
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	f002 f88e 	bl	8005468 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	425b      	negs	r3, r3
 8003356:	441a      	add	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d207      	bcs.n	8003378 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	425b      	negs	r3, r3
 8003372:	441a      	add	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d105      	bne.n	800338a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	3b01      	subs	r3, #1
 8003388:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003392:	697b      	ldr	r3, [r7, #20]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d018      	beq.n	80033e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	441a      	add	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d303      	bcc.n	80033d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68d9      	ldr	r1, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	461a      	mov	r2, r3
 80033da:	6838      	ldr	r0, [r7, #0]
 80033dc:	f002 f844 	bl	8005468 <memcpy>
	}
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033f0:	f001 fcdc 	bl	8004dac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033fc:	e011      	b.n	8003422 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d012      	beq.n	800342c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3324      	adds	r3, #36	@ 0x24
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fcb2 	bl	8003d74 <xTaskRemoveFromEventList>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003416:	f000 fd8b 	bl	8003f30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	3b01      	subs	r3, #1
 800341e:	b2db      	uxtb	r3, r3
 8003420:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003426:	2b00      	cmp	r3, #0
 8003428:	dce9      	bgt.n	80033fe <prvUnlockQueue+0x16>
 800342a:	e000      	b.n	800342e <prvUnlockQueue+0x46>
					break;
 800342c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	22ff      	movs	r2, #255	@ 0xff
 8003432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003436:	f001 fceb 	bl	8004e10 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800343a:	f001 fcb7 	bl	8004dac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003444:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003446:	e011      	b.n	800346c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d012      	beq.n	8003476 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3310      	adds	r3, #16
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fc8d 	bl	8003d74 <xTaskRemoveFromEventList>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003460:	f000 fd66 	bl	8003f30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	3b01      	subs	r3, #1
 8003468:	b2db      	uxtb	r3, r3
 800346a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800346c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003470:	2b00      	cmp	r3, #0
 8003472:	dce9      	bgt.n	8003448 <prvUnlockQueue+0x60>
 8003474:	e000      	b.n	8003478 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003476:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	22ff      	movs	r2, #255	@ 0xff
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003480:	f001 fcc6 	bl	8004e10 <vPortExitCritical>
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003494:	f001 fc8a 	bl	8004dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e001      	b.n	80034aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034aa:	f001 fcb1 	bl	8004e10 <vPortExitCritical>

	return xReturn;
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034c0:	f001 fc74 	bl	8004dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d102      	bne.n	80034d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e001      	b.n	80034da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034da:	f001 fc99 	bl	8004e10 <vPortExitCritical>

	return xReturn;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e014      	b.n	8003522 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003538 <vQueueAddToRegistry+0x50>)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003504:	490c      	ldr	r1, [pc, #48]	@ (8003538 <vQueueAddToRegistry+0x50>)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800350e:	4a0a      	ldr	r2, [pc, #40]	@ (8003538 <vQueueAddToRegistry+0x50>)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800351a:	e006      	b.n	800352a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3301      	adds	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b07      	cmp	r3, #7
 8003526:	d9e7      	bls.n	80034f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000114 	.word	0x20000114

0800353c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800354c:	f001 fc2e 	bl	8004dac <vPortEnterCritical>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003556:	b25b      	sxtb	r3, r3
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d103      	bne.n	8003566 <vQueueWaitForMessageRestricted+0x2a>
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800356c:	b25b      	sxtb	r3, r3
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d103      	bne.n	800357c <vQueueWaitForMessageRestricted+0x40>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800357c:	f001 fc48 	bl	8004e10 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3324      	adds	r3, #36	@ 0x24
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fbc3 	bl	8003d1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f7ff ff26 	bl	80033e8 <prvUnlockQueue>
	}
 800359c:	bf00      	nop
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08c      	sub	sp, #48	@ 0x30
 80035a8:	af04      	add	r7, sp, #16
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fd1f 	bl	8004ffc <pvPortMalloc>
 80035be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035c6:	2058      	movs	r0, #88	@ 0x58
 80035c8:	f001 fd18 	bl	8004ffc <pvPortMalloc>
 80035cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80035da:	e005      	b.n	80035e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035dc:	6978      	ldr	r0, [r7, #20]
 80035de:	f001 fdd5 	bl	800518c <vPortFree>
 80035e2:	e001      	b.n	80035e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d013      	beq.n	8003616 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	2300      	movs	r3, #0
 80035f2:	9303      	str	r3, [sp, #12]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	9302      	str	r3, [sp, #8]
 80035f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f80e 	bl	8003626 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800360a:	69f8      	ldr	r0, [r7, #28]
 800360c:	f000 f89c 	bl	8003748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003610:	2301      	movs	r3, #1
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	e002      	b.n	800361c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800361c:	69bb      	ldr	r3, [r7, #24]
	}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b088      	sub	sp, #32
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	461a      	mov	r2, r3
 800363e:	21a5      	movs	r1, #165	@ 0xa5
 8003640:	f001 fede 	bl	8005400 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800364e:	3b01      	subs	r3, #1
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f023 0307 	bic.w	r3, r3, #7
 800365c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	617b      	str	r3, [r7, #20]
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01f      	beq.n	80036c6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e012      	b.n	80036b2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	7819      	ldrb	r1, [r3, #0]
 8003694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	3334      	adds	r3, #52	@ 0x34
 800369c:	460a      	mov	r2, r1
 800369e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d006      	beq.n	80036ba <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b09      	cmp	r3, #9
 80036b6:	d9e9      	bls.n	800368c <prvInitialiseNewTask+0x66>
 80036b8:	e000      	b.n	80036bc <prvInitialiseNewTask+0x96>
			{
				break;
 80036ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036c4:	e003      	b.n	80036ce <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d0:	2b0e      	cmp	r3, #14
 80036d2:	d901      	bls.n	80036d8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036d4:	230e      	movs	r3, #14
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036e2:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	2200      	movs	r2, #0
 80036e8:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ec:	3304      	adds	r3, #4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fa0c 	bl	8002b0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	3318      	adds	r3, #24
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fa07 	bl	8002b0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003706:	f1c3 020f 	rsb	r2, r3, #15
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800370e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003712:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	2200      	movs	r2, #0
 8003718:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	68f9      	ldr	r1, [r7, #12]
 8003726:	69b8      	ldr	r0, [r7, #24]
 8003728:	f001 f9fc 	bl	8004b24 <pxPortInitialiseStack>
 800372c:	4602      	mov	r2, r0
 800372e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003730:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800373c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800373e:	bf00      	nop
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003750:	f001 fb2c 	bl	8004dac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003754:	4b2c      	ldr	r3, [pc, #176]	@ (8003808 <prvAddNewTaskToReadyList+0xc0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	4a2b      	ldr	r2, [pc, #172]	@ (8003808 <prvAddNewTaskToReadyList+0xc0>)
 800375c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800375e:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <prvAddNewTaskToReadyList+0xc4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003766:	4a29      	ldr	r2, [pc, #164]	@ (800380c <prvAddNewTaskToReadyList+0xc4>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800376c:	4b26      	ldr	r3, [pc, #152]	@ (8003808 <prvAddNewTaskToReadyList+0xc0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d110      	bne.n	8003796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003774:	f000 fc00 	bl	8003f78 <prvInitialiseTaskLists>
 8003778:	e00d      	b.n	8003796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800377a:	4b25      	ldr	r3, [pc, #148]	@ (8003810 <prvAddNewTaskToReadyList+0xc8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003782:	4b22      	ldr	r3, [pc, #136]	@ (800380c <prvAddNewTaskToReadyList+0xc4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	429a      	cmp	r2, r3
 800378e:	d802      	bhi.n	8003796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003790:	4a1e      	ldr	r2, [pc, #120]	@ (800380c <prvAddNewTaskToReadyList+0xc4>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003796:	4b1f      	ldr	r3, [pc, #124]	@ (8003814 <prvAddNewTaskToReadyList+0xcc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	4a1d      	ldr	r2, [pc, #116]	@ (8003814 <prvAddNewTaskToReadyList+0xcc>)
 800379e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003814 <prvAddNewTaskToReadyList+0xcc>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	2201      	movs	r2, #1
 80037ae:	409a      	lsls	r2, r3
 80037b0:	4b19      	ldr	r3, [pc, #100]	@ (8003818 <prvAddNewTaskToReadyList+0xd0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	4a18      	ldr	r2, [pc, #96]	@ (8003818 <prvAddNewTaskToReadyList+0xd0>)
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4a15      	ldr	r2, [pc, #84]	@ (800381c <prvAddNewTaskToReadyList+0xd4>)
 80037c8:	441a      	add	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	4619      	mov	r1, r3
 80037d0:	4610      	mov	r0, r2
 80037d2:	f7ff f9a8 	bl	8002b26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037d6:	f001 fb1b 	bl	8004e10 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037da:	4b0d      	ldr	r3, [pc, #52]	@ (8003810 <prvAddNewTaskToReadyList+0xc8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00e      	beq.n	8003800 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037e2:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <prvAddNewTaskToReadyList+0xc4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d207      	bcs.n	8003800 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <prvAddNewTaskToReadyList+0xd8>)
 80037f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	200002f4 	.word	0x200002f4
 800380c:	20000154 	.word	0x20000154
 8003810:	20000300 	.word	0x20000300
 8003814:	20000310 	.word	0x20000310
 8003818:	200002fc 	.word	0x200002fc
 800381c:	20000158 	.word	0x20000158
 8003820:	e000ed04 	.word	0xe000ed04

08003824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d018      	beq.n	8003868 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003836:	4b14      	ldr	r3, [pc, #80]	@ (8003888 <vTaskDelay+0x64>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <vTaskDelay+0x32>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	60bb      	str	r3, [r7, #8]
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	e7fd      	b.n	8003852 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003856:	f000 f869 	bl	800392c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800385a:	2100      	movs	r1, #0
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fccf 	bl	8004200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003862:	f000 f871 	bl	8003948 <xTaskResumeAll>
 8003866:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d107      	bne.n	800387e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800386e:	4b07      	ldr	r3, [pc, #28]	@ (800388c <vTaskDelay+0x68>)
 8003870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	2000031c 	.word	0x2000031c
 800388c:	e000ed04 	.word	0xe000ed04

08003890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003896:	4b1f      	ldr	r3, [pc, #124]	@ (8003914 <vTaskStartScheduler+0x84>)
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	2300      	movs	r3, #0
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	2300      	movs	r3, #0
 80038a0:	2282      	movs	r2, #130	@ 0x82
 80038a2:	491d      	ldr	r1, [pc, #116]	@ (8003918 <vTaskStartScheduler+0x88>)
 80038a4:	481d      	ldr	r0, [pc, #116]	@ (800391c <vTaskStartScheduler+0x8c>)
 80038a6:	f7ff fe7d 	bl	80035a4 <xTaskCreate>
 80038aa:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d102      	bne.n	80038b8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80038b2:	f000 fe19 	bl	80044e8 <xTimerCreateTimerTask>
 80038b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d116      	bne.n	80038ec <vTaskStartScheduler+0x5c>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60bb      	str	r3, [r7, #8]
}
 80038d0:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038d2:	4b13      	ldr	r3, [pc, #76]	@ (8003920 <vTaskStartScheduler+0x90>)
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038da:	4b12      	ldr	r3, [pc, #72]	@ (8003924 <vTaskStartScheduler+0x94>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038e0:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <vTaskStartScheduler+0x98>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038e6:	f001 f9ab 	bl	8004c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038ea:	e00f      	b.n	800390c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d10b      	bne.n	800390c <vTaskStartScheduler+0x7c>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	607b      	str	r3, [r7, #4]
}
 8003906:	bf00      	nop
 8003908:	bf00      	nop
 800390a:	e7fd      	b.n	8003908 <vTaskStartScheduler+0x78>
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20000318 	.word	0x20000318
 8003918:	08005d4c 	.word	0x08005d4c
 800391c:	08003f49 	.word	0x08003f49
 8003920:	20000314 	.word	0x20000314
 8003924:	20000300 	.word	0x20000300
 8003928:	200002f8 	.word	0x200002f8

0800392c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003930:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <vTaskSuspendAll+0x18>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	4a03      	ldr	r2, [pc, #12]	@ (8003944 <vTaskSuspendAll+0x18>)
 8003938:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	2000031c 	.word	0x2000031c

08003948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003956:	4b42      	ldr	r3, [pc, #264]	@ (8003a60 <xTaskResumeAll+0x118>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <xTaskResumeAll+0x2e>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	603b      	str	r3, [r7, #0]
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	e7fd      	b.n	8003972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003976:	f001 fa19 	bl	8004dac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800397a:	4b39      	ldr	r3, [pc, #228]	@ (8003a60 <xTaskResumeAll+0x118>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3b01      	subs	r3, #1
 8003980:	4a37      	ldr	r2, [pc, #220]	@ (8003a60 <xTaskResumeAll+0x118>)
 8003982:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003984:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <xTaskResumeAll+0x118>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d161      	bne.n	8003a50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800398c:	4b35      	ldr	r3, [pc, #212]	@ (8003a64 <xTaskResumeAll+0x11c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d05d      	beq.n	8003a50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003994:	e02e      	b.n	80039f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003996:	4b34      	ldr	r3, [pc, #208]	@ (8003a68 <xTaskResumeAll+0x120>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3318      	adds	r3, #24
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff f91c 	bl	8002be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff f917 	bl	8002be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	2201      	movs	r2, #1
 80039b8:	409a      	lsls	r2, r3
 80039ba:	4b2c      	ldr	r3, [pc, #176]	@ (8003a6c <xTaskResumeAll+0x124>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a6c <xTaskResumeAll+0x124>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4a27      	ldr	r2, [pc, #156]	@ (8003a70 <xTaskResumeAll+0x128>)
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7ff f8a3 	bl	8002b26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e4:	4b23      	ldr	r3, [pc, #140]	@ (8003a74 <xTaskResumeAll+0x12c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039ee:	4b22      	ldr	r3, [pc, #136]	@ (8003a78 <xTaskResumeAll+0x130>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a68 <xTaskResumeAll+0x120>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1cc      	bne.n	8003996 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a02:	f000 fb37 	bl	8004074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a06:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <xTaskResumeAll+0x134>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d010      	beq.n	8003a34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a12:	f000 f847 	bl	8003aa4 <xTaskIncrementTick>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a1c:	4b16      	ldr	r3, [pc, #88]	@ (8003a78 <xTaskResumeAll+0x130>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f1      	bne.n	8003a12 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <xTaskResumeAll+0x134>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a34:	4b10      	ldr	r3, [pc, #64]	@ (8003a78 <xTaskResumeAll+0x130>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a40:	4b0f      	ldr	r3, [pc, #60]	@ (8003a80 <xTaskResumeAll+0x138>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a50:	f001 f9de 	bl	8004e10 <vPortExitCritical>

	return xAlreadyYielded;
 8003a54:	68bb      	ldr	r3, [r7, #8]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	2000031c 	.word	0x2000031c
 8003a64:	200002f4 	.word	0x200002f4
 8003a68:	200002b4 	.word	0x200002b4
 8003a6c:	200002fc 	.word	0x200002fc
 8003a70:	20000158 	.word	0x20000158
 8003a74:	20000154 	.word	0x20000154
 8003a78:	20000308 	.word	0x20000308
 8003a7c:	20000304 	.word	0x20000304
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a8a:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <xTaskGetTickCount+0x1c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a90:	687b      	ldr	r3, [r7, #4]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	200002f8 	.word	0x200002f8

08003aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aae:	4b4f      	ldr	r3, [pc, #316]	@ (8003bec <xTaskIncrementTick+0x148>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 8089 	bne.w	8003bca <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf0 <xTaskIncrementTick+0x14c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ac0:	4a4b      	ldr	r2, [pc, #300]	@ (8003bf0 <xTaskIncrementTick+0x14c>)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d121      	bne.n	8003b10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003acc:	4b49      	ldr	r3, [pc, #292]	@ (8003bf4 <xTaskIncrementTick+0x150>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <xTaskIncrementTick+0x4a>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	603b      	str	r3, [r7, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	e7fd      	b.n	8003aea <xTaskIncrementTick+0x46>
 8003aee:	4b41      	ldr	r3, [pc, #260]	@ (8003bf4 <xTaskIncrementTick+0x150>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	4b40      	ldr	r3, [pc, #256]	@ (8003bf8 <xTaskIncrementTick+0x154>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf4 <xTaskIncrementTick+0x150>)
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf8 <xTaskIncrementTick+0x154>)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b3e      	ldr	r3, [pc, #248]	@ (8003bfc <xTaskIncrementTick+0x158>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3301      	adds	r3, #1
 8003b08:	4a3c      	ldr	r2, [pc, #240]	@ (8003bfc <xTaskIncrementTick+0x158>)
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	f000 fab2 	bl	8004074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b10:	4b3b      	ldr	r3, [pc, #236]	@ (8003c00 <xTaskIncrementTick+0x15c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d348      	bcc.n	8003bac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b1a:	4b36      	ldr	r3, [pc, #216]	@ (8003bf4 <xTaskIncrementTick+0x150>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b24:	4b36      	ldr	r3, [pc, #216]	@ (8003c00 <xTaskIncrementTick+0x15c>)
 8003b26:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2a:	601a      	str	r2, [r3, #0]
					break;
 8003b2c:	e03e      	b.n	8003bac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2e:	4b31      	ldr	r3, [pc, #196]	@ (8003bf4 <xTaskIncrementTick+0x150>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d203      	bcs.n	8003b4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b46:	4a2e      	ldr	r2, [pc, #184]	@ (8003c00 <xTaskIncrementTick+0x15c>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b4c:	e02e      	b.n	8003bac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff f844 	bl	8002be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	3318      	adds	r3, #24
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff f83b 	bl	8002be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6e:	2201      	movs	r2, #1
 8003b70:	409a      	lsls	r2, r3
 8003b72:	4b24      	ldr	r3, [pc, #144]	@ (8003c04 <xTaskIncrementTick+0x160>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	4a22      	ldr	r2, [pc, #136]	@ (8003c04 <xTaskIncrementTick+0x160>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <xTaskIncrementTick+0x164>)
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fe ffc7 	bl	8002b26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c0c <xTaskIncrementTick+0x168>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3b9      	bcc.n	8003b1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003baa:	e7b6      	b.n	8003b1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bac:	4b17      	ldr	r3, [pc, #92]	@ (8003c0c <xTaskIncrementTick+0x168>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb2:	4915      	ldr	r1, [pc, #84]	@ (8003c08 <xTaskIncrementTick+0x164>)
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d907      	bls.n	8003bd4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e004      	b.n	8003bd4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003bca:	4b11      	ldr	r3, [pc, #68]	@ (8003c10 <xTaskIncrementTick+0x16c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8003c10 <xTaskIncrementTick+0x16c>)
 8003bd2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c14 <xTaskIncrementTick+0x170>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003be0:	697b      	ldr	r3, [r7, #20]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2000031c 	.word	0x2000031c
 8003bf0:	200002f8 	.word	0x200002f8
 8003bf4:	200002ac 	.word	0x200002ac
 8003bf8:	200002b0 	.word	0x200002b0
 8003bfc:	2000030c 	.word	0x2000030c
 8003c00:	20000314 	.word	0x20000314
 8003c04:	200002fc 	.word	0x200002fc
 8003c08:	20000158 	.word	0x20000158
 8003c0c:	20000154 	.word	0x20000154
 8003c10:	20000304 	.word	0x20000304
 8003c14:	20000308 	.word	0x20000308

08003c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c1e:	4b27      	ldr	r3, [pc, #156]	@ (8003cbc <vTaskSwitchContext+0xa4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c26:	4b26      	ldr	r3, [pc, #152]	@ (8003cc0 <vTaskSwitchContext+0xa8>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c2c:	e040      	b.n	8003cb0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003c2e:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <vTaskSwitchContext+0xa8>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c34:	4b23      	ldr	r3, [pc, #140]	@ (8003cc4 <vTaskSwitchContext+0xac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	fab3 f383 	clz	r3, r3
 8003c40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c42:	7afb      	ldrb	r3, [r7, #11]
 8003c44:	f1c3 031f 	rsb	r3, r3, #31
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	491f      	ldr	r1, [pc, #124]	@ (8003cc8 <vTaskSwitchContext+0xb0>)
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10b      	bne.n	8003c76 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	607b      	str	r3, [r7, #4]
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	e7fd      	b.n	8003c72 <vTaskSwitchContext+0x5a>
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4a11      	ldr	r2, [pc, #68]	@ (8003cc8 <vTaskSwitchContext+0xb0>)
 8003c82:	4413      	add	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	3308      	adds	r3, #8
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d104      	bne.n	8003ca6 <vTaskSwitchContext+0x8e>
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a07      	ldr	r2, [pc, #28]	@ (8003ccc <vTaskSwitchContext+0xb4>)
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	2000031c 	.word	0x2000031c
 8003cc0:	20000308 	.word	0x20000308
 8003cc4:	200002fc 	.word	0x200002fc
 8003cc8:	20000158 	.word	0x20000158
 8003ccc:	20000154 	.word	0x20000154

08003cd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	60fb      	str	r3, [r7, #12]
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cf8:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <vTaskPlaceOnEventList+0x48>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3318      	adds	r3, #24
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fe ff34 	bl	8002b6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d06:	2101      	movs	r1, #1
 8003d08:	6838      	ldr	r0, [r7, #0]
 8003d0a:	f000 fa79 	bl	8004200 <prvAddCurrentTaskToDelayedList>
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000154 	.word	0x20000154

08003d1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	617b      	str	r3, [r7, #20]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d46:	4b0a      	ldr	r3, [pc, #40]	@ (8003d70 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3318      	adds	r3, #24
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7fe fee9 	bl	8002b26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	68b8      	ldr	r0, [r7, #8]
 8003d64:	f000 fa4c 	bl	8004200 <prvAddCurrentTaskToDelayedList>
	}
 8003d68:	bf00      	nop
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000154 	.word	0x20000154

08003d74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60fb      	str	r3, [r7, #12]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	3318      	adds	r3, #24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe ff1a 	bl	8002be0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dac:	4b1d      	ldr	r3, [pc, #116]	@ (8003e24 <xTaskRemoveFromEventList+0xb0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11c      	bne.n	8003dee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe ff11 	bl	8002be0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	4b18      	ldr	r3, [pc, #96]	@ (8003e28 <xTaskRemoveFromEventList+0xb4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	4a16      	ldr	r2, [pc, #88]	@ (8003e28 <xTaskRemoveFromEventList+0xb4>)
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4a13      	ldr	r2, [pc, #76]	@ (8003e2c <xTaskRemoveFromEventList+0xb8>)
 8003dde:	441a      	add	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f7fe fe9d 	bl	8002b26 <vListInsertEnd>
 8003dec:	e005      	b.n	8003dfa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3318      	adds	r3, #24
 8003df2:	4619      	mov	r1, r3
 8003df4:	480e      	ldr	r0, [pc, #56]	@ (8003e30 <xTaskRemoveFromEventList+0xbc>)
 8003df6:	f7fe fe96 	bl	8002b26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003e34 <xTaskRemoveFromEventList+0xc0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d905      	bls.n	8003e14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <xTaskRemoveFromEventList+0xc4>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e001      	b.n	8003e18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e18:	697b      	ldr	r3, [r7, #20]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	2000031c 	.word	0x2000031c
 8003e28:	200002fc 	.word	0x200002fc
 8003e2c:	20000158 	.word	0x20000158
 8003e30:	200002b4 	.word	0x200002b4
 8003e34:	20000154 	.word	0x20000154
 8003e38:	20000308 	.word	0x20000308

08003e3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e44:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <vTaskInternalSetTimeOutState+0x24>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e4c:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <vTaskInternalSetTimeOutState+0x28>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	605a      	str	r2, [r3, #4]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	2000030c 	.word	0x2000030c
 8003e64:	200002f8 	.word	0x200002f8

08003e68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10b      	bne.n	8003e90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	613b      	str	r3, [r7, #16]
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	e7fd      	b.n	8003e8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60fb      	str	r3, [r7, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	e7fd      	b.n	8003eaa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003eae:	f000 ff7d 	bl	8004dac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f28 <xTaskCheckForTimeOut+0xc0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d102      	bne.n	8003ed2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	e023      	b.n	8003f1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b15      	ldr	r3, [pc, #84]	@ (8003f2c <xTaskCheckForTimeOut+0xc4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d007      	beq.n	8003eee <xTaskCheckForTimeOut+0x86>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e015      	b.n	8003f1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d20b      	bcs.n	8003f10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	1ad2      	subs	r2, r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff99 	bl	8003e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e004      	b.n	8003f1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f1a:	f000 ff79 	bl	8004e10 <vPortExitCritical>

	return xReturn;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	200002f8 	.word	0x200002f8
 8003f2c:	2000030c 	.word	0x2000030c

08003f30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f34:	4b03      	ldr	r3, [pc, #12]	@ (8003f44 <vTaskMissedYield+0x14>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	20000308 	.word	0x20000308

08003f48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f50:	f000 f852 	bl	8003ff8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f54:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <prvIdleTask+0x28>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d9f9      	bls.n	8003f50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <prvIdleTask+0x2c>)
 8003f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f6c:	e7f0      	b.n	8003f50 <prvIdleTask+0x8>
 8003f6e:	bf00      	nop
 8003f70:	20000158 	.word	0x20000158
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
 8003f82:	e00c      	b.n	8003f9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4a12      	ldr	r2, [pc, #72]	@ (8003fd8 <prvInitialiseTaskLists+0x60>)
 8003f90:	4413      	add	r3, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fd9a 	bl	8002acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b0e      	cmp	r3, #14
 8003fa2:	d9ef      	bls.n	8003f84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fa4:	480d      	ldr	r0, [pc, #52]	@ (8003fdc <prvInitialiseTaskLists+0x64>)
 8003fa6:	f7fe fd91 	bl	8002acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003faa:	480d      	ldr	r0, [pc, #52]	@ (8003fe0 <prvInitialiseTaskLists+0x68>)
 8003fac:	f7fe fd8e 	bl	8002acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fb0:	480c      	ldr	r0, [pc, #48]	@ (8003fe4 <prvInitialiseTaskLists+0x6c>)
 8003fb2:	f7fe fd8b 	bl	8002acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fb6:	480c      	ldr	r0, [pc, #48]	@ (8003fe8 <prvInitialiseTaskLists+0x70>)
 8003fb8:	f7fe fd88 	bl	8002acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fbc:	480b      	ldr	r0, [pc, #44]	@ (8003fec <prvInitialiseTaskLists+0x74>)
 8003fbe:	f7fe fd85 	bl	8002acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <prvInitialiseTaskLists+0x78>)
 8003fc4:	4a05      	ldr	r2, [pc, #20]	@ (8003fdc <prvInitialiseTaskLists+0x64>)
 8003fc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff4 <prvInitialiseTaskLists+0x7c>)
 8003fca:	4a05      	ldr	r2, [pc, #20]	@ (8003fe0 <prvInitialiseTaskLists+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000158 	.word	0x20000158
 8003fdc:	20000284 	.word	0x20000284
 8003fe0:	20000298 	.word	0x20000298
 8003fe4:	200002b4 	.word	0x200002b4
 8003fe8:	200002c8 	.word	0x200002c8
 8003fec:	200002e0 	.word	0x200002e0
 8003ff0:	200002ac 	.word	0x200002ac
 8003ff4:	200002b0 	.word	0x200002b0

08003ff8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ffe:	e019      	b.n	8004034 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004000:	f000 fed4 	bl	8004dac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004004:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <prvCheckTasksWaitingTermination+0x50>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fde5 	bl	8002be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004016:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <prvCheckTasksWaitingTermination+0x54>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	4a0b      	ldr	r2, [pc, #44]	@ (800404c <prvCheckTasksWaitingTermination+0x54>)
 800401e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004020:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <prvCheckTasksWaitingTermination+0x58>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3b01      	subs	r3, #1
 8004026:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <prvCheckTasksWaitingTermination+0x58>)
 8004028:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800402a:	f000 fef1 	bl	8004e10 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f810 	bl	8004054 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004034:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <prvCheckTasksWaitingTermination+0x58>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e1      	bne.n	8004000 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200002c8 	.word	0x200002c8
 800404c:	200002f4 	.word	0x200002f4
 8004050:	200002dc 	.word	0x200002dc

08004054 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004060:	4618      	mov	r0, r3
 8004062:	f001 f893 	bl	800518c <vPortFree>
			vPortFree( pxTCB );
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f001 f890 	bl	800518c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800407a:	4b0c      	ldr	r3, [pc, #48]	@ (80040ac <prvResetNextTaskUnblockTime+0x38>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004084:	4b0a      	ldr	r3, [pc, #40]	@ (80040b0 <prvResetNextTaskUnblockTime+0x3c>)
 8004086:	f04f 32ff 	mov.w	r2, #4294967295
 800408a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800408c:	e008      	b.n	80040a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408e:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <prvResetNextTaskUnblockTime+0x38>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a04      	ldr	r2, [pc, #16]	@ (80040b0 <prvResetNextTaskUnblockTime+0x3c>)
 800409e:	6013      	str	r3, [r2, #0]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	200002ac 	.word	0x200002ac
 80040b0:	20000314 	.word	0x20000314

080040b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040ba:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <xTaskGetSchedulerState+0x34>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040c2:	2301      	movs	r3, #1
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	e008      	b.n	80040da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c8:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <xTaskGetSchedulerState+0x38>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040d0:	2302      	movs	r3, #2
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	e001      	b.n	80040da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040da:	687b      	ldr	r3, [r7, #4]
	}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	20000300 	.word	0x20000300
 80040ec:	2000031c 	.word	0x2000031c

080040f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d070      	beq.n	80041e8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004106:	4b3b      	ldr	r3, [pc, #236]	@ (80041f4 <xTaskPriorityDisinherit+0x104>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	429a      	cmp	r2, r3
 800410e:	d00b      	beq.n	8004128 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	60bb      	str	r3, [r7, #8]
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414c:	1e5a      	subs	r2, r3, #1
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800415a:	429a      	cmp	r2, r3
 800415c:	d044      	beq.n	80041e8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d140      	bne.n	80041e8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3304      	adds	r3, #4
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fd38 	bl	8002be0 <uxListRemove>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d115      	bne.n	80041a2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800417a:	491f      	ldr	r1, [pc, #124]	@ (80041f8 <xTaskPriorityDisinherit+0x108>)
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <xTaskPriorityDisinherit+0xb2>
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	2201      	movs	r2, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43da      	mvns	r2, r3
 8004198:	4b18      	ldr	r3, [pc, #96]	@ (80041fc <xTaskPriorityDisinherit+0x10c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4013      	ands	r3, r2
 800419e:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <xTaskPriorityDisinherit+0x10c>)
 80041a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	f1c3 020f 	rsb	r2, r3, #15
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	2201      	movs	r2, #1
 80041bc:	409a      	lsls	r2, r3
 80041be:	4b0f      	ldr	r3, [pc, #60]	@ (80041fc <xTaskPriorityDisinherit+0x10c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	4a0d      	ldr	r2, [pc, #52]	@ (80041fc <xTaskPriorityDisinherit+0x10c>)
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4a08      	ldr	r2, [pc, #32]	@ (80041f8 <xTaskPriorityDisinherit+0x108>)
 80041d6:	441a      	add	r2, r3
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f7fe fca1 	bl	8002b26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041e8:	697b      	ldr	r3, [r7, #20]
	}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000154 	.word	0x20000154
 80041f8:	20000158 	.word	0x20000158
 80041fc:	200002fc 	.word	0x200002fc

08004200 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800420a:	4b29      	ldr	r3, [pc, #164]	@ (80042b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004210:	4b28      	ldr	r3, [pc, #160]	@ (80042b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3304      	adds	r3, #4
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fce2 	bl	8002be0 <uxListRemove>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004222:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004228:	2201      	movs	r2, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43da      	mvns	r2, r3
 8004230:	4b21      	ldr	r3, [pc, #132]	@ (80042b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4013      	ands	r3, r2
 8004236:	4a20      	ldr	r2, [pc, #128]	@ (80042b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004238:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d10a      	bne.n	8004258 <prvAddCurrentTaskToDelayedList+0x58>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004248:	4b1a      	ldr	r3, [pc, #104]	@ (80042b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3304      	adds	r3, #4
 800424e:	4619      	mov	r1, r3
 8004250:	481a      	ldr	r0, [pc, #104]	@ (80042bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004252:	f7fe fc68 	bl	8002b26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004256:	e026      	b.n	80042a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004260:	4b14      	ldr	r3, [pc, #80]	@ (80042b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	429a      	cmp	r2, r3
 800426e:	d209      	bcs.n	8004284 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004270:	4b13      	ldr	r3, [pc, #76]	@ (80042c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b0f      	ldr	r3, [pc, #60]	@ (80042b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3304      	adds	r3, #4
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f7fe fc76 	bl	8002b6e <vListInsert>
}
 8004282:	e010      	b.n	80042a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004284:	4b0f      	ldr	r3, [pc, #60]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3304      	adds	r3, #4
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f7fe fc6c 	bl	8002b6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004296:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	d202      	bcs.n	80042a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042a0:	4a09      	ldr	r2, [pc, #36]	@ (80042c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	6013      	str	r3, [r2, #0]
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200002f8 	.word	0x200002f8
 80042b4:	20000154 	.word	0x20000154
 80042b8:	200002fc 	.word	0x200002fc
 80042bc:	200002e0 	.word	0x200002e0
 80042c0:	200002b0 	.word	0x200002b0
 80042c4:	200002ac 	.word	0x200002ac
 80042c8:	20000314 	.word	0x20000314

080042cc <print_pcb>:
#endif

void Taskmonitor(void);
void print_pcb(TCB_t *t, char *state);

void print_pcb(TCB_t *t, char *state){
 80042cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ce:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
 80042d2:	af04      	add	r7, sp, #16
 80042d4:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80042d8:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80042dc:	6018      	str	r0, [r3, #0]
 80042de:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80042e2:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80042e6:	6019      	str	r1, [r3, #0]
	char Monitor_data[1000];
	memset(Monitor_data,'\0',sizeof(Monitor_data));
 80042e8:	f107 0308 	add.w	r3, r7, #8
 80042ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f001 f884 	bl	8005400 <memset>
	sprintf(Monitor_data,"%-19s %3lu/%-19lu 0x%-9lx 0x%-14lx %s\n\r", t->pcTaskName, t->uxPriority, t->uxBasePriority, t->pxStack, t->pxTopOfStack, state);
 80042f8:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80042fc:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f103 0534 	add.w	r5, r3, #52	@ 0x34
 8004306:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800430a:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8004312:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8004316:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800431e:	f507 727c 	add.w	r2, r7, #1008	@ 0x3f0
 8004322:	f5a2 727b 	sub.w	r2, r2, #1004	@ 0x3ec
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800432a:	f507 717c 	add.w	r1, r7, #1008	@ 0x3f0
 800432e:	f5a1 717b 	sub.w	r1, r1, #1004	@ 0x3ec
 8004332:	6809      	ldr	r1, [r1, #0]
 8004334:	6809      	ldr	r1, [r1, #0]
 8004336:	f107 0408 	add.w	r4, r7, #8
 800433a:	f507 707c 	add.w	r0, r7, #1008	@ 0x3f0
 800433e:	f5a0 707c 	sub.w	r0, r0, #1008	@ 0x3f0
 8004342:	6800      	ldr	r0, [r0, #0]
 8004344:	9003      	str	r0, [sp, #12]
 8004346:	9102      	str	r1, [sp, #8]
 8004348:	9201      	str	r2, [sp, #4]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	4633      	mov	r3, r6
 800434e:	462a      	mov	r2, r5
 8004350:	490b      	ldr	r1, [pc, #44]	@ (8004380 <print_pcb+0xb4>)
 8004352:	4620      	mov	r0, r4
 8004354:	f001 f832 	bl	80053bc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 8004358:	f107 0308 	add.w	r3, r7, #8
 800435c:	4618      	mov	r0, r3
 800435e:	f7fb ff37 	bl	80001d0 <strlen>
 8004362:	4603      	mov	r3, r0
 8004364:	b29a      	uxth	r2, r3
 8004366:	f107 0108 	add.w	r1, r7, #8
 800436a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800436e:	4805      	ldr	r0, [pc, #20]	@ (8004384 <print_pcb+0xb8>)
 8004370:	f7fd fff0 	bl	8002354 <HAL_UART_Transmit>
}
 8004374:	bf00      	nop
 8004376:	f507 777d 	add.w	r7, r7, #1012	@ 0x3f4
 800437a:	46bd      	mov	sp, r7
 800437c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800437e:	bf00      	nop
 8004380:	08005d54 	.word	0x08005d54
 8004384:	2000007c 	.word	0x2000007c

08004388 <Taskmonitor>:


void Taskmonitor(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b0b8      	sub	sp, #224	@ 0xe0
 800438c:	af00      	add	r7, sp, #0


	/* Stop scheduler */
	/* Taskmonitor() will block when UART is transmitting data */
	/* Scheduler will change list data when Taskmonitor() is blocked */
	vTaskSuspendAll();
 800438e:	f7ff facd 	bl	800392c <vTaskSuspendAll>
	/* Print title */
	char Monitor_data[200];
	memset(Monitor_data,'\0',sizeof(Monitor_data));
 8004392:	1d3b      	adds	r3, r7, #4
 8004394:	22c8      	movs	r2, #200	@ 0xc8
 8004396:	2100      	movs	r1, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f001 f831 	bl	8005400 <memset>
	sprintf(Monitor_data,"|Name |Priority(Base/actual)                |pxStack |pxTopOfStack      |State |\n\r");
 800439e:	1d3b      	adds	r3, r7, #4
 80043a0:	4949      	ldr	r1, [pc, #292]	@ (80044c8 <Taskmonitor+0x140>)
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 f80a 	bl	80053bc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 80043a8:	1d3b      	adds	r3, r7, #4
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fb ff10 	bl	80001d0 <strlen>
 80043b0:	4603      	mov	r3, r0
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	1d39      	adds	r1, r7, #4
 80043b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043ba:	4844      	ldr	r0, [pc, #272]	@ (80044cc <Taskmonitor+0x144>)
 80043bc:	f7fd ffca 	bl	8002354 <HAL_UART_Transmit>

	ListItem_t *node;
	/* pxReadyTasksLists */
	for(int i=0;i<15;i++){
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043c6:	e033      	b.n	8004430 <Taskmonitor+0xa8>
		node = listGET_HEAD_ENTRY(pxReadyTasksLists + i);
 80043c8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	461a      	mov	r2, r3
 80043d6:	4b3e      	ldr	r3, [pc, #248]	@ (80044d0 <Taskmonitor+0x148>)
 80043d8:	4413      	add	r3, r2
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxReadyTasksLists + i);j++){
 80043e0:	2300      	movs	r3, #0
 80043e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80043e6:	e010      	b.n	800440a <Taskmonitor+0x82>
			print_pcb(listGET_LIST_ITEM_OWNER(node), "Ready");
 80043e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4939      	ldr	r1, [pc, #228]	@ (80044d4 <Taskmonitor+0x14c>)
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff ff6b 	bl	80042cc <print_pcb>
			node = listGET_NEXT(node);
 80043f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxReadyTasksLists + i);j++){
 8004400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004404:	3301      	adds	r3, #1
 8004406:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800440a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	461a      	mov	r2, r3
 8004418:	4b2d      	ldr	r3, [pc, #180]	@ (80044d0 <Taskmonitor+0x148>)
 800441a:	4413      	add	r3, r2
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004422:	429a      	cmp	r2, r3
 8004424:	d3e0      	bcc.n	80043e8 <Taskmonitor+0x60>
	for(int i=0;i<15;i++){
 8004426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800442a:	3301      	adds	r3, #1
 800442c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004434:	2b0e      	cmp	r3, #14
 8004436:	ddc7      	ble.n	80043c8 <Taskmonitor+0x40>
		}
	}
	/* pxDelayedTaskList*/
	node = listGET_HEAD_ENTRY(pxDelayedTaskList);
 8004438:	4b27      	ldr	r3, [pc, #156]	@ (80044d8 <Taskmonitor+0x150>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxDelayedTaskList);j++){
 8004442:	2300      	movs	r3, #0
 8004444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004448:	e010      	b.n	800446c <Taskmonitor+0xe4>
		print_pcb(listGET_LIST_ITEM_OWNER(node), "Blocked");
 800444a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4922      	ldr	r1, [pc, #136]	@ (80044dc <Taskmonitor+0x154>)
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ff3a 	bl	80042cc <print_pcb>
		node = listGET_NEXT(node);
 8004458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxDelayedTaskList);j++){
 8004462:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004466:	3301      	adds	r3, #1
 8004468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800446c:	4b1a      	ldr	r3, [pc, #104]	@ (80044d8 <Taskmonitor+0x150>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004476:	429a      	cmp	r2, r3
 8004478:	d3e7      	bcc.n	800444a <Taskmonitor+0xc2>
	}
	/* pxOverflowDelayedTaskList */
	node = listGET_HEAD_ENTRY(pxOverflowDelayedTaskList);
 800447a:	4b19      	ldr	r3, [pc, #100]	@ (80044e0 <Taskmonitor+0x158>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxOverflowDelayedTaskList);j++){
 8004484:	2300      	movs	r3, #0
 8004486:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800448a:	e010      	b.n	80044ae <Taskmonitor+0x126>
		print_pcb(listGET_LIST_ITEM_OWNER(node), "Overflow");
 800448c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4914      	ldr	r1, [pc, #80]	@ (80044e4 <Taskmonitor+0x15c>)
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff ff19 	bl	80042cc <print_pcb>
		node = listGET_NEXT(node);
 800449a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxOverflowDelayedTaskList);j++){
 80044a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044a8:	3301      	adds	r3, #1
 80044aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044ae:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <Taskmonitor+0x158>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d3e7      	bcc.n	800448c <Taskmonitor+0x104>
	}
	/* Resume scheduler */
	xTaskResumeAll();
 80044bc:	f7ff fa44 	bl	8003948 <xTaskResumeAll>
}
 80044c0:	bf00      	nop
 80044c2:	37e0      	adds	r7, #224	@ 0xe0
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	08005d7c 	.word	0x08005d7c
 80044cc:	2000007c 	.word	0x2000007c
 80044d0:	20000158 	.word	0x20000158
 80044d4:	08005dd0 	.word	0x08005dd0
 80044d8:	200002ac 	.word	0x200002ac
 80044dc:	08005dd8 	.word	0x08005dd8
 80044e0:	200002b0 	.word	0x200002b0
 80044e4:	08005de0 	.word	0x08005de0

080044e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044f2:	f000 fae1 	bl	8004ab8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044f6:	4b12      	ldr	r3, [pc, #72]	@ (8004540 <xTimerCreateTimerTask+0x58>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80044fe:	4b11      	ldr	r3, [pc, #68]	@ (8004544 <xTimerCreateTimerTask+0x5c>)
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	2302      	movs	r3, #2
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2300      	movs	r3, #0
 8004508:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800450c:	490e      	ldr	r1, [pc, #56]	@ (8004548 <xTimerCreateTimerTask+0x60>)
 800450e:	480f      	ldr	r0, [pc, #60]	@ (800454c <xTimerCreateTimerTask+0x64>)
 8004510:	f7ff f848 	bl	80035a4 <xTaskCreate>
 8004514:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	603b      	str	r3, [r7, #0]
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004534:	687b      	ldr	r3, [r7, #4]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000350 	.word	0x20000350
 8004544:	20000354 	.word	0x20000354
 8004548:	08005dec 	.word	0x08005dec
 800454c:	08004689 	.word	0x08004689

08004550 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	@ 0x28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800455e:	2300      	movs	r3, #0
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <xTimerGenericCommand+0x30>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	623b      	str	r3, [r7, #32]
}
 800457a:	bf00      	nop
 800457c:	bf00      	nop
 800457e:	e7fd      	b.n	800457c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004580:	4b19      	ldr	r3, [pc, #100]	@ (80045e8 <xTimerGenericCommand+0x98>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02a      	beq.n	80045de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b05      	cmp	r3, #5
 8004598:	dc18      	bgt.n	80045cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800459a:	f7ff fd8b 	bl	80040b4 <xTaskGetSchedulerState>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d109      	bne.n	80045b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045a4:	4b10      	ldr	r3, [pc, #64]	@ (80045e8 <xTimerGenericCommand+0x98>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	f107 0114 	add.w	r1, r7, #20
 80045ac:	2300      	movs	r3, #0
 80045ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b0:	f7fe fc0a 	bl	8002dc8 <xQueueGenericSend>
 80045b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80045b6:	e012      	b.n	80045de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045b8:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <xTimerGenericCommand+0x98>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	f107 0114 	add.w	r1, r7, #20
 80045c0:	2300      	movs	r3, #0
 80045c2:	2200      	movs	r2, #0
 80045c4:	f7fe fc00 	bl	8002dc8 <xQueueGenericSend>
 80045c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80045ca:	e008      	b.n	80045de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <xTimerGenericCommand+0x98>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	f107 0114 	add.w	r1, r7, #20
 80045d4:	2300      	movs	r3, #0
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	f7fe fcf8 	bl	8002fcc <xQueueGenericSendFromISR>
 80045dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3728      	adds	r7, #40	@ 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20000350 	.word	0x20000350

080045ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f6:	4b23      	ldr	r3, [pc, #140]	@ (8004684 <prvProcessExpiredTimer+0x98>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	3304      	adds	r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe faeb 	bl	8002be0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d023      	beq.n	8004660 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	18d1      	adds	r1, r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	6978      	ldr	r0, [r7, #20]
 8004626:	f000 f8d5 	bl	80047d4 <prvInsertTimerInActiveList>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004630:	2300      	movs	r3, #0
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	2300      	movs	r3, #0
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	2100      	movs	r1, #0
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f7ff ff88 	bl	8004550 <xTimerGenericCommand>
 8004640:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d114      	bne.n	8004672 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	60fb      	str	r3, [r7, #12]
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	6978      	ldr	r0, [r7, #20]
 8004678:	4798      	blx	r3
}
 800467a:	bf00      	nop
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000348 	.word	0x20000348

08004688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004690:	f107 0308 	add.w	r3, r7, #8
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f859 	bl	800474c <prvGetNextExpireTime>
 800469a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4619      	mov	r1, r3
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f805 	bl	80046b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046a6:	f000 f8d7 	bl	8004858 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046aa:	bf00      	nop
 80046ac:	e7f0      	b.n	8004690 <prvTimerTask+0x8>
	...

080046b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046ba:	f7ff f937 	bl	800392c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046be:	f107 0308 	add.w	r3, r7, #8
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f866 	bl	8004794 <prvSampleTimeNow>
 80046c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d130      	bne.n	8004732 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <prvProcessTimerOrBlockTask+0x3c>
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d806      	bhi.n	80046ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046de:	f7ff f933 	bl	8003948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff81 	bl	80045ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046ea:	e024      	b.n	8004736 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046f2:	4b13      	ldr	r3, [pc, #76]	@ (8004740 <prvProcessTimerOrBlockTask+0x90>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <prvProcessTimerOrBlockTask+0x50>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <prvProcessTimerOrBlockTask+0x52>
 8004700:	2300      	movs	r3, #0
 8004702:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004704:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <prvProcessTimerOrBlockTask+0x94>)
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	f7fe ff13 	bl	800353c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004716:	f7ff f917 	bl	8003948 <xTaskResumeAll>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004720:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <prvProcessTimerOrBlockTask+0x98>)
 8004722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
}
 8004730:	e001      	b.n	8004736 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004732:	f7ff f909 	bl	8003948 <xTaskResumeAll>
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	2000034c 	.word	0x2000034c
 8004744:	20000350 	.word	0x20000350
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004754:	4b0e      	ldr	r3, [pc, #56]	@ (8004790 <prvGetNextExpireTime+0x44>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <prvGetNextExpireTime+0x16>
 800475e:	2201      	movs	r2, #1
 8004760:	e000      	b.n	8004764 <prvGetNextExpireTime+0x18>
 8004762:	2200      	movs	r2, #0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004770:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <prvGetNextExpireTime+0x44>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e001      	b.n	8004780 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004780:	68fb      	ldr	r3, [r7, #12]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000348 	.word	0x20000348

08004794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800479c:	f7ff f972 	bl	8003a84 <xTaskGetTickCount>
 80047a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047a2:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <prvSampleTimeNow+0x3c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d205      	bcs.n	80047b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80047ac:	f000 f91e 	bl	80049ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e002      	b.n	80047be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047be:	4a04      	ldr	r2, [pc, #16]	@ (80047d0 <prvSampleTimeNow+0x3c>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047c4:	68fb      	ldr	r3, [r7, #12]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000358 	.word	0x20000358

080047d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d812      	bhi.n	8004820 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e01b      	b.n	8004846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800480e:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <prvInsertTimerInActiveList+0x7c>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f7fe f9a8 	bl	8002b6e <vListInsert>
 800481e:	e012      	b.n	8004846 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d206      	bcs.n	8004836 <prvInsertTimerInActiveList+0x62>
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e007      	b.n	8004846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004836:	4b07      	ldr	r3, [pc, #28]	@ (8004854 <prvInsertTimerInActiveList+0x80>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f7fe f994 	bl	8002b6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004846:	697b      	ldr	r3, [r7, #20]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	2000034c 	.word	0x2000034c
 8004854:	20000348 	.word	0x20000348

08004858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	@ 0x30
 800485c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800485e:	e0b2      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f2c0 80af 	blt.w	80049c6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	3304      	adds	r3, #4
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe f9b1 	bl	8002be0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff ff87 	bl	8004794 <prvSampleTimeNow>
 8004886:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b09      	cmp	r3, #9
 800488c:	f200 8098 	bhi.w	80049c0 <prvProcessReceivedCommands+0x168>
 8004890:	a201      	add	r2, pc, #4	@ (adr r2, 8004898 <prvProcessReceivedCommands+0x40>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c1 	.word	0x080048c1
 80048a4:	08004937 	.word	0x08004937
 80048a8:	0800494b 	.word	0x0800494b
 80048ac:	08004997 	.word	0x08004997
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048c1 	.word	0x080048c1
 80048b8:	08004937 	.word	0x08004937
 80048bc:	0800494b 	.word	0x0800494b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	18d1      	adds	r1, r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048e0:	f7ff ff78 	bl	80047d4 <prvInsertTimerInActiveList>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d06c      	beq.n	80049c4 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d061      	beq.n	80049c4 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	441a      	add	r2, r3
 8004908:	2300      	movs	r3, #0
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2300      	movs	r3, #0
 800490e:	2100      	movs	r1, #0
 8004910:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004912:	f7ff fe1d 	bl	8004550 <xTimerGenericCommand>
 8004916:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d152      	bne.n	80049c4 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	61bb      	str	r3, [r7, #24]
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	b2da      	uxtb	r2, r3
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004948:	e03d      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	b2da      	uxtb	r2, r3
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	617b      	str	r3, [r7, #20]
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	e7fd      	b.n	800497e <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	18d1      	adds	r1, r2, r3
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	6a3a      	ldr	r2, [r7, #32]
 800498e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004990:	f7ff ff20 	bl	80047d4 <prvInsertTimerInActiveList>
					break;
 8004994:	e017      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d103      	bne.n	80049ac <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 80049a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049a6:	f000 fbf1 	bl	800518c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049aa:	e00c      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80049be:	e002      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <prvProcessReceivedCommands+0x16e>
					break;
 80049c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049c6:	4b08      	ldr	r3, [pc, #32]	@ (80049e8 <prvProcessReceivedCommands+0x190>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f107 0108 	add.w	r1, r7, #8
 80049ce:	2200      	movs	r2, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fe fb97 	bl	8003104 <xQueueReceive>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f47f af41 	bne.w	8004860 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	3728      	adds	r7, #40	@ 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000350 	.word	0x20000350

080049ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049f2:	e049      	b.n	8004a88 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f4:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049fe:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fe f8e7 	bl	8002be0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d02f      	beq.n	8004a88 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d90e      	bls.n	8004a58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a46:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fe f88c 	bl	8002b6e <vListInsert>
 8004a56:	e017      	b.n	8004a88 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	2100      	movs	r1, #0
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff fd74 	bl	8004550 <xTimerGenericCommand>
 8004a68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	603b      	str	r3, [r7, #0]
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a88:	4b09      	ldr	r3, [pc, #36]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1b0      	bne.n	80049f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a92:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a98:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <prvSwitchTimerLists+0xc8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004aa0:	4a04      	ldr	r2, [pc, #16]	@ (8004ab4 <prvSwitchTimerLists+0xc8>)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	6013      	str	r3, [r2, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000348 	.word	0x20000348
 8004ab4:	2000034c 	.word	0x2000034c

08004ab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004abc:	f000 f976 	bl	8004dac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ac0:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <prvCheckForValidListAndQueue+0x54>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11d      	bne.n	8004b04 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ac8:	4811      	ldr	r0, [pc, #68]	@ (8004b10 <prvCheckForValidListAndQueue+0x58>)
 8004aca:	f7fd ffff 	bl	8002acc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ace:	4811      	ldr	r0, [pc, #68]	@ (8004b14 <prvCheckForValidListAndQueue+0x5c>)
 8004ad0:	f7fd fffc 	bl	8002acc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ad4:	4b10      	ldr	r3, [pc, #64]	@ (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8004b10 <prvCheckForValidListAndQueue+0x58>)
 8004ad8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ada:	4b10      	ldr	r3, [pc, #64]	@ (8004b1c <prvCheckForValidListAndQueue+0x64>)
 8004adc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b14 <prvCheckForValidListAndQueue+0x5c>)
 8004ade:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	210c      	movs	r1, #12
 8004ae4:	200a      	movs	r0, #10
 8004ae6:	f7fe f90f 	bl	8002d08 <xQueueGenericCreate>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4a07      	ldr	r2, [pc, #28]	@ (8004b0c <prvCheckForValidListAndQueue+0x54>)
 8004aee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004af0:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <prvCheckForValidListAndQueue+0x54>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004af8:	4b04      	ldr	r3, [pc, #16]	@ (8004b0c <prvCheckForValidListAndQueue+0x54>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4908      	ldr	r1, [pc, #32]	@ (8004b20 <prvCheckForValidListAndQueue+0x68>)
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe fcf2 	bl	80034e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b04:	f000 f984 	bl	8004e10 <vPortExitCritical>
}
 8004b08:	bf00      	nop
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000350 	.word	0x20000350
 8004b10:	20000320 	.word	0x20000320
 8004b14:	20000334 	.word	0x20000334
 8004b18:	20000348 	.word	0x20000348
 8004b1c:	2000034c 	.word	0x2000034c
 8004b20:	08005df4 	.word	0x08005df4

08004b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3b04      	subs	r3, #4
 8004b34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0201 	bic.w	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b04      	subs	r3, #4
 8004b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b54:	4a0c      	ldr	r2, [pc, #48]	@ (8004b88 <pxPortInitialiseStack+0x64>)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b14      	subs	r3, #20
 8004b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b04      	subs	r3, #4
 8004b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f06f 0202 	mvn.w	r2, #2
 8004b72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3b20      	subs	r3, #32
 8004b78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	08004b8d 	.word	0x08004b8d

08004b8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b96:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <prvTaskExitError+0x58>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d00b      	beq.n	8004bb8 <prvTaskExitError+0x2c>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60fb      	str	r3, [r7, #12]
}
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <prvTaskExitError+0x28>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	60bb      	str	r3, [r7, #8]
}
 8004bca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bcc:	bf00      	nop
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0fc      	beq.n	8004bce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	2000000c 	.word	0x2000000c
	...

08004bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bf0:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <pxCurrentTCBConst2>)
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	6808      	ldr	r0, [r1, #0]
 8004bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	f380 8809 	msr	PSP, r0
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8811 	msr	BASEPRI, r0
 8004c0a:	4770      	bx	lr
 8004c0c:	f3af 8000 	nop.w

08004c10 <pxCurrentTCBConst2>:
 8004c10:	20000154 	.word	0x20000154
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop

08004c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c18:	4808      	ldr	r0, [pc, #32]	@ (8004c3c <prvPortStartFirstTask+0x24>)
 8004c1a:	6800      	ldr	r0, [r0, #0]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	f380 8808 	msr	MSP, r0
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8814 	msr	CONTROL, r0
 8004c2a:	b662      	cpsie	i
 8004c2c:	b661      	cpsie	f
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	df00      	svc	0
 8004c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c3a:	bf00      	nop
 8004c3c:	e000ed08 	.word	0xe000ed08

08004c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c46:	4b50      	ldr	r3, [pc, #320]	@ (8004d88 <xPortStartScheduler+0x148>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a50      	ldr	r2, [pc, #320]	@ (8004d8c <xPortStartScheduler+0x14c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10b      	bne.n	8004c68 <xPortStartScheduler+0x28>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	617b      	str	r3, [r7, #20]
}
 8004c62:	bf00      	nop
 8004c64:	bf00      	nop
 8004c66:	e7fd      	b.n	8004c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c68:	4b47      	ldr	r3, [pc, #284]	@ (8004d88 <xPortStartScheduler+0x148>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a48      	ldr	r2, [pc, #288]	@ (8004d90 <xPortStartScheduler+0x150>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10b      	bne.n	8004c8a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	61bb      	str	r3, [r7, #24]
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	e7fd      	b.n	8004c86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c8a:	4b42      	ldr	r3, [pc, #264]	@ (8004d94 <xPortStartScheduler+0x154>)
 8004c8c:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	22ff      	movs	r2, #255	@ 0xff
 8004c9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4b3a      	ldr	r3, [pc, #232]	@ (8004d98 <xPortStartScheduler+0x158>)
 8004cb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8004d9c <xPortStartScheduler+0x15c>)
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cb8:	e009      	b.n	8004cce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004cba:	4b38      	ldr	r3, [pc, #224]	@ (8004d9c <xPortStartScheduler+0x15c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	4a36      	ldr	r2, [pc, #216]	@ (8004d9c <xPortStartScheduler+0x15c>)
 8004cc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd6:	2b80      	cmp	r3, #128	@ 0x80
 8004cd8:	d0ef      	beq.n	8004cba <xPortStartScheduler+0x7a>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004cda:	4b30      	ldr	r3, [pc, #192]	@ (8004d9c <xPortStartScheduler+0x15c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f1c3 0307 	rsb	r3, r3, #7
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d00b      	beq.n	8004cfe <xPortStartScheduler+0xbe>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	613b      	str	r3, [r7, #16]
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	e7fd      	b.n	8004cfa <xPortStartScheduler+0xba>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cfe:	4b27      	ldr	r3, [pc, #156]	@ (8004d9c <xPortStartScheduler+0x15c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f1c3 0307 	rsb	r3, r3, #7
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d00b      	beq.n	8004d22 <xPortStartScheduler+0xe2>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	60fb      	str	r3, [r7, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	e7fd      	b.n	8004d1e <xPortStartScheduler+0xde>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d22:	4b1e      	ldr	r3, [pc, #120]	@ (8004d9c <xPortStartScheduler+0x15c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	4a1c      	ldr	r2, [pc, #112]	@ (8004d9c <xPortStartScheduler+0x15c>)
 8004d2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d9c <xPortStartScheduler+0x15c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d34:	4a19      	ldr	r2, [pc, #100]	@ (8004d9c <xPortStartScheduler+0x15c>)
 8004d36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d40:	4b17      	ldr	r3, [pc, #92]	@ (8004da0 <xPortStartScheduler+0x160>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a16      	ldr	r2, [pc, #88]	@ (8004da0 <xPortStartScheduler+0x160>)
 8004d46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d4c:	4b14      	ldr	r3, [pc, #80]	@ (8004da0 <xPortStartScheduler+0x160>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a13      	ldr	r2, [pc, #76]	@ (8004da0 <xPortStartScheduler+0x160>)
 8004d52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d58:	f000 f8e0 	bl	8004f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d5c:	4b11      	ldr	r3, [pc, #68]	@ (8004da4 <xPortStartScheduler+0x164>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d62:	f000 f8ff 	bl	8004f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d66:	4b10      	ldr	r3, [pc, #64]	@ (8004da8 <xPortStartScheduler+0x168>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8004da8 <xPortStartScheduler+0x168>)
 8004d6c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d72:	f7ff ff51 	bl	8004c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d76:	f7fe ff4f 	bl	8003c18 <vTaskSwitchContext>
	prvTaskExitError();
 8004d7a:	f7ff ff07 	bl	8004b8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	e000ed00 	.word	0xe000ed00
 8004d8c:	410fc271 	.word	0x410fc271
 8004d90:	410fc270 	.word	0x410fc270
 8004d94:	e000e400 	.word	0xe000e400
 8004d98:	2000035c 	.word	0x2000035c
 8004d9c:	20000360 	.word	0x20000360
 8004da0:	e000ed20 	.word	0xe000ed20
 8004da4:	2000000c 	.word	0x2000000c
 8004da8:	e000ef34 	.word	0xe000ef34

08004dac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	607b      	str	r3, [r7, #4]
}
 8004dc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <vPortEnterCritical+0x5c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8004e08 <vPortEnterCritical+0x5c>)
 8004dce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <vPortEnterCritical+0x5c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d110      	bne.n	8004dfa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e0c <vPortEnterCritical+0x60>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <vPortEnterCritical+0x4e>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	603b      	str	r3, [r7, #0]
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	e7fd      	b.n	8004df6 <vPortEnterCritical+0x4a>
	}
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	2000000c 	.word	0x2000000c
 8004e0c:	e000ed04 	.word	0xe000ed04

08004e10 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e16:	4b12      	ldr	r3, [pc, #72]	@ (8004e60 <vPortExitCritical+0x50>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10b      	bne.n	8004e36 <vPortExitCritical+0x26>
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	607b      	str	r3, [r7, #4]
}
 8004e30:	bf00      	nop
 8004e32:	bf00      	nop
 8004e34:	e7fd      	b.n	8004e32 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e36:	4b0a      	ldr	r3, [pc, #40]	@ (8004e60 <vPortExitCritical+0x50>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	4a08      	ldr	r2, [pc, #32]	@ (8004e60 <vPortExitCritical+0x50>)
 8004e3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e40:	4b07      	ldr	r3, [pc, #28]	@ (8004e60 <vPortExitCritical+0x50>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <vPortExitCritical+0x44>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f383 8811 	msr	BASEPRI, r3
}
 8004e52:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	2000000c 	.word	0x2000000c
	...

08004e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e70:	f3ef 8009 	mrs	r0, PSP
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4b15      	ldr	r3, [pc, #84]	@ (8004ed0 <pxCurrentTCBConst>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	f01e 0f10 	tst.w	lr, #16
 8004e80:	bf08      	it	eq
 8004e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e94:	f380 8811 	msr	BASEPRI, r0
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f7fe feba 	bl	8003c18 <vTaskSwitchContext>
 8004ea4:	f04f 0000 	mov.w	r0, #0
 8004ea8:	f380 8811 	msr	BASEPRI, r0
 8004eac:	bc09      	pop	{r0, r3}
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	6808      	ldr	r0, [r1, #0]
 8004eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb6:	f01e 0f10 	tst.w	lr, #16
 8004eba:	bf08      	it	eq
 8004ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ec0:	f380 8809 	msr	PSP, r0
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst>:
 8004ed0:	20000154 	.word	0x20000154
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
}
 8004ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ef2:	f7fe fdd7 	bl	8003aa4 <xTaskIncrementTick>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004efc:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <SysTick_Handler+0x40>)
 8004efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f383 8811 	msr	BASEPRI, r3
}
 8004f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <vPortSetupTimerInterrupt+0x34>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f26:	4b0b      	ldr	r3, [pc, #44]	@ (8004f54 <vPortSetupTimerInterrupt+0x38>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f58 <vPortSetupTimerInterrupt+0x3c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0a      	ldr	r2, [pc, #40]	@ (8004f5c <vPortSetupTimerInterrupt+0x40>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	4a09      	ldr	r2, [pc, #36]	@ (8004f60 <vPortSetupTimerInterrupt+0x44>)
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f3e:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <vPortSetupTimerInterrupt+0x34>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010
 8004f54:	e000e018 	.word	0xe000e018
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	10624dd3 	.word	0x10624dd3
 8004f60:	e000e014 	.word	0xe000e014

08004f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f74 <vPortEnableVFP+0x10>
 8004f68:	6801      	ldr	r1, [r0, #0]
 8004f6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f6e:	6001      	str	r1, [r0, #0]
 8004f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f72:	bf00      	nop
 8004f74:	e000ed88 	.word	0xe000ed88

08004f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f7e:	f3ef 8305 	mrs	r3, IPSR
 8004f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d915      	bls.n	8004fb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f8a:	4a18      	ldr	r2, [pc, #96]	@ (8004fec <vPortValidateInterruptPriority+0x74>)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f94:	4b16      	ldr	r3, [pc, #88]	@ (8004ff0 <vPortValidateInterruptPriority+0x78>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	7afa      	ldrb	r2, [r7, #11]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d20b      	bcs.n	8004fb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	607b      	str	r3, [r7, #4]
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff4 <vPortValidateInterruptPriority+0x7c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff8 <vPortValidateInterruptPriority+0x80>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d90b      	bls.n	8004fde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	603b      	str	r3, [r7, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	e7fd      	b.n	8004fda <vPortValidateInterruptPriority+0x62>
	}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	e000e3f0 	.word	0xe000e3f0
 8004ff0:	2000035c 	.word	0x2000035c
 8004ff4:	e000ed0c 	.word	0xe000ed0c
 8004ff8:	20000360 	.word	0x20000360

08004ffc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	@ 0x28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005004:	2300      	movs	r3, #0
 8005006:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005008:	f7fe fc90 	bl	800392c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800500c:	4b5a      	ldr	r3, [pc, #360]	@ (8005178 <pvPortMalloc+0x17c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005014:	f000 f916 	bl	8005244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005018:	4b58      	ldr	r3, [pc, #352]	@ (800517c <pvPortMalloc+0x180>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	f040 8090 	bne.w	8005146 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01e      	beq.n	800506a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800502c:	2208      	movs	r2, #8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	2b00      	cmp	r3, #0
 800503c:	d015      	beq.n	800506a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f023 0307 	bic.w	r3, r3, #7
 8005044:	3308      	adds	r3, #8
 8005046:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <pvPortMalloc+0x6e>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	617b      	str	r3, [r7, #20]
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	e7fd      	b.n	8005066 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d06a      	beq.n	8005146 <pvPortMalloc+0x14a>
 8005070:	4b43      	ldr	r3, [pc, #268]	@ (8005180 <pvPortMalloc+0x184>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d865      	bhi.n	8005146 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800507a:	4b42      	ldr	r3, [pc, #264]	@ (8005184 <pvPortMalloc+0x188>)
 800507c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800507e:	4b41      	ldr	r3, [pc, #260]	@ (8005184 <pvPortMalloc+0x188>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005084:	e004      	b.n	8005090 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d903      	bls.n	80050a2 <pvPortMalloc+0xa6>
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f1      	bne.n	8005086 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050a2:	4b35      	ldr	r3, [pc, #212]	@ (8005178 <pvPortMalloc+0x17c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d04c      	beq.n	8005146 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2208      	movs	r2, #8
 80050b2:	4413      	add	r3, r2
 80050b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	1ad2      	subs	r2, r2, r3
 80050c6:	2308      	movs	r3, #8
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d920      	bls.n	8005110 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <pvPortMalloc+0xfc>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	613b      	str	r3, [r7, #16]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800510a:	69b8      	ldr	r0, [r7, #24]
 800510c:	f000 f8fc 	bl	8005308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005110:	4b1b      	ldr	r3, [pc, #108]	@ (8005180 <pvPortMalloc+0x184>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	4a19      	ldr	r2, [pc, #100]	@ (8005180 <pvPortMalloc+0x184>)
 800511c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800511e:	4b18      	ldr	r3, [pc, #96]	@ (8005180 <pvPortMalloc+0x184>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b19      	ldr	r3, [pc, #100]	@ (8005188 <pvPortMalloc+0x18c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d203      	bcs.n	8005132 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800512a:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <pvPortMalloc+0x184>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a16      	ldr	r2, [pc, #88]	@ (8005188 <pvPortMalloc+0x18c>)
 8005130:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	4b11      	ldr	r3, [pc, #68]	@ (800517c <pvPortMalloc+0x180>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	431a      	orrs	r2, r3
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005146:	f7fe fbff 	bl	8003948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00b      	beq.n	800516c <pvPortMalloc+0x170>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	60fb      	str	r3, [r7, #12]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <pvPortMalloc+0x16c>
	return pvReturn;
 800516c:	69fb      	ldr	r3, [r7, #28]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3728      	adds	r7, #40	@ 0x28
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20012f6c 	.word	0x20012f6c
 800517c:	20012f78 	.word	0x20012f78
 8005180:	20012f70 	.word	0x20012f70
 8005184:	20012f64 	.word	0x20012f64
 8005188:	20012f74 	.word	0x20012f74

0800518c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d04a      	beq.n	8005234 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800519e:	2308      	movs	r3, #8
 80051a0:	425b      	negs	r3, r3
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	4b22      	ldr	r3, [pc, #136]	@ (800523c <vPortFree+0xb0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <vPortFree+0x46>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	60fb      	str	r3, [r7, #12]
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	e7fd      	b.n	80051ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <vPortFree+0x66>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	60bb      	str	r3, [r7, #8]
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	e7fd      	b.n	80051ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b11      	ldr	r3, [pc, #68]	@ (800523c <vPortFree+0xb0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d019      	beq.n	8005234 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d115      	bne.n	8005234 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <vPortFree+0xb0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005218:	f7fe fb88 	bl	800392c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	4b07      	ldr	r3, [pc, #28]	@ (8005240 <vPortFree+0xb4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4413      	add	r3, r2
 8005226:	4a06      	ldr	r2, [pc, #24]	@ (8005240 <vPortFree+0xb4>)
 8005228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800522a:	6938      	ldr	r0, [r7, #16]
 800522c:	f000 f86c 	bl	8005308 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005230:	f7fe fb8a 	bl	8003948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005234:	bf00      	nop
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20012f78 	.word	0x20012f78
 8005240:	20012f70 	.word	0x20012f70

08005244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800524a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800524e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005250:	4b27      	ldr	r3, [pc, #156]	@ (80052f0 <prvHeapInit+0xac>)
 8005252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3307      	adds	r3, #7
 8005262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0307 	bic.w	r3, r3, #7
 800526a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	4a1f      	ldr	r2, [pc, #124]	@ (80052f0 <prvHeapInit+0xac>)
 8005274:	4413      	add	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800527c:	4a1d      	ldr	r2, [pc, #116]	@ (80052f4 <prvHeapInit+0xb0>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005282:	4b1c      	ldr	r3, [pc, #112]	@ (80052f4 <prvHeapInit+0xb0>)
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005290:	2208      	movs	r2, #8
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0307 	bic.w	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a15      	ldr	r2, [pc, #84]	@ (80052f8 <prvHeapInit+0xb4>)
 80052a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052a6:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <prvHeapInit+0xb4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2200      	movs	r2, #0
 80052ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ae:	4b12      	ldr	r3, [pc, #72]	@ (80052f8 <prvHeapInit+0xb4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052c4:	4b0c      	ldr	r3, [pc, #48]	@ (80052f8 <prvHeapInit+0xb4>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4a0a      	ldr	r2, [pc, #40]	@ (80052fc <prvHeapInit+0xb8>)
 80052d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4a09      	ldr	r2, [pc, #36]	@ (8005300 <prvHeapInit+0xbc>)
 80052da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052dc:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <prvHeapInit+0xc0>)
 80052de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80052e2:	601a      	str	r2, [r3, #0]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20000364 	.word	0x20000364
 80052f4:	20012f64 	.word	0x20012f64
 80052f8:	20012f6c 	.word	0x20012f6c
 80052fc:	20012f74 	.word	0x20012f74
 8005300:	20012f70 	.word	0x20012f70
 8005304:	20012f78 	.word	0x20012f78

08005308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005310:	4b28      	ldr	r3, [pc, #160]	@ (80053b4 <prvInsertBlockIntoFreeList+0xac>)
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e002      	b.n	800531c <prvInsertBlockIntoFreeList+0x14>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d8f7      	bhi.n	8005316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4413      	add	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	d108      	bne.n	800534a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	441a      	add	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d118      	bne.n	8005390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b15      	ldr	r3, [pc, #84]	@ (80053b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d00d      	beq.n	8005386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e008      	b.n	8005398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005386:	4b0c      	ldr	r3, [pc, #48]	@ (80053b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	e003      	b.n	8005398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d002      	beq.n	80053a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20012f64 	.word	0x20012f64
 80053b8:	20012f6c 	.word	0x20012f6c

080053bc <siprintf>:
 80053bc:	b40e      	push	{r1, r2, r3}
 80053be:	b510      	push	{r4, lr}
 80053c0:	b09d      	sub	sp, #116	@ 0x74
 80053c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80053c4:	9002      	str	r0, [sp, #8]
 80053c6:	9006      	str	r0, [sp, #24]
 80053c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053cc:	480a      	ldr	r0, [pc, #40]	@ (80053f8 <siprintf+0x3c>)
 80053ce:	9107      	str	r1, [sp, #28]
 80053d0:	9104      	str	r1, [sp, #16]
 80053d2:	490a      	ldr	r1, [pc, #40]	@ (80053fc <siprintf+0x40>)
 80053d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053d8:	9105      	str	r1, [sp, #20]
 80053da:	2400      	movs	r4, #0
 80053dc:	a902      	add	r1, sp, #8
 80053de:	6800      	ldr	r0, [r0, #0]
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80053e4:	f000 f9a2 	bl	800572c <_svfiprintf_r>
 80053e8:	9b02      	ldr	r3, [sp, #8]
 80053ea:	701c      	strb	r4, [r3, #0]
 80053ec:	b01d      	add	sp, #116	@ 0x74
 80053ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f2:	b003      	add	sp, #12
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000010 	.word	0x20000010
 80053fc:	ffff0208 	.word	0xffff0208

08005400 <memset>:
 8005400:	4402      	add	r2, r0
 8005402:	4603      	mov	r3, r0
 8005404:	4293      	cmp	r3, r2
 8005406:	d100      	bne.n	800540a <memset+0xa>
 8005408:	4770      	bx	lr
 800540a:	f803 1b01 	strb.w	r1, [r3], #1
 800540e:	e7f9      	b.n	8005404 <memset+0x4>

08005410 <__errno>:
 8005410:	4b01      	ldr	r3, [pc, #4]	@ (8005418 <__errno+0x8>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000010 	.word	0x20000010

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4d0d      	ldr	r5, [pc, #52]	@ (8005454 <__libc_init_array+0x38>)
 8005420:	4c0d      	ldr	r4, [pc, #52]	@ (8005458 <__libc_init_array+0x3c>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	2600      	movs	r6, #0
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	4d0b      	ldr	r5, [pc, #44]	@ (800545c <__libc_init_array+0x40>)
 800542e:	4c0c      	ldr	r4, [pc, #48]	@ (8005460 <__libc_init_array+0x44>)
 8005430:	f000 fc64 	bl	8005cfc <_init>
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	2600      	movs	r6, #0
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f855 3b04 	ldr.w	r3, [r5], #4
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	f855 3b04 	ldr.w	r3, [r5], #4
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	08005e50 	.word	0x08005e50
 8005458:	08005e50 	.word	0x08005e50
 800545c:	08005e50 	.word	0x08005e50
 8005460:	08005e54 	.word	0x08005e54

08005464 <__retarget_lock_acquire_recursive>:
 8005464:	4770      	bx	lr

08005466 <__retarget_lock_release_recursive>:
 8005466:	4770      	bx	lr

08005468 <memcpy>:
 8005468:	440a      	add	r2, r1
 800546a:	4291      	cmp	r1, r2
 800546c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005470:	d100      	bne.n	8005474 <memcpy+0xc>
 8005472:	4770      	bx	lr
 8005474:	b510      	push	{r4, lr}
 8005476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800547a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800547e:	4291      	cmp	r1, r2
 8005480:	d1f9      	bne.n	8005476 <memcpy+0xe>
 8005482:	bd10      	pop	{r4, pc}

08005484 <_free_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4605      	mov	r5, r0
 8005488:	2900      	cmp	r1, #0
 800548a:	d041      	beq.n	8005510 <_free_r+0x8c>
 800548c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005490:	1f0c      	subs	r4, r1, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	bfb8      	it	lt
 8005496:	18e4      	addlt	r4, r4, r3
 8005498:	f000 f8e0 	bl	800565c <__malloc_lock>
 800549c:	4a1d      	ldr	r2, [pc, #116]	@ (8005514 <_free_r+0x90>)
 800549e:	6813      	ldr	r3, [r2, #0]
 80054a0:	b933      	cbnz	r3, 80054b0 <_free_r+0x2c>
 80054a2:	6063      	str	r3, [r4, #4]
 80054a4:	6014      	str	r4, [r2, #0]
 80054a6:	4628      	mov	r0, r5
 80054a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054ac:	f000 b8dc 	b.w	8005668 <__malloc_unlock>
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	d908      	bls.n	80054c6 <_free_r+0x42>
 80054b4:	6820      	ldr	r0, [r4, #0]
 80054b6:	1821      	adds	r1, r4, r0
 80054b8:	428b      	cmp	r3, r1
 80054ba:	bf01      	itttt	eq
 80054bc:	6819      	ldreq	r1, [r3, #0]
 80054be:	685b      	ldreq	r3, [r3, #4]
 80054c0:	1809      	addeq	r1, r1, r0
 80054c2:	6021      	streq	r1, [r4, #0]
 80054c4:	e7ed      	b.n	80054a2 <_free_r+0x1e>
 80054c6:	461a      	mov	r2, r3
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	b10b      	cbz	r3, 80054d0 <_free_r+0x4c>
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d9fa      	bls.n	80054c6 <_free_r+0x42>
 80054d0:	6811      	ldr	r1, [r2, #0]
 80054d2:	1850      	adds	r0, r2, r1
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d10b      	bne.n	80054f0 <_free_r+0x6c>
 80054d8:	6820      	ldr	r0, [r4, #0]
 80054da:	4401      	add	r1, r0
 80054dc:	1850      	adds	r0, r2, r1
 80054de:	4283      	cmp	r3, r0
 80054e0:	6011      	str	r1, [r2, #0]
 80054e2:	d1e0      	bne.n	80054a6 <_free_r+0x22>
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	6053      	str	r3, [r2, #4]
 80054ea:	4408      	add	r0, r1
 80054ec:	6010      	str	r0, [r2, #0]
 80054ee:	e7da      	b.n	80054a6 <_free_r+0x22>
 80054f0:	d902      	bls.n	80054f8 <_free_r+0x74>
 80054f2:	230c      	movs	r3, #12
 80054f4:	602b      	str	r3, [r5, #0]
 80054f6:	e7d6      	b.n	80054a6 <_free_r+0x22>
 80054f8:	6820      	ldr	r0, [r4, #0]
 80054fa:	1821      	adds	r1, r4, r0
 80054fc:	428b      	cmp	r3, r1
 80054fe:	bf04      	itt	eq
 8005500:	6819      	ldreq	r1, [r3, #0]
 8005502:	685b      	ldreq	r3, [r3, #4]
 8005504:	6063      	str	r3, [r4, #4]
 8005506:	bf04      	itt	eq
 8005508:	1809      	addeq	r1, r1, r0
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	6054      	str	r4, [r2, #4]
 800550e:	e7ca      	b.n	80054a6 <_free_r+0x22>
 8005510:	bd38      	pop	{r3, r4, r5, pc}
 8005512:	bf00      	nop
 8005514:	200130c0 	.word	0x200130c0

08005518 <sbrk_aligned>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4e0f      	ldr	r6, [pc, #60]	@ (8005558 <sbrk_aligned+0x40>)
 800551c:	460c      	mov	r4, r1
 800551e:	6831      	ldr	r1, [r6, #0]
 8005520:	4605      	mov	r5, r0
 8005522:	b911      	cbnz	r1, 800552a <sbrk_aligned+0x12>
 8005524:	f000 fba4 	bl	8005c70 <_sbrk_r>
 8005528:	6030      	str	r0, [r6, #0]
 800552a:	4621      	mov	r1, r4
 800552c:	4628      	mov	r0, r5
 800552e:	f000 fb9f 	bl	8005c70 <_sbrk_r>
 8005532:	1c43      	adds	r3, r0, #1
 8005534:	d103      	bne.n	800553e <sbrk_aligned+0x26>
 8005536:	f04f 34ff 	mov.w	r4, #4294967295
 800553a:	4620      	mov	r0, r4
 800553c:	bd70      	pop	{r4, r5, r6, pc}
 800553e:	1cc4      	adds	r4, r0, #3
 8005540:	f024 0403 	bic.w	r4, r4, #3
 8005544:	42a0      	cmp	r0, r4
 8005546:	d0f8      	beq.n	800553a <sbrk_aligned+0x22>
 8005548:	1a21      	subs	r1, r4, r0
 800554a:	4628      	mov	r0, r5
 800554c:	f000 fb90 	bl	8005c70 <_sbrk_r>
 8005550:	3001      	adds	r0, #1
 8005552:	d1f2      	bne.n	800553a <sbrk_aligned+0x22>
 8005554:	e7ef      	b.n	8005536 <sbrk_aligned+0x1e>
 8005556:	bf00      	nop
 8005558:	200130bc 	.word	0x200130bc

0800555c <_malloc_r>:
 800555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005560:	1ccd      	adds	r5, r1, #3
 8005562:	f025 0503 	bic.w	r5, r5, #3
 8005566:	3508      	adds	r5, #8
 8005568:	2d0c      	cmp	r5, #12
 800556a:	bf38      	it	cc
 800556c:	250c      	movcc	r5, #12
 800556e:	2d00      	cmp	r5, #0
 8005570:	4606      	mov	r6, r0
 8005572:	db01      	blt.n	8005578 <_malloc_r+0x1c>
 8005574:	42a9      	cmp	r1, r5
 8005576:	d904      	bls.n	8005582 <_malloc_r+0x26>
 8005578:	230c      	movs	r3, #12
 800557a:	6033      	str	r3, [r6, #0]
 800557c:	2000      	movs	r0, #0
 800557e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005582:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005658 <_malloc_r+0xfc>
 8005586:	f000 f869 	bl	800565c <__malloc_lock>
 800558a:	f8d8 3000 	ldr.w	r3, [r8]
 800558e:	461c      	mov	r4, r3
 8005590:	bb44      	cbnz	r4, 80055e4 <_malloc_r+0x88>
 8005592:	4629      	mov	r1, r5
 8005594:	4630      	mov	r0, r6
 8005596:	f7ff ffbf 	bl	8005518 <sbrk_aligned>
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	4604      	mov	r4, r0
 800559e:	d158      	bne.n	8005652 <_malloc_r+0xf6>
 80055a0:	f8d8 4000 	ldr.w	r4, [r8]
 80055a4:	4627      	mov	r7, r4
 80055a6:	2f00      	cmp	r7, #0
 80055a8:	d143      	bne.n	8005632 <_malloc_r+0xd6>
 80055aa:	2c00      	cmp	r4, #0
 80055ac:	d04b      	beq.n	8005646 <_malloc_r+0xea>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	4639      	mov	r1, r7
 80055b2:	4630      	mov	r0, r6
 80055b4:	eb04 0903 	add.w	r9, r4, r3
 80055b8:	f000 fb5a 	bl	8005c70 <_sbrk_r>
 80055bc:	4581      	cmp	r9, r0
 80055be:	d142      	bne.n	8005646 <_malloc_r+0xea>
 80055c0:	6821      	ldr	r1, [r4, #0]
 80055c2:	1a6d      	subs	r5, r5, r1
 80055c4:	4629      	mov	r1, r5
 80055c6:	4630      	mov	r0, r6
 80055c8:	f7ff ffa6 	bl	8005518 <sbrk_aligned>
 80055cc:	3001      	adds	r0, #1
 80055ce:	d03a      	beq.n	8005646 <_malloc_r+0xea>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	442b      	add	r3, r5
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	f8d8 3000 	ldr.w	r3, [r8]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	bb62      	cbnz	r2, 8005638 <_malloc_r+0xdc>
 80055de:	f8c8 7000 	str.w	r7, [r8]
 80055e2:	e00f      	b.n	8005604 <_malloc_r+0xa8>
 80055e4:	6822      	ldr	r2, [r4, #0]
 80055e6:	1b52      	subs	r2, r2, r5
 80055e8:	d420      	bmi.n	800562c <_malloc_r+0xd0>
 80055ea:	2a0b      	cmp	r2, #11
 80055ec:	d917      	bls.n	800561e <_malloc_r+0xc2>
 80055ee:	1961      	adds	r1, r4, r5
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	6025      	str	r5, [r4, #0]
 80055f4:	bf18      	it	ne
 80055f6:	6059      	strne	r1, [r3, #4]
 80055f8:	6863      	ldr	r3, [r4, #4]
 80055fa:	bf08      	it	eq
 80055fc:	f8c8 1000 	streq.w	r1, [r8]
 8005600:	5162      	str	r2, [r4, r5]
 8005602:	604b      	str	r3, [r1, #4]
 8005604:	4630      	mov	r0, r6
 8005606:	f000 f82f 	bl	8005668 <__malloc_unlock>
 800560a:	f104 000b 	add.w	r0, r4, #11
 800560e:	1d23      	adds	r3, r4, #4
 8005610:	f020 0007 	bic.w	r0, r0, #7
 8005614:	1ac2      	subs	r2, r0, r3
 8005616:	bf1c      	itt	ne
 8005618:	1a1b      	subne	r3, r3, r0
 800561a:	50a3      	strne	r3, [r4, r2]
 800561c:	e7af      	b.n	800557e <_malloc_r+0x22>
 800561e:	6862      	ldr	r2, [r4, #4]
 8005620:	42a3      	cmp	r3, r4
 8005622:	bf0c      	ite	eq
 8005624:	f8c8 2000 	streq.w	r2, [r8]
 8005628:	605a      	strne	r2, [r3, #4]
 800562a:	e7eb      	b.n	8005604 <_malloc_r+0xa8>
 800562c:	4623      	mov	r3, r4
 800562e:	6864      	ldr	r4, [r4, #4]
 8005630:	e7ae      	b.n	8005590 <_malloc_r+0x34>
 8005632:	463c      	mov	r4, r7
 8005634:	687f      	ldr	r7, [r7, #4]
 8005636:	e7b6      	b.n	80055a6 <_malloc_r+0x4a>
 8005638:	461a      	mov	r2, r3
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	42a3      	cmp	r3, r4
 800563e:	d1fb      	bne.n	8005638 <_malloc_r+0xdc>
 8005640:	2300      	movs	r3, #0
 8005642:	6053      	str	r3, [r2, #4]
 8005644:	e7de      	b.n	8005604 <_malloc_r+0xa8>
 8005646:	230c      	movs	r3, #12
 8005648:	6033      	str	r3, [r6, #0]
 800564a:	4630      	mov	r0, r6
 800564c:	f000 f80c 	bl	8005668 <__malloc_unlock>
 8005650:	e794      	b.n	800557c <_malloc_r+0x20>
 8005652:	6005      	str	r5, [r0, #0]
 8005654:	e7d6      	b.n	8005604 <_malloc_r+0xa8>
 8005656:	bf00      	nop
 8005658:	200130c0 	.word	0x200130c0

0800565c <__malloc_lock>:
 800565c:	4801      	ldr	r0, [pc, #4]	@ (8005664 <__malloc_lock+0x8>)
 800565e:	f7ff bf01 	b.w	8005464 <__retarget_lock_acquire_recursive>
 8005662:	bf00      	nop
 8005664:	200130b8 	.word	0x200130b8

08005668 <__malloc_unlock>:
 8005668:	4801      	ldr	r0, [pc, #4]	@ (8005670 <__malloc_unlock+0x8>)
 800566a:	f7ff befc 	b.w	8005466 <__retarget_lock_release_recursive>
 800566e:	bf00      	nop
 8005670:	200130b8 	.word	0x200130b8

08005674 <__ssputs_r>:
 8005674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005678:	688e      	ldr	r6, [r1, #8]
 800567a:	461f      	mov	r7, r3
 800567c:	42be      	cmp	r6, r7
 800567e:	680b      	ldr	r3, [r1, #0]
 8005680:	4682      	mov	sl, r0
 8005682:	460c      	mov	r4, r1
 8005684:	4690      	mov	r8, r2
 8005686:	d82d      	bhi.n	80056e4 <__ssputs_r+0x70>
 8005688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800568c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005690:	d026      	beq.n	80056e0 <__ssputs_r+0x6c>
 8005692:	6965      	ldr	r5, [r4, #20]
 8005694:	6909      	ldr	r1, [r1, #16]
 8005696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800569a:	eba3 0901 	sub.w	r9, r3, r1
 800569e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056a2:	1c7b      	adds	r3, r7, #1
 80056a4:	444b      	add	r3, r9
 80056a6:	106d      	asrs	r5, r5, #1
 80056a8:	429d      	cmp	r5, r3
 80056aa:	bf38      	it	cc
 80056ac:	461d      	movcc	r5, r3
 80056ae:	0553      	lsls	r3, r2, #21
 80056b0:	d527      	bpl.n	8005702 <__ssputs_r+0x8e>
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7ff ff52 	bl	800555c <_malloc_r>
 80056b8:	4606      	mov	r6, r0
 80056ba:	b360      	cbz	r0, 8005716 <__ssputs_r+0xa2>
 80056bc:	6921      	ldr	r1, [r4, #16]
 80056be:	464a      	mov	r2, r9
 80056c0:	f7ff fed2 	bl	8005468 <memcpy>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	6126      	str	r6, [r4, #16]
 80056d2:	6165      	str	r5, [r4, #20]
 80056d4:	444e      	add	r6, r9
 80056d6:	eba5 0509 	sub.w	r5, r5, r9
 80056da:	6026      	str	r6, [r4, #0]
 80056dc:	60a5      	str	r5, [r4, #8]
 80056de:	463e      	mov	r6, r7
 80056e0:	42be      	cmp	r6, r7
 80056e2:	d900      	bls.n	80056e6 <__ssputs_r+0x72>
 80056e4:	463e      	mov	r6, r7
 80056e6:	6820      	ldr	r0, [r4, #0]
 80056e8:	4632      	mov	r2, r6
 80056ea:	4641      	mov	r1, r8
 80056ec:	f000 faa6 	bl	8005c3c <memmove>
 80056f0:	68a3      	ldr	r3, [r4, #8]
 80056f2:	1b9b      	subs	r3, r3, r6
 80056f4:	60a3      	str	r3, [r4, #8]
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	4433      	add	r3, r6
 80056fa:	6023      	str	r3, [r4, #0]
 80056fc:	2000      	movs	r0, #0
 80056fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005702:	462a      	mov	r2, r5
 8005704:	f000 fac4 	bl	8005c90 <_realloc_r>
 8005708:	4606      	mov	r6, r0
 800570a:	2800      	cmp	r0, #0
 800570c:	d1e0      	bne.n	80056d0 <__ssputs_r+0x5c>
 800570e:	6921      	ldr	r1, [r4, #16]
 8005710:	4650      	mov	r0, sl
 8005712:	f7ff feb7 	bl	8005484 <_free_r>
 8005716:	230c      	movs	r3, #12
 8005718:	f8ca 3000 	str.w	r3, [sl]
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	e7e9      	b.n	80056fe <__ssputs_r+0x8a>
	...

0800572c <_svfiprintf_r>:
 800572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005730:	4698      	mov	r8, r3
 8005732:	898b      	ldrh	r3, [r1, #12]
 8005734:	061b      	lsls	r3, r3, #24
 8005736:	b09d      	sub	sp, #116	@ 0x74
 8005738:	4607      	mov	r7, r0
 800573a:	460d      	mov	r5, r1
 800573c:	4614      	mov	r4, r2
 800573e:	d510      	bpl.n	8005762 <_svfiprintf_r+0x36>
 8005740:	690b      	ldr	r3, [r1, #16]
 8005742:	b973      	cbnz	r3, 8005762 <_svfiprintf_r+0x36>
 8005744:	2140      	movs	r1, #64	@ 0x40
 8005746:	f7ff ff09 	bl	800555c <_malloc_r>
 800574a:	6028      	str	r0, [r5, #0]
 800574c:	6128      	str	r0, [r5, #16]
 800574e:	b930      	cbnz	r0, 800575e <_svfiprintf_r+0x32>
 8005750:	230c      	movs	r3, #12
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	b01d      	add	sp, #116	@ 0x74
 800575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575e:	2340      	movs	r3, #64	@ 0x40
 8005760:	616b      	str	r3, [r5, #20]
 8005762:	2300      	movs	r3, #0
 8005764:	9309      	str	r3, [sp, #36]	@ 0x24
 8005766:	2320      	movs	r3, #32
 8005768:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800576c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005770:	2330      	movs	r3, #48	@ 0x30
 8005772:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005910 <_svfiprintf_r+0x1e4>
 8005776:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800577a:	f04f 0901 	mov.w	r9, #1
 800577e:	4623      	mov	r3, r4
 8005780:	469a      	mov	sl, r3
 8005782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005786:	b10a      	cbz	r2, 800578c <_svfiprintf_r+0x60>
 8005788:	2a25      	cmp	r2, #37	@ 0x25
 800578a:	d1f9      	bne.n	8005780 <_svfiprintf_r+0x54>
 800578c:	ebba 0b04 	subs.w	fp, sl, r4
 8005790:	d00b      	beq.n	80057aa <_svfiprintf_r+0x7e>
 8005792:	465b      	mov	r3, fp
 8005794:	4622      	mov	r2, r4
 8005796:	4629      	mov	r1, r5
 8005798:	4638      	mov	r0, r7
 800579a:	f7ff ff6b 	bl	8005674 <__ssputs_r>
 800579e:	3001      	adds	r0, #1
 80057a0:	f000 80a7 	beq.w	80058f2 <_svfiprintf_r+0x1c6>
 80057a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057a6:	445a      	add	r2, fp
 80057a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80057aa:	f89a 3000 	ldrb.w	r3, [sl]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 809f 	beq.w	80058f2 <_svfiprintf_r+0x1c6>
 80057b4:	2300      	movs	r3, #0
 80057b6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057be:	f10a 0a01 	add.w	sl, sl, #1
 80057c2:	9304      	str	r3, [sp, #16]
 80057c4:	9307      	str	r3, [sp, #28]
 80057c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80057cc:	4654      	mov	r4, sl
 80057ce:	2205      	movs	r2, #5
 80057d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d4:	484e      	ldr	r0, [pc, #312]	@ (8005910 <_svfiprintf_r+0x1e4>)
 80057d6:	f7fa fd03 	bl	80001e0 <memchr>
 80057da:	9a04      	ldr	r2, [sp, #16]
 80057dc:	b9d8      	cbnz	r0, 8005816 <_svfiprintf_r+0xea>
 80057de:	06d0      	lsls	r0, r2, #27
 80057e0:	bf44      	itt	mi
 80057e2:	2320      	movmi	r3, #32
 80057e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057e8:	0711      	lsls	r1, r2, #28
 80057ea:	bf44      	itt	mi
 80057ec:	232b      	movmi	r3, #43	@ 0x2b
 80057ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057f2:	f89a 3000 	ldrb.w	r3, [sl]
 80057f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80057f8:	d015      	beq.n	8005826 <_svfiprintf_r+0xfa>
 80057fa:	9a07      	ldr	r2, [sp, #28]
 80057fc:	4654      	mov	r4, sl
 80057fe:	2000      	movs	r0, #0
 8005800:	f04f 0c0a 	mov.w	ip, #10
 8005804:	4621      	mov	r1, r4
 8005806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800580a:	3b30      	subs	r3, #48	@ 0x30
 800580c:	2b09      	cmp	r3, #9
 800580e:	d94b      	bls.n	80058a8 <_svfiprintf_r+0x17c>
 8005810:	b1b0      	cbz	r0, 8005840 <_svfiprintf_r+0x114>
 8005812:	9207      	str	r2, [sp, #28]
 8005814:	e014      	b.n	8005840 <_svfiprintf_r+0x114>
 8005816:	eba0 0308 	sub.w	r3, r0, r8
 800581a:	fa09 f303 	lsl.w	r3, r9, r3
 800581e:	4313      	orrs	r3, r2
 8005820:	9304      	str	r3, [sp, #16]
 8005822:	46a2      	mov	sl, r4
 8005824:	e7d2      	b.n	80057cc <_svfiprintf_r+0xa0>
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	1d19      	adds	r1, r3, #4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	9103      	str	r1, [sp, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfbb      	ittet	lt
 8005832:	425b      	neglt	r3, r3
 8005834:	f042 0202 	orrlt.w	r2, r2, #2
 8005838:	9307      	strge	r3, [sp, #28]
 800583a:	9307      	strlt	r3, [sp, #28]
 800583c:	bfb8      	it	lt
 800583e:	9204      	strlt	r2, [sp, #16]
 8005840:	7823      	ldrb	r3, [r4, #0]
 8005842:	2b2e      	cmp	r3, #46	@ 0x2e
 8005844:	d10a      	bne.n	800585c <_svfiprintf_r+0x130>
 8005846:	7863      	ldrb	r3, [r4, #1]
 8005848:	2b2a      	cmp	r3, #42	@ 0x2a
 800584a:	d132      	bne.n	80058b2 <_svfiprintf_r+0x186>
 800584c:	9b03      	ldr	r3, [sp, #12]
 800584e:	1d1a      	adds	r2, r3, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	9203      	str	r2, [sp, #12]
 8005854:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005858:	3402      	adds	r4, #2
 800585a:	9305      	str	r3, [sp, #20]
 800585c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005920 <_svfiprintf_r+0x1f4>
 8005860:	7821      	ldrb	r1, [r4, #0]
 8005862:	2203      	movs	r2, #3
 8005864:	4650      	mov	r0, sl
 8005866:	f7fa fcbb 	bl	80001e0 <memchr>
 800586a:	b138      	cbz	r0, 800587c <_svfiprintf_r+0x150>
 800586c:	9b04      	ldr	r3, [sp, #16]
 800586e:	eba0 000a 	sub.w	r0, r0, sl
 8005872:	2240      	movs	r2, #64	@ 0x40
 8005874:	4082      	lsls	r2, r0
 8005876:	4313      	orrs	r3, r2
 8005878:	3401      	adds	r4, #1
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005880:	4824      	ldr	r0, [pc, #144]	@ (8005914 <_svfiprintf_r+0x1e8>)
 8005882:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005886:	2206      	movs	r2, #6
 8005888:	f7fa fcaa 	bl	80001e0 <memchr>
 800588c:	2800      	cmp	r0, #0
 800588e:	d036      	beq.n	80058fe <_svfiprintf_r+0x1d2>
 8005890:	4b21      	ldr	r3, [pc, #132]	@ (8005918 <_svfiprintf_r+0x1ec>)
 8005892:	bb1b      	cbnz	r3, 80058dc <_svfiprintf_r+0x1b0>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	3307      	adds	r3, #7
 8005898:	f023 0307 	bic.w	r3, r3, #7
 800589c:	3308      	adds	r3, #8
 800589e:	9303      	str	r3, [sp, #12]
 80058a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a2:	4433      	add	r3, r6
 80058a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058a6:	e76a      	b.n	800577e <_svfiprintf_r+0x52>
 80058a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ac:	460c      	mov	r4, r1
 80058ae:	2001      	movs	r0, #1
 80058b0:	e7a8      	b.n	8005804 <_svfiprintf_r+0xd8>
 80058b2:	2300      	movs	r3, #0
 80058b4:	3401      	adds	r4, #1
 80058b6:	9305      	str	r3, [sp, #20]
 80058b8:	4619      	mov	r1, r3
 80058ba:	f04f 0c0a 	mov.w	ip, #10
 80058be:	4620      	mov	r0, r4
 80058c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058c4:	3a30      	subs	r2, #48	@ 0x30
 80058c6:	2a09      	cmp	r2, #9
 80058c8:	d903      	bls.n	80058d2 <_svfiprintf_r+0x1a6>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0c6      	beq.n	800585c <_svfiprintf_r+0x130>
 80058ce:	9105      	str	r1, [sp, #20]
 80058d0:	e7c4      	b.n	800585c <_svfiprintf_r+0x130>
 80058d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80058d6:	4604      	mov	r4, r0
 80058d8:	2301      	movs	r3, #1
 80058da:	e7f0      	b.n	80058be <_svfiprintf_r+0x192>
 80058dc:	ab03      	add	r3, sp, #12
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	462a      	mov	r2, r5
 80058e2:	4b0e      	ldr	r3, [pc, #56]	@ (800591c <_svfiprintf_r+0x1f0>)
 80058e4:	a904      	add	r1, sp, #16
 80058e6:	4638      	mov	r0, r7
 80058e8:	f3af 8000 	nop.w
 80058ec:	1c42      	adds	r2, r0, #1
 80058ee:	4606      	mov	r6, r0
 80058f0:	d1d6      	bne.n	80058a0 <_svfiprintf_r+0x174>
 80058f2:	89ab      	ldrh	r3, [r5, #12]
 80058f4:	065b      	lsls	r3, r3, #25
 80058f6:	f53f af2d 	bmi.w	8005754 <_svfiprintf_r+0x28>
 80058fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058fc:	e72c      	b.n	8005758 <_svfiprintf_r+0x2c>
 80058fe:	ab03      	add	r3, sp, #12
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	462a      	mov	r2, r5
 8005904:	4b05      	ldr	r3, [pc, #20]	@ (800591c <_svfiprintf_r+0x1f0>)
 8005906:	a904      	add	r1, sp, #16
 8005908:	4638      	mov	r0, r7
 800590a:	f000 f879 	bl	8005a00 <_printf_i>
 800590e:	e7ed      	b.n	80058ec <_svfiprintf_r+0x1c0>
 8005910:	08005e14 	.word	0x08005e14
 8005914:	08005e1e 	.word	0x08005e1e
 8005918:	00000000 	.word	0x00000000
 800591c:	08005675 	.word	0x08005675
 8005920:	08005e1a 	.word	0x08005e1a

08005924 <_printf_common>:
 8005924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	4616      	mov	r6, r2
 800592a:	4698      	mov	r8, r3
 800592c:	688a      	ldr	r2, [r1, #8]
 800592e:	690b      	ldr	r3, [r1, #16]
 8005930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005934:	4293      	cmp	r3, r2
 8005936:	bfb8      	it	lt
 8005938:	4613      	movlt	r3, r2
 800593a:	6033      	str	r3, [r6, #0]
 800593c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005940:	4607      	mov	r7, r0
 8005942:	460c      	mov	r4, r1
 8005944:	b10a      	cbz	r2, 800594a <_printf_common+0x26>
 8005946:	3301      	adds	r3, #1
 8005948:	6033      	str	r3, [r6, #0]
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	0699      	lsls	r1, r3, #26
 800594e:	bf42      	ittt	mi
 8005950:	6833      	ldrmi	r3, [r6, #0]
 8005952:	3302      	addmi	r3, #2
 8005954:	6033      	strmi	r3, [r6, #0]
 8005956:	6825      	ldr	r5, [r4, #0]
 8005958:	f015 0506 	ands.w	r5, r5, #6
 800595c:	d106      	bne.n	800596c <_printf_common+0x48>
 800595e:	f104 0a19 	add.w	sl, r4, #25
 8005962:	68e3      	ldr	r3, [r4, #12]
 8005964:	6832      	ldr	r2, [r6, #0]
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	42ab      	cmp	r3, r5
 800596a:	dc26      	bgt.n	80059ba <_printf_common+0x96>
 800596c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005970:	6822      	ldr	r2, [r4, #0]
 8005972:	3b00      	subs	r3, #0
 8005974:	bf18      	it	ne
 8005976:	2301      	movne	r3, #1
 8005978:	0692      	lsls	r2, r2, #26
 800597a:	d42b      	bmi.n	80059d4 <_printf_common+0xb0>
 800597c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005980:	4641      	mov	r1, r8
 8005982:	4638      	mov	r0, r7
 8005984:	47c8      	blx	r9
 8005986:	3001      	adds	r0, #1
 8005988:	d01e      	beq.n	80059c8 <_printf_common+0xa4>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	6922      	ldr	r2, [r4, #16]
 800598e:	f003 0306 	and.w	r3, r3, #6
 8005992:	2b04      	cmp	r3, #4
 8005994:	bf02      	ittt	eq
 8005996:	68e5      	ldreq	r5, [r4, #12]
 8005998:	6833      	ldreq	r3, [r6, #0]
 800599a:	1aed      	subeq	r5, r5, r3
 800599c:	68a3      	ldr	r3, [r4, #8]
 800599e:	bf0c      	ite	eq
 80059a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059a4:	2500      	movne	r5, #0
 80059a6:	4293      	cmp	r3, r2
 80059a8:	bfc4      	itt	gt
 80059aa:	1a9b      	subgt	r3, r3, r2
 80059ac:	18ed      	addgt	r5, r5, r3
 80059ae:	2600      	movs	r6, #0
 80059b0:	341a      	adds	r4, #26
 80059b2:	42b5      	cmp	r5, r6
 80059b4:	d11a      	bne.n	80059ec <_printf_common+0xc8>
 80059b6:	2000      	movs	r0, #0
 80059b8:	e008      	b.n	80059cc <_printf_common+0xa8>
 80059ba:	2301      	movs	r3, #1
 80059bc:	4652      	mov	r2, sl
 80059be:	4641      	mov	r1, r8
 80059c0:	4638      	mov	r0, r7
 80059c2:	47c8      	blx	r9
 80059c4:	3001      	adds	r0, #1
 80059c6:	d103      	bne.n	80059d0 <_printf_common+0xac>
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d0:	3501      	adds	r5, #1
 80059d2:	e7c6      	b.n	8005962 <_printf_common+0x3e>
 80059d4:	18e1      	adds	r1, r4, r3
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	2030      	movs	r0, #48	@ 0x30
 80059da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059de:	4422      	add	r2, r4
 80059e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059e8:	3302      	adds	r3, #2
 80059ea:	e7c7      	b.n	800597c <_printf_common+0x58>
 80059ec:	2301      	movs	r3, #1
 80059ee:	4622      	mov	r2, r4
 80059f0:	4641      	mov	r1, r8
 80059f2:	4638      	mov	r0, r7
 80059f4:	47c8      	blx	r9
 80059f6:	3001      	adds	r0, #1
 80059f8:	d0e6      	beq.n	80059c8 <_printf_common+0xa4>
 80059fa:	3601      	adds	r6, #1
 80059fc:	e7d9      	b.n	80059b2 <_printf_common+0x8e>
	...

08005a00 <_printf_i>:
 8005a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	7e0f      	ldrb	r7, [r1, #24]
 8005a06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a08:	2f78      	cmp	r7, #120	@ 0x78
 8005a0a:	4691      	mov	r9, r2
 8005a0c:	4680      	mov	r8, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	469a      	mov	sl, r3
 8005a12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a16:	d807      	bhi.n	8005a28 <_printf_i+0x28>
 8005a18:	2f62      	cmp	r7, #98	@ 0x62
 8005a1a:	d80a      	bhi.n	8005a32 <_printf_i+0x32>
 8005a1c:	2f00      	cmp	r7, #0
 8005a1e:	f000 80d1 	beq.w	8005bc4 <_printf_i+0x1c4>
 8005a22:	2f58      	cmp	r7, #88	@ 0x58
 8005a24:	f000 80b8 	beq.w	8005b98 <_printf_i+0x198>
 8005a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a30:	e03a      	b.n	8005aa8 <_printf_i+0xa8>
 8005a32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a36:	2b15      	cmp	r3, #21
 8005a38:	d8f6      	bhi.n	8005a28 <_printf_i+0x28>
 8005a3a:	a101      	add	r1, pc, #4	@ (adr r1, 8005a40 <_printf_i+0x40>)
 8005a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a40:	08005a99 	.word	0x08005a99
 8005a44:	08005aad 	.word	0x08005aad
 8005a48:	08005a29 	.word	0x08005a29
 8005a4c:	08005a29 	.word	0x08005a29
 8005a50:	08005a29 	.word	0x08005a29
 8005a54:	08005a29 	.word	0x08005a29
 8005a58:	08005aad 	.word	0x08005aad
 8005a5c:	08005a29 	.word	0x08005a29
 8005a60:	08005a29 	.word	0x08005a29
 8005a64:	08005a29 	.word	0x08005a29
 8005a68:	08005a29 	.word	0x08005a29
 8005a6c:	08005bab 	.word	0x08005bab
 8005a70:	08005ad7 	.word	0x08005ad7
 8005a74:	08005b65 	.word	0x08005b65
 8005a78:	08005a29 	.word	0x08005a29
 8005a7c:	08005a29 	.word	0x08005a29
 8005a80:	08005bcd 	.word	0x08005bcd
 8005a84:	08005a29 	.word	0x08005a29
 8005a88:	08005ad7 	.word	0x08005ad7
 8005a8c:	08005a29 	.word	0x08005a29
 8005a90:	08005a29 	.word	0x08005a29
 8005a94:	08005b6d 	.word	0x08005b6d
 8005a98:	6833      	ldr	r3, [r6, #0]
 8005a9a:	1d1a      	adds	r2, r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6032      	str	r2, [r6, #0]
 8005aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005aa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e09c      	b.n	8005be6 <_printf_i+0x1e6>
 8005aac:	6833      	ldr	r3, [r6, #0]
 8005aae:	6820      	ldr	r0, [r4, #0]
 8005ab0:	1d19      	adds	r1, r3, #4
 8005ab2:	6031      	str	r1, [r6, #0]
 8005ab4:	0606      	lsls	r6, r0, #24
 8005ab6:	d501      	bpl.n	8005abc <_printf_i+0xbc>
 8005ab8:	681d      	ldr	r5, [r3, #0]
 8005aba:	e003      	b.n	8005ac4 <_printf_i+0xc4>
 8005abc:	0645      	lsls	r5, r0, #25
 8005abe:	d5fb      	bpl.n	8005ab8 <_printf_i+0xb8>
 8005ac0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ac4:	2d00      	cmp	r5, #0
 8005ac6:	da03      	bge.n	8005ad0 <_printf_i+0xd0>
 8005ac8:	232d      	movs	r3, #45	@ 0x2d
 8005aca:	426d      	negs	r5, r5
 8005acc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ad0:	4858      	ldr	r0, [pc, #352]	@ (8005c34 <_printf_i+0x234>)
 8005ad2:	230a      	movs	r3, #10
 8005ad4:	e011      	b.n	8005afa <_printf_i+0xfa>
 8005ad6:	6821      	ldr	r1, [r4, #0]
 8005ad8:	6833      	ldr	r3, [r6, #0]
 8005ada:	0608      	lsls	r0, r1, #24
 8005adc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ae0:	d402      	bmi.n	8005ae8 <_printf_i+0xe8>
 8005ae2:	0649      	lsls	r1, r1, #25
 8005ae4:	bf48      	it	mi
 8005ae6:	b2ad      	uxthmi	r5, r5
 8005ae8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005aea:	4852      	ldr	r0, [pc, #328]	@ (8005c34 <_printf_i+0x234>)
 8005aec:	6033      	str	r3, [r6, #0]
 8005aee:	bf14      	ite	ne
 8005af0:	230a      	movne	r3, #10
 8005af2:	2308      	moveq	r3, #8
 8005af4:	2100      	movs	r1, #0
 8005af6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005afa:	6866      	ldr	r6, [r4, #4]
 8005afc:	60a6      	str	r6, [r4, #8]
 8005afe:	2e00      	cmp	r6, #0
 8005b00:	db05      	blt.n	8005b0e <_printf_i+0x10e>
 8005b02:	6821      	ldr	r1, [r4, #0]
 8005b04:	432e      	orrs	r6, r5
 8005b06:	f021 0104 	bic.w	r1, r1, #4
 8005b0a:	6021      	str	r1, [r4, #0]
 8005b0c:	d04b      	beq.n	8005ba6 <_printf_i+0x1a6>
 8005b0e:	4616      	mov	r6, r2
 8005b10:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b14:	fb03 5711 	mls	r7, r3, r1, r5
 8005b18:	5dc7      	ldrb	r7, [r0, r7]
 8005b1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b1e:	462f      	mov	r7, r5
 8005b20:	42bb      	cmp	r3, r7
 8005b22:	460d      	mov	r5, r1
 8005b24:	d9f4      	bls.n	8005b10 <_printf_i+0x110>
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d10b      	bne.n	8005b42 <_printf_i+0x142>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	07df      	lsls	r7, r3, #31
 8005b2e:	d508      	bpl.n	8005b42 <_printf_i+0x142>
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	6861      	ldr	r1, [r4, #4]
 8005b34:	4299      	cmp	r1, r3
 8005b36:	bfde      	ittt	le
 8005b38:	2330      	movle	r3, #48	@ 0x30
 8005b3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b42:	1b92      	subs	r2, r2, r6
 8005b44:	6122      	str	r2, [r4, #16]
 8005b46:	f8cd a000 	str.w	sl, [sp]
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	aa03      	add	r2, sp, #12
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4640      	mov	r0, r8
 8005b52:	f7ff fee7 	bl	8005924 <_printf_common>
 8005b56:	3001      	adds	r0, #1
 8005b58:	d14a      	bne.n	8005bf0 <_printf_i+0x1f0>
 8005b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5e:	b004      	add	sp, #16
 8005b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	f043 0320 	orr.w	r3, r3, #32
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	4832      	ldr	r0, [pc, #200]	@ (8005c38 <_printf_i+0x238>)
 8005b6e:	2778      	movs	r7, #120	@ 0x78
 8005b70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	6831      	ldr	r1, [r6, #0]
 8005b78:	061f      	lsls	r7, r3, #24
 8005b7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b7e:	d402      	bmi.n	8005b86 <_printf_i+0x186>
 8005b80:	065f      	lsls	r7, r3, #25
 8005b82:	bf48      	it	mi
 8005b84:	b2ad      	uxthmi	r5, r5
 8005b86:	6031      	str	r1, [r6, #0]
 8005b88:	07d9      	lsls	r1, r3, #31
 8005b8a:	bf44      	itt	mi
 8005b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8005b90:	6023      	strmi	r3, [r4, #0]
 8005b92:	b11d      	cbz	r5, 8005b9c <_printf_i+0x19c>
 8005b94:	2310      	movs	r3, #16
 8005b96:	e7ad      	b.n	8005af4 <_printf_i+0xf4>
 8005b98:	4826      	ldr	r0, [pc, #152]	@ (8005c34 <_printf_i+0x234>)
 8005b9a:	e7e9      	b.n	8005b70 <_printf_i+0x170>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	f023 0320 	bic.w	r3, r3, #32
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	e7f6      	b.n	8005b94 <_printf_i+0x194>
 8005ba6:	4616      	mov	r6, r2
 8005ba8:	e7bd      	b.n	8005b26 <_printf_i+0x126>
 8005baa:	6833      	ldr	r3, [r6, #0]
 8005bac:	6825      	ldr	r5, [r4, #0]
 8005bae:	6961      	ldr	r1, [r4, #20]
 8005bb0:	1d18      	adds	r0, r3, #4
 8005bb2:	6030      	str	r0, [r6, #0]
 8005bb4:	062e      	lsls	r6, r5, #24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	d501      	bpl.n	8005bbe <_printf_i+0x1be>
 8005bba:	6019      	str	r1, [r3, #0]
 8005bbc:	e002      	b.n	8005bc4 <_printf_i+0x1c4>
 8005bbe:	0668      	lsls	r0, r5, #25
 8005bc0:	d5fb      	bpl.n	8005bba <_printf_i+0x1ba>
 8005bc2:	8019      	strh	r1, [r3, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6123      	str	r3, [r4, #16]
 8005bc8:	4616      	mov	r6, r2
 8005bca:	e7bc      	b.n	8005b46 <_printf_i+0x146>
 8005bcc:	6833      	ldr	r3, [r6, #0]
 8005bce:	1d1a      	adds	r2, r3, #4
 8005bd0:	6032      	str	r2, [r6, #0]
 8005bd2:	681e      	ldr	r6, [r3, #0]
 8005bd4:	6862      	ldr	r2, [r4, #4]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7fa fb01 	bl	80001e0 <memchr>
 8005bde:	b108      	cbz	r0, 8005be4 <_printf_i+0x1e4>
 8005be0:	1b80      	subs	r0, r0, r6
 8005be2:	6060      	str	r0, [r4, #4]
 8005be4:	6863      	ldr	r3, [r4, #4]
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	2300      	movs	r3, #0
 8005bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bee:	e7aa      	b.n	8005b46 <_printf_i+0x146>
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	4632      	mov	r2, r6
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	47d0      	blx	sl
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d0ad      	beq.n	8005b5a <_printf_i+0x15a>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	079b      	lsls	r3, r3, #30
 8005c02:	d413      	bmi.n	8005c2c <_printf_i+0x22c>
 8005c04:	68e0      	ldr	r0, [r4, #12]
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	4298      	cmp	r0, r3
 8005c0a:	bfb8      	it	lt
 8005c0c:	4618      	movlt	r0, r3
 8005c0e:	e7a6      	b.n	8005b5e <_printf_i+0x15e>
 8005c10:	2301      	movs	r3, #1
 8005c12:	4632      	mov	r2, r6
 8005c14:	4649      	mov	r1, r9
 8005c16:	4640      	mov	r0, r8
 8005c18:	47d0      	blx	sl
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d09d      	beq.n	8005b5a <_printf_i+0x15a>
 8005c1e:	3501      	adds	r5, #1
 8005c20:	68e3      	ldr	r3, [r4, #12]
 8005c22:	9903      	ldr	r1, [sp, #12]
 8005c24:	1a5b      	subs	r3, r3, r1
 8005c26:	42ab      	cmp	r3, r5
 8005c28:	dcf2      	bgt.n	8005c10 <_printf_i+0x210>
 8005c2a:	e7eb      	b.n	8005c04 <_printf_i+0x204>
 8005c2c:	2500      	movs	r5, #0
 8005c2e:	f104 0619 	add.w	r6, r4, #25
 8005c32:	e7f5      	b.n	8005c20 <_printf_i+0x220>
 8005c34:	08005e25 	.word	0x08005e25
 8005c38:	08005e36 	.word	0x08005e36

08005c3c <memmove>:
 8005c3c:	4288      	cmp	r0, r1
 8005c3e:	b510      	push	{r4, lr}
 8005c40:	eb01 0402 	add.w	r4, r1, r2
 8005c44:	d902      	bls.n	8005c4c <memmove+0x10>
 8005c46:	4284      	cmp	r4, r0
 8005c48:	4623      	mov	r3, r4
 8005c4a:	d807      	bhi.n	8005c5c <memmove+0x20>
 8005c4c:	1e43      	subs	r3, r0, #1
 8005c4e:	42a1      	cmp	r1, r4
 8005c50:	d008      	beq.n	8005c64 <memmove+0x28>
 8005c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c5a:	e7f8      	b.n	8005c4e <memmove+0x12>
 8005c5c:	4402      	add	r2, r0
 8005c5e:	4601      	mov	r1, r0
 8005c60:	428a      	cmp	r2, r1
 8005c62:	d100      	bne.n	8005c66 <memmove+0x2a>
 8005c64:	bd10      	pop	{r4, pc}
 8005c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c6e:	e7f7      	b.n	8005c60 <memmove+0x24>

08005c70 <_sbrk_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4d06      	ldr	r5, [pc, #24]	@ (8005c8c <_sbrk_r+0x1c>)
 8005c74:	2300      	movs	r3, #0
 8005c76:	4604      	mov	r4, r0
 8005c78:	4608      	mov	r0, r1
 8005c7a:	602b      	str	r3, [r5, #0]
 8005c7c:	f7fb f848 	bl	8000d10 <_sbrk>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_sbrk_r+0x1a>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_sbrk_r+0x1a>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	200130b4 	.word	0x200130b4

08005c90 <_realloc_r>:
 8005c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	4607      	mov	r7, r0
 8005c96:	4614      	mov	r4, r2
 8005c98:	460d      	mov	r5, r1
 8005c9a:	b921      	cbnz	r1, 8005ca6 <_realloc_r+0x16>
 8005c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	f7ff bc5b 	b.w	800555c <_malloc_r>
 8005ca6:	b92a      	cbnz	r2, 8005cb4 <_realloc_r+0x24>
 8005ca8:	f7ff fbec 	bl	8005484 <_free_r>
 8005cac:	4625      	mov	r5, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb4:	f000 f81a 	bl	8005cec <_malloc_usable_size_r>
 8005cb8:	4284      	cmp	r4, r0
 8005cba:	4606      	mov	r6, r0
 8005cbc:	d802      	bhi.n	8005cc4 <_realloc_r+0x34>
 8005cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005cc2:	d8f4      	bhi.n	8005cae <_realloc_r+0x1e>
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f7ff fc48 	bl	800555c <_malloc_r>
 8005ccc:	4680      	mov	r8, r0
 8005cce:	b908      	cbnz	r0, 8005cd4 <_realloc_r+0x44>
 8005cd0:	4645      	mov	r5, r8
 8005cd2:	e7ec      	b.n	8005cae <_realloc_r+0x1e>
 8005cd4:	42b4      	cmp	r4, r6
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	bf28      	it	cs
 8005cdc:	4632      	movcs	r2, r6
 8005cde:	f7ff fbc3 	bl	8005468 <memcpy>
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f7ff fbcd 	bl	8005484 <_free_r>
 8005cea:	e7f1      	b.n	8005cd0 <_realloc_r+0x40>

08005cec <_malloc_usable_size_r>:
 8005cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf0:	1f18      	subs	r0, r3, #4
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	bfbc      	itt	lt
 8005cf6:	580b      	ldrlt	r3, [r1, r0]
 8005cf8:	18c0      	addlt	r0, r0, r3
 8005cfa:	4770      	bx	lr

08005cfc <_init>:
 8005cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfe:	bf00      	nop
 8005d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d02:	bc08      	pop	{r3}
 8005d04:	469e      	mov	lr, r3
 8005d06:	4770      	bx	lr

08005d08 <_fini>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr
