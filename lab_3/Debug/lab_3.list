
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005b88  08005b88  00006b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd4  08005bd4  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd4  08005bd4  00006bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bdc  08005bdc  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bdc  08005bdc  00006bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005be0  08005be0  00006be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005be4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00012e64  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e74  20012e74  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff14  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029b4  00000000  00000000  00016f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  00019908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cbb  00000000  00000000  0001a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021adc  00000000  00000000  0001b643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122b3  00000000  00000000  0003d11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2507  00000000  00000000  0004f3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001218d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044f0  00000000  00000000  0012191c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00125e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b70 	.word	0x08005b70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005b70 	.word	0x08005b70

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MEMS_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address,uint8_t data){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	460a      	mov	r2, r1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2108      	movs	r1, #8
 80004d4:	480b      	ldr	r0, [pc, #44]	@ (8000504 <MEMS_Write+0x44>)
 80004d6:	f000 ff65 	bl	80013a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004da:	1df9      	adds	r1, r7, #7
 80004dc:	230a      	movs	r3, #10
 80004de:	2201      	movs	r2, #1
 80004e0:	4809      	ldr	r0, [pc, #36]	@ (8000508 <MEMS_Write+0x48>)
 80004e2:	f001 fcea 	bl	8001eba <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 80004e6:	1db9      	adds	r1, r7, #6
 80004e8:	230a      	movs	r3, #10
 80004ea:	2201      	movs	r2, #1
 80004ec:	4806      	ldr	r0, [pc, #24]	@ (8000508 <MEMS_Write+0x48>)
 80004ee:	f001 fce4 	bl	8001eba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2108      	movs	r1, #8
 80004f6:	4803      	ldr	r0, [pc, #12]	@ (8000504 <MEMS_Write+0x44>)
 80004f8:	f000 ff54 	bl	80013a4 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	2000002c 	.word	0x2000002c

0800050c <MEMS_Read>:
void MEMS_Read(uint8_t address,uint8_t *data){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
    address |= 0x80;
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800051e:	b2db      	uxtb	r3, r3
 8000520:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2108      	movs	r1, #8
 8000526:	480c      	ldr	r0, [pc, #48]	@ (8000558 <MEMS_Read+0x4c>)
 8000528:	f000 ff3c 	bl	80013a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 800052c:	1df9      	adds	r1, r7, #7
 800052e:	230a      	movs	r3, #10
 8000530:	2201      	movs	r2, #1
 8000532:	480a      	ldr	r0, [pc, #40]	@ (800055c <MEMS_Read+0x50>)
 8000534:	f001 fcc1 	bl	8001eba <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,data,1,10);
 8000538:	230a      	movs	r3, #10
 800053a:	2201      	movs	r2, #1
 800053c:	6839      	ldr	r1, [r7, #0]
 800053e:	4807      	ldr	r0, [pc, #28]	@ (800055c <MEMS_Read+0x50>)
 8000540:	f001 fdff 	bl	8002142 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2108      	movs	r1, #8
 8000548:	4803      	ldr	r0, [pc, #12]	@ (8000558 <MEMS_Read+0x4c>)
 800054a:	f000 ff2b 	bl	80013a4 <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	2000002c 	.word	0x2000002c

08000560 <LED_Task>:
void LED_Task(void *pvParameter)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	for(;;){
		uint8_t data;
		MEMS_Read(LIS3DSH_WHO_AM_I_ADDR,&data);
 8000568:	f107 030f 	add.w	r3, r7, #15
 800056c:	4619      	mov	r1, r3
 800056e:	200f      	movs	r0, #15
 8000570:	f7ff ffcc 	bl	800050c <MEMS_Read>
		if(data == 0x3F){
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b3f      	cmp	r3, #63	@ 0x3f
 8000578:	d104      	bne.n	8000584 <LED_Task+0x24>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800057a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800057e:	4804      	ldr	r0, [pc, #16]	@ (8000590 <LED_Task+0x30>)
 8000580:	f000 ff29 	bl	80013d6 <HAL_GPIO_TogglePin>
		}
		vTaskDelay(500/portTICK_RATE_MS);
 8000584:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000588:	f003 fce6 	bl	8003f58 <vTaskDelay>
	for(;;){
 800058c:	e7ec      	b.n	8000568 <LED_Task+0x8>
 800058e:	bf00      	nop
 8000590:	40020c00 	.word	0x40020c00

08000594 <Green_LED_Task>:
	}

}

void Green_LED_Task(void *pvParameters)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//綠燈閃爍
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a2:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <Green_LED_Task+0x34>)
 80005a4:	f000 fefe 	bl	80013a4 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80005a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ac:	f003 fcd4 	bl	8003f58 <vTaskDelay>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005b6:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <Green_LED_Task+0x34>)
 80005b8:	f000 fef4 	bl	80013a4 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80005bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c0:	f003 fcca 	bl	8003f58 <vTaskDelay>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005c4:	bf00      	nop
 80005c6:	e7e9      	b.n	800059c <Green_LED_Task+0x8>
 80005c8:	40020c00 	.word	0x40020c00

080005cc <vHandlerTask>:
	}
}

void vHandlerTask( void *pvParameters )
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		/* Take the semaphore */
		// 嘗試取得 binary semaphore (來自ISR)
		if(xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE)
 80005d4:	4b15      	ldr	r3, [pc, #84]	@ (800062c <vHandlerTask+0x60>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f8e5 	bl	80037ac <xQueueSemaphoreTake>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d1f5      	bne.n	80005d4 <vHandlerTask+0x8>
		{
			uint8_t data = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]
			// 橘燈閃5次 (ON/OFF 共 10 次)
			for(int i = 0; i < 10; i++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e012      	b.n	8000618 <vHandlerTask+0x4c>
			{
				// 切換 LED 狀態 (假設GPIO_PIN_13接LED)
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f6:	480e      	ldr	r0, [pc, #56]	@ (8000630 <vHandlerTask+0x64>)
 80005f8:	f000 feed 	bl	80013d6 <HAL_GPIO_TogglePin>

				// 延遲 250ms
				// 透過 Busy Waiting（忙碌等待）的方式維持 Handler Task 的即時響應能力，確保任務在處理 ISR 事件期間不會被調度排除
				uint32_t From_begin_time = HAL_GetTick();
 80005fc:	f000 fc48 	bl	8000e90 <HAL_GetTick>
 8000600:	6138      	str	r0, [r7, #16]
				while(HAL_GetTick() - From_begin_time < pdMS_TO_TICKS(250)){}
 8000602:	bf00      	nop
 8000604:	f000 fc44 	bl	8000e90 <HAL_GetTick>
 8000608:	4602      	mov	r2, r0
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	2bf9      	cmp	r3, #249	@ 0xf9
 8000610:	d9f8      	bls.n	8000604 <vHandlerTask+0x38>
			for(int i = 0; i < 10; i++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	2b09      	cmp	r3, #9
 800061c:	dde9      	ble.n	80005f2 <vHandlerTask+0x26>
			}

			// 讀取感測器資料，避免中斷鎖死
			MEMS_Read(LIS3DSH_OUTS1_ADDR, &data);
 800061e:	f107 030f 	add.w	r3, r7, #15
 8000622:	4619      	mov	r1, r3
 8000624:	205f      	movs	r0, #95	@ 0x5f
 8000626:	f7ff ff71 	bl	800050c <MEMS_Read>
		if(xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE)
 800062a:	e7d3      	b.n	80005d4 <vHandlerTask+0x8>
 800062c:	20000084 	.word	0x20000084
 8000630:	40020c00 	.word	0x40020c00

08000634 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	/* Give the semaphore to unblock the handler task */
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken=pdFALSE;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <HAL_GPIO_EXTI_Callback+0x48>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f002 ff3a 	bl	80034c6 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d007      	beq.n	8000668 <HAL_GPIO_EXTI_Callback+0x34>
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <HAL_GPIO_EXTI_Callback+0x4c>)
 800065a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	f3bf 8f6f 	isb	sy

	/* 紅燈 toggle */
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066c:	4805      	ldr	r0, [pc, #20]	@ (8000684 <HAL_GPIO_EXTI_Callback+0x50>)
 800066e:	f000 feb2 	bl	80013d6 <HAL_GPIO_TogglePin>
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000084 	.word	0x20000084
 8000680:	e000ed04 	.word	0xe000ed04
 8000684:	40020c00 	.word	0x40020c00

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fbc9 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f865 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f903 	bl	80008a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800069a:	f000 f8cb 	bl	8000834 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate(Green_LED_Task, "LED_Task", 1000, NULL, 1, NULL);
 800069e:	2300      	movs	r3, #0
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2301      	movs	r3, #1
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ac:	4926      	ldr	r1, [pc, #152]	@ (8000748 <main+0xc0>)
 80006ae:	4827      	ldr	r0, [pc, #156]	@ (800074c <main+0xc4>)
 80006b0:	f003 fb12 	bl	8003cd8 <xTaskCreate>
  xTaskCreate(vHandlerTask, "vHandlerTask", 1000, NULL, 3, NULL);
 80006b4:	2300      	movs	r3, #0
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2303      	movs	r3, #3
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006c2:	4923      	ldr	r1, [pc, #140]	@ (8000750 <main+0xc8>)
 80006c4:	4823      	ldr	r0, [pc, #140]	@ (8000754 <main+0xcc>)
 80006c6:	f003 fb07 	bl	8003cd8 <xTaskCreate>

  MEMS_Write(LIS3DSH_CTRL_REG1_ADDR,0x01);
 80006ca:	2101      	movs	r1, #1
 80006cc:	2021      	movs	r0, #33	@ 0x21
 80006ce:	f7ff fef7 	bl	80004c0 <MEMS_Write>
  MEMS_Write(LIS3DSH_CTRL_REG3_ADDR,0x48);
 80006d2:	2148      	movs	r1, #72	@ 0x48
 80006d4:	2023      	movs	r0, #35	@ 0x23
 80006d6:	f7ff fef3 	bl	80004c0 <MEMS_Write>
  MEMS_Write(LIS3DSH_CTRL_REG4_ADDR,0x67);
 80006da:	2167      	movs	r1, #103	@ 0x67
 80006dc:	2020      	movs	r0, #32
 80006de:	f7ff feef 	bl	80004c0 <MEMS_Write>
  MEMS_Write(LIS3DSH_CTRL_REG5_ADDR,0x00);
 80006e2:	2100      	movs	r1, #0
 80006e4:	2024      	movs	r0, #36	@ 0x24
 80006e6:	f7ff feeb 	bl	80004c0 <MEMS_Write>
  MEMS_Write(LIS3DSH_THRS1_1_ADDR,0x55);
 80006ea:	2155      	movs	r1, #85	@ 0x55
 80006ec:	2057      	movs	r0, #87	@ 0x57
 80006ee:	f7ff fee7 	bl	80004c0 <MEMS_Write>
  MEMS_Write(LIS3DSH_ST1_1_ADDR,0x05);
 80006f2:	2105      	movs	r1, #5
 80006f4:	2040      	movs	r0, #64	@ 0x40
 80006f6:	f7ff fee3 	bl	80004c0 <MEMS_Write>
  MEMS_Write(LIS3DSH_ST1_2_ADDR,0x11);
 80006fa:	2111      	movs	r1, #17
 80006fc:	2041      	movs	r0, #65	@ 0x41
 80006fe:	f7ff fedf 	bl	80004c0 <MEMS_Write>
  MEMS_Write(LIS3DSH_MASK1_B_ADDR,0xFC);
 8000702:	21fc      	movs	r1, #252	@ 0xfc
 8000704:	2059      	movs	r0, #89	@ 0x59
 8000706:	f7ff fedb 	bl	80004c0 <MEMS_Write>
  MEMS_Write(LIS3DSH_MASK1_A_ADDR,0xFC);
 800070a:	21fc      	movs	r1, #252	@ 0xfc
 800070c:	205a      	movs	r0, #90	@ 0x5a
 800070e:	f7ff fed7 	bl	80004c0 <MEMS_Write>
  MEMS_Write(LIS3DSH_SETT1_ADDR,0x01);
 8000712:	2101      	movs	r1, #1
 8000714:	205b      	movs	r0, #91	@ 0x5b
 8000716:	f7ff fed3 	bl	80004c0 <MEMS_Write>

  xSemaphore = xSemaphoreCreateBinary();
 800071a:	2203      	movs	r2, #3
 800071c:	2100      	movs	r1, #0
 800071e:	2001      	movs	r0, #1
 8000720:	f002 fcd4 	bl	80030cc <xQueueGenericCreate>
 8000724:	4603      	mov	r3, r0
 8000726:	4a0c      	ldr	r2, [pc, #48]	@ (8000758 <main+0xd0>)
 8000728:	6013      	str	r3, [r2, #0]

  xTaskCreate(
 800072a:	2300      	movs	r3, #0
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	2301      	movs	r3, #1
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2300      	movs	r3, #0
 8000734:	2280      	movs	r2, #128	@ 0x80
 8000736:	4904      	ldr	r1, [pc, #16]	@ (8000748 <main+0xc0>)
 8000738:	4808      	ldr	r0, [pc, #32]	@ (800075c <main+0xd4>)
 800073a:	f003 facd 	bl	8003cd8 <xTaskCreate>
  		  "LED_Task",
  		  128,
  		  NULL,
  		  1,
  		  NULL);
  vTaskStartScheduler();
 800073e:	f003 fc41 	bl	8003fc4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000742:	bf00      	nop
 8000744:	e7fd      	b.n	8000742 <main+0xba>
 8000746:	bf00      	nop
 8000748:	08005b88 	.word	0x08005b88
 800074c:	08000595 	.word	0x08000595
 8000750:	08005b94 	.word	0x08005b94
 8000754:	080005cd 	.word	0x080005cd
 8000758:	20000084 	.word	0x20000084
 800075c:	08000561 	.word	0x08000561

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	@ 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	@ 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f005 f9c4 	bl	8005afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	@ (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	@ 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	@ (8000830 <SystemClock_Config+0xd0>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2310      	movs	r3, #16
 80007c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d0:	2308      	movs	r3, #8
 80007d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007d4:	2332      	movs	r3, #50	@ 0x32
 80007d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007d8:	2304      	movs	r3, #4
 80007da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007dc:	2307      	movs	r3, #7
 80007de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fe29 	bl	800143c <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f0:	f000 f9be 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000800:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f88a 	bl	800192c <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800081e:	f000 f9a7 	bl	8000b70 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	@ 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_SPI1_Init+0x64>)
 800083a:	4a18      	ldr	r2, [pc, #96]	@ (800089c <MX_SPI1_Init+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000840:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000866:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000880:	220a      	movs	r2, #10
 8000882:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000886:	f001 fa8f 	bl	8001da8 <HAL_SPI_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000890:	f000 f96e 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000002c 	.word	0x2000002c
 800089c:	40013000 	.word	0x40013000

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	@ 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	4b9e      	ldr	r3, [pc, #632]	@ (8000b34 <MX_GPIO_Init+0x294>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a9d      	ldr	r2, [pc, #628]	@ (8000b34 <MX_GPIO_Init+0x294>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b9b      	ldr	r3, [pc, #620]	@ (8000b34 <MX_GPIO_Init+0x294>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	4b97      	ldr	r3, [pc, #604]	@ (8000b34 <MX_GPIO_Init+0x294>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a96      	ldr	r2, [pc, #600]	@ (8000b34 <MX_GPIO_Init+0x294>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b94      	ldr	r3, [pc, #592]	@ (8000b34 <MX_GPIO_Init+0x294>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b90      	ldr	r3, [pc, #576]	@ (8000b34 <MX_GPIO_Init+0x294>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a8f      	ldr	r2, [pc, #572]	@ (8000b34 <MX_GPIO_Init+0x294>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b8d      	ldr	r3, [pc, #564]	@ (8000b34 <MX_GPIO_Init+0x294>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b89      	ldr	r3, [pc, #548]	@ (8000b34 <MX_GPIO_Init+0x294>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a88      	ldr	r2, [pc, #544]	@ (8000b34 <MX_GPIO_Init+0x294>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b86      	ldr	r3, [pc, #536]	@ (8000b34 <MX_GPIO_Init+0x294>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b82      	ldr	r3, [pc, #520]	@ (8000b34 <MX_GPIO_Init+0x294>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a81      	ldr	r2, [pc, #516]	@ (8000b34 <MX_GPIO_Init+0x294>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b7f      	ldr	r3, [pc, #508]	@ (8000b34 <MX_GPIO_Init+0x294>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b7b      	ldr	r3, [pc, #492]	@ (8000b34 <MX_GPIO_Init+0x294>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a7a      	ldr	r2, [pc, #488]	@ (8000b34 <MX_GPIO_Init+0x294>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b78      	ldr	r3, [pc, #480]	@ (8000b34 <MX_GPIO_Init+0x294>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Output_GPIO_Port, GPIO_Output_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2108      	movs	r1, #8
 8000962:	4875      	ldr	r0, [pc, #468]	@ (8000b38 <MX_GPIO_Init+0x298>)
 8000964:	f000 fd1e 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2101      	movs	r1, #1
 800096c:	4873      	ldr	r0, [pc, #460]	@ (8000b3c <MX_GPIO_Init+0x29c>)
 800096e:	f000 fd19 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	2200      	movs	r2, #0
 8000974:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000978:	4871      	ldr	r0, [pc, #452]	@ (8000b40 <MX_GPIO_Init+0x2a0>)
 800097a:	f000 fd13 	bl	80013a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : GPIO_Output_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_Pin;
 800097e:	2308      	movs	r3, #8
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_Output_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4868      	ldr	r0, [pc, #416]	@ (8000b38 <MX_GPIO_Init+0x298>)
 8000996:	f000 fb69 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4862      	ldr	r0, [pc, #392]	@ (8000b3c <MX_GPIO_Init+0x29c>)
 80009b2:	f000 fb5b 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009b6:	2308      	movs	r3, #8
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c6:	2305      	movs	r3, #5
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	485a      	ldr	r0, [pc, #360]	@ (8000b3c <MX_GPIO_Init+0x29c>)
 80009d2:	f000 fb4b 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009d6:	2310      	movs	r3, #16
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009e6:	2306      	movs	r3, #6
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4854      	ldr	r0, [pc, #336]	@ (8000b44 <MX_GPIO_Init+0x2a4>)
 80009f2:	f000 fb3b 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009f6:	2304      	movs	r3, #4
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	484f      	ldr	r0, [pc, #316]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 8000a0a:	f000 fb2f 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a20:	2305      	movs	r3, #5
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4847      	ldr	r0, [pc, #284]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 8000a2c:	f000 fb1e 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a30:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a34:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	483d      	ldr	r0, [pc, #244]	@ (8000b40 <MX_GPIO_Init+0x2a0>)
 8000a4a:	f000 fb0f 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a4e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a60:	2306      	movs	r3, #6
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4834      	ldr	r0, [pc, #208]	@ (8000b3c <MX_GPIO_Init+0x29c>)
 8000a6c:	f000 fafe 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	482f      	ldr	r0, [pc, #188]	@ (8000b44 <MX_GPIO_Init+0x2a4>)
 8000a86:	f000 faf1 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a8a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a9c:	230a      	movs	r3, #10
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4827      	ldr	r0, [pc, #156]	@ (8000b44 <MX_GPIO_Init+0x2a4>)
 8000aa8:	f000 fae0 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000aac:	2320      	movs	r3, #32
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4820      	ldr	r0, [pc, #128]	@ (8000b40 <MX_GPIO_Init+0x2a0>)
 8000ac0:	f000 fad4 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ac4:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aca:	2312      	movs	r3, #18
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4819      	ldr	r0, [pc, #100]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 8000ae2:	f000 fac3 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	480f      	ldr	r0, [pc, #60]	@ (8000b38 <MX_GPIO_Init+0x298>)
 8000afc:	f000 fab6 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b04:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <MX_GPIO_Init+0x298>)
 8000b16:	f000 faa9 	bl	800106c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2107      	movs	r1, #7
 8000b1e:	2006      	movs	r0, #6
 8000b20:	f000 fa7a 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b24:	2006      	movs	r0, #6
 8000b26:	f000 fa93 	bl	8001050 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	@ 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5e:	f000 f983 	bl	8000e68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40001400 	.word	0x40001400

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <Error_Handler+0x8>

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc8 <HAL_MspInit+0x4c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	@ (8000bc8 <HAL_MspInit+0x4c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	@ (8000c50 <HAL_SPI_MspInit+0x84>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d12b      	bne.n	8000c46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <HAL_SPI_MspInit+0x88>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	4a17      	ldr	r2, [pc, #92]	@ (8000c54 <HAL_SPI_MspInit+0x88>)
 8000bf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_SPI_MspInit+0x88>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_SPI_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <HAL_SPI_MspInit+0x88>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_SPI_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c26:	23e0      	movs	r3, #224	@ 0xe0
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c36:	2305      	movs	r3, #5
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <HAL_SPI_MspInit+0x8c>)
 8000c42:	f000 fa13 	bl	800106c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	@ 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40013000 	.word	0x40013000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000

08000c5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08e      	sub	sp, #56	@ 0x38
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	4b33      	ldr	r3, [pc, #204]	@ (8000d40 <HAL_InitTick+0xe4>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	4a32      	ldr	r2, [pc, #200]	@ (8000d40 <HAL_InitTick+0xe4>)
 8000c76:	f043 0320 	orr.w	r3, r3, #32
 8000c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7c:	4b30      	ldr	r3, [pc, #192]	@ (8000d40 <HAL_InitTick+0xe4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	f003 0320 	and.w	r3, r3, #32
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c88:	f107 0210 	add.w	r2, r7, #16
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 f856 	bl	8001d44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d103      	bne.n	8000caa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ca2:	f001 f83b 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 8000ca6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ca8:	e004      	b.n	8000cb4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000caa:	f001 f837 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb6:	4a23      	ldr	r2, [pc, #140]	@ (8000d44 <HAL_InitTick+0xe8>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	0c9b      	lsrs	r3, r3, #18
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <HAL_InitTick+0xec>)
 8000cc4:	4a21      	ldr	r2, [pc, #132]	@ (8000d4c <HAL_InitTick+0xf0>)
 8000cc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <HAL_InitTick+0xec>)
 8000cca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cce:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d48 <HAL_InitTick+0xec>)
 8000cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <HAL_InitTick+0xec>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <HAL_InitTick+0xec>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <HAL_InitTick+0xec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000ce8:	4817      	ldr	r0, [pc, #92]	@ (8000d48 <HAL_InitTick+0xec>)
 8000cea:	f001 fe2f 	bl	800294c <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d11b      	bne.n	8000d34 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000cfc:	4812      	ldr	r0, [pc, #72]	@ (8000d48 <HAL_InitTick+0xec>)
 8000cfe:	f001 fe7f 	bl	8002a00 <HAL_TIM_Base_Start_IT>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d111      	bne.n	8000d34 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d10:	2037      	movs	r0, #55	@ 0x37
 8000d12:	f000 f99d 	bl	8001050 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d808      	bhi.n	8000d2e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	2037      	movs	r0, #55	@ 0x37
 8000d22:	f000 f979 	bl	8001018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <HAL_InitTick+0xf4>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	e002      	b.n	8000d34 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3738      	adds	r7, #56	@ 0x38
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	431bde83 	.word	0x431bde83
 8000d48:	20000088 	.word	0x20000088
 8000d4c:	40001400 	.word	0x40001400
 8000d50:	20000004 	.word	0x20000004

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <NMI_Handler+0x4>

08000d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 fb3c 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <TIM7_IRQHandler+0x10>)
 8000d9e:	f001 fe9f 	bl	8002ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000088 	.word	0x20000088

08000dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dd4:	f7ff ffea 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	@ (8000e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f004 fe85 	bl	8005b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fc41 	bl	8000688 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e14:	08005be4 	.word	0x08005be4
  ldr r2, =_sbss
 8000e18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e1c:	20012e74 	.word	0x20012e74

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <HAL_Init+0x40>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <HAL_Init+0x40>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <HAL_Init+0x40>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f8d8 	bl	8001002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff ff02 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fe90 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	200000d0 	.word	0x200000d0

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200000d0 	.word	0x200000d0

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	@ (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	@ 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff4c 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102a:	f7ff ff61 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800102e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff ffb1 	bl	8000f9c <NVIC_EncodePriority>
 800103a:	4602      	mov	r2, r0
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff80 	bl	8000f48 <__NVIC_SetPriority>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff54 	bl	8000f0c <__NVIC_EnableIRQ>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e16b      	b.n	8001360 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 815a 	bne.w	800135a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d130      	bne.n	8001120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d017      	beq.n	800115c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80b4 	beq.w	800135a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b60      	ldr	r3, [pc, #384]	@ (8001378 <HAL_GPIO_Init+0x30c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001378 <HAL_GPIO_Init+0x30c>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b5d      	ldr	r3, [pc, #372]	@ (8001378 <HAL_GPIO_Init+0x30c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120e:	4a5b      	ldr	r2, [pc, #364]	@ (800137c <HAL_GPIO_Init+0x310>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	@ (8001380 <HAL_GPIO_Init+0x314>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02b      	beq.n	8001292 <HAL_GPIO_Init+0x226>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a51      	ldr	r2, [pc, #324]	@ (8001384 <HAL_GPIO_Init+0x318>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x222>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a50      	ldr	r2, [pc, #320]	@ (8001388 <HAL_GPIO_Init+0x31c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x21e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4f      	ldr	r2, [pc, #316]	@ (800138c <HAL_GPIO_Init+0x320>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x21a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4e      	ldr	r2, [pc, #312]	@ (8001390 <HAL_GPIO_Init+0x324>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x216>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4d      	ldr	r2, [pc, #308]	@ (8001394 <HAL_GPIO_Init+0x328>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x212>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4c      	ldr	r2, [pc, #304]	@ (8001398 <HAL_GPIO_Init+0x32c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x20e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4b      	ldr	r2, [pc, #300]	@ (800139c <HAL_GPIO_Init+0x330>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x20a>
 8001272:	2307      	movs	r3, #7
 8001274:	e00e      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001276:	2308      	movs	r3, #8
 8001278:	e00c      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800127a:	2306      	movs	r3, #6
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	@ (800137c <HAL_GPIO_Init+0x310>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b3b      	ldr	r3, [pc, #236]	@ (80013a0 <HAL_GPIO_Init+0x334>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a32      	ldr	r2, [pc, #200]	@ (80013a0 <HAL_GPIO_Init+0x334>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <HAL_GPIO_Init+0x334>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a27      	ldr	r2, [pc, #156]	@ (80013a0 <HAL_GPIO_Init+0x334>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001306:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <HAL_GPIO_Init+0x334>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132a:	4a1d      	ldr	r2, [pc, #116]	@ (80013a0 <HAL_GPIO_Init+0x334>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <HAL_GPIO_Init+0x334>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001354:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <HAL_GPIO_Init+0x334>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f ae90 	bls.w	8001088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40021400 	.word	0x40021400
 8001398:	40021800 	.word	0x40021800
 800139c:	40021c00 	.word	0x40021c00
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001422:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f902 	bl	8000634 <HAL_GPIO_EXTI_Callback>
  }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e267      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d075      	beq.n	8001546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800145a:	4b88      	ldr	r3, [pc, #544]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b04      	cmp	r3, #4
 8001464:	d00c      	beq.n	8001480 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001466:	4b85      	ldr	r3, [pc, #532]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800146e:	2b08      	cmp	r3, #8
 8001470:	d112      	bne.n	8001498 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001472:	4b82      	ldr	r3, [pc, #520]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800147a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800147e:	d10b      	bne.n	8001498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	4b7e      	ldr	r3, [pc, #504]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d05b      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d157      	bne.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e242      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a0:	d106      	bne.n	80014b0 <HAL_RCC_OscConfig+0x74>
 80014a2:	4b76      	ldr	r3, [pc, #472]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a75      	ldr	r2, [pc, #468]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e01d      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x98>
 80014ba:	4b70      	ldr	r3, [pc, #448]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6f      	ldr	r2, [pc, #444]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b6d      	ldr	r3, [pc, #436]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6c      	ldr	r2, [pc, #432]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014d4:	4b69      	ldr	r3, [pc, #420]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a68      	ldr	r2, [pc, #416]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b66      	ldr	r3, [pc, #408]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a65      	ldr	r2, [pc, #404]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fccc 	bl	8000e90 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fcc8 	bl	8000e90 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e207      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b5b      	ldr	r3, [pc, #364]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0xc0>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fcb8 	bl	8000e90 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fcb4 	bl	8000e90 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1f3      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	4b51      	ldr	r3, [pc, #324]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0xe8>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d063      	beq.n	800161a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001552:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155e:	4b47      	ldr	r3, [pc, #284]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001566:	2b08      	cmp	r3, #8
 8001568:	d11c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156a:	4b44      	ldr	r3, [pc, #272]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d116      	bne.n	80015a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	4b41      	ldr	r3, [pc, #260]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x152>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e1c7      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4b3b      	ldr	r3, [pc, #236]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4937      	ldr	r1, [pc, #220]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	e03a      	b.n	800161a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ac:	4b34      	ldr	r3, [pc, #208]	@ (8001680 <HAL_RCC_OscConfig+0x244>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fc6d 	bl	8000e90 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fc69 	bl	8000e90 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1a8      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b28      	ldr	r3, [pc, #160]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4925      	ldr	r1, [pc, #148]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <HAL_RCC_OscConfig+0x244>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc4c 	bl	8000e90 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff fc48 	bl	8000e90 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e187      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d036      	beq.n	8001694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d016      	beq.n	800165c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_RCC_OscConfig+0x248>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001634:	f7ff fc2c 	bl	8000e90 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff fc28 	bl	8000e90 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e167      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x200>
 800165a:	e01b      	b.n	8001694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_RCC_OscConfig+0x248>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fc15 	bl	8000e90 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	e00e      	b.n	8001688 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fc11 	bl	8000e90 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d907      	bls.n	8001688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e150      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
 800167c:	40023800 	.word	0x40023800
 8001680:	42470000 	.word	0x42470000
 8001684:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	4b88      	ldr	r3, [pc, #544]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800168a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ea      	bne.n	800166a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 8097 	beq.w	80017d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a6:	4b81      	ldr	r3, [pc, #516]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10f      	bne.n	80016d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b7d      	ldr	r3, [pc, #500]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	4a7c      	ldr	r2, [pc, #496]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c2:	4b7a      	ldr	r3, [pc, #488]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b77      	ldr	r3, [pc, #476]	@ (80018b0 <HAL_RCC_OscConfig+0x474>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d118      	bne.n	8001710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016de:	4b74      	ldr	r3, [pc, #464]	@ (80018b0 <HAL_RCC_OscConfig+0x474>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a73      	ldr	r2, [pc, #460]	@ (80018b0 <HAL_RCC_OscConfig+0x474>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fbd1 	bl	8000e90 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fbcd 	bl	8000e90 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e10c      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	4b6a      	ldr	r3, [pc, #424]	@ (80018b0 <HAL_RCC_OscConfig+0x474>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x2ea>
 8001718:	4b64      	ldr	r3, [pc, #400]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171c:	4a63      	ldr	r2, [pc, #396]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6713      	str	r3, [r2, #112]	@ 0x70
 8001724:	e01c      	b.n	8001760 <HAL_RCC_OscConfig+0x324>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x30c>
 800172e:	4b5f      	ldr	r3, [pc, #380]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001732:	4a5e      	ldr	r2, [pc, #376]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6713      	str	r3, [r2, #112]	@ 0x70
 800173a:	4b5c      	ldr	r3, [pc, #368]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173e:	4a5b      	ldr	r2, [pc, #364]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6713      	str	r3, [r2, #112]	@ 0x70
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0x324>
 8001748:	4b58      	ldr	r3, [pc, #352]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174c:	4a57      	ldr	r2, [pc, #348]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	@ 0x70
 8001754:	4b55      	ldr	r3, [pc, #340]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001758:	4a54      	ldr	r2, [pc, #336]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800175a:	f023 0304 	bic.w	r3, r3, #4
 800175e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d015      	beq.n	8001794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fb92 	bl	8000e90 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176e:	e00a      	b.n	8001786 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff fb8e 	bl	8000e90 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e0cb      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001786:	4b49      	ldr	r3, [pc, #292]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0ee      	beq.n	8001770 <HAL_RCC_OscConfig+0x334>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff fb7c 	bl	8000e90 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff fb78 	bl	8000e90 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e0b5      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b2:	4b3e      	ldr	r3, [pc, #248]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ee      	bne.n	800179c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	4b39      	ldr	r3, [pc, #228]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	4a38      	ldr	r2, [pc, #224]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80a1 	beq.w	800191c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017da:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d05c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d141      	bne.n	8001872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <HAL_RCC_OscConfig+0x478>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb4c 	bl	8000e90 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fb48 	bl	8000e90 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e087      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	019b      	lsls	r3, r3, #6
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	3b01      	subs	r3, #1
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	491b      	ldr	r1, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <HAL_RCC_OscConfig+0x478>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fb21 	bl	8000e90 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff fb1d 	bl	8000e90 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e05c      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x416>
 8001870:	e054      	b.n	800191c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <HAL_RCC_OscConfig+0x478>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fb0a 	bl	8000e90 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff fb06 	bl	8000e90 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e045      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x444>
 800189e:	e03d      	b.n	800191c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e038      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000
 80018b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_RCC_OscConfig+0x4ec>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d028      	beq.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d121      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d11a      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018e8:	4013      	ands	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d111      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	3b01      	subs	r3, #1
 8001902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d107      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0cc      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b68      	ldr	r3, [pc, #416]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d90c      	bls.n	8001968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b65      	ldr	r3, [pc, #404]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b63      	ldr	r3, [pc, #396]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0b8      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d020      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001980:	4b59      	ldr	r3, [pc, #356]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a58      	ldr	r2, [pc, #352]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800198a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001998:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a52      	ldr	r2, [pc, #328]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	4b50      	ldr	r3, [pc, #320]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	494d      	ldr	r1, [pc, #308]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d044      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b47      	ldr	r3, [pc, #284]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d119      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e07f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e06f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e067      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4934      	ldr	r1, [pc, #208]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a1c:	f7ff fa38 	bl	8000e90 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff fa34 	bl	8000e90 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e04f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d20c      	bcs.n	8001a74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e032      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4916      	ldr	r1, [pc, #88]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	490e      	ldr	r1, [pc, #56]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ab2:	f000 f821 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	490a      	ldr	r1, [pc, #40]	@ (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	5ccb      	ldrb	r3, [r1, r3]
 8001ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aca:	4a09      	ldr	r2, [pc, #36]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f8c2 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023c00 	.word	0x40023c00
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	08005bbc 	.word	0x08005bbc
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001afc:	b094      	sub	sp, #80	@ 0x50
 8001afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b10:	4b79      	ldr	r3, [pc, #484]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d00d      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x40>
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	f200 80e1 	bhi.w	8001ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x34>
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b2a:	e0db      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b73      	ldr	r3, [pc, #460]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b30:	e0db      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b32:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b36:	e0d8      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b38:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b42:	4b6d      	ldr	r3, [pc, #436]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d063      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	099b      	lsrs	r3, r3, #6
 8001b54:	2200      	movs	r2, #0
 8001b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	462b      	mov	r3, r5
 8001b6e:	f04f 0000 	mov.w	r0, #0
 8001b72:	f04f 0100 	mov.w	r1, #0
 8001b76:	0159      	lsls	r1, r3, #5
 8001b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7c:	0150      	lsls	r0, r2, #5
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4621      	mov	r1, r4
 8001b84:	1a51      	subs	r1, r2, r1
 8001b86:	6139      	str	r1, [r7, #16]
 8001b88:	4629      	mov	r1, r5
 8001b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	018b      	lsls	r3, r1, #6
 8001ba0:	4651      	mov	r1, sl
 8001ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ba6:	4651      	mov	r1, sl
 8001ba8:	018a      	lsls	r2, r1, #6
 8001baa:	4651      	mov	r1, sl
 8001bac:	ebb2 0801 	subs.w	r8, r2, r1
 8001bb0:	4659      	mov	r1, fp
 8001bb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bca:	4690      	mov	r8, r2
 8001bcc:	4699      	mov	r9, r3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	eb18 0303 	adds.w	r3, r8, r3
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	462b      	mov	r3, r5
 8001bd8:	eb49 0303 	adc.w	r3, r9, r3
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bea:	4629      	mov	r1, r5
 8001bec:	024b      	lsls	r3, r1, #9
 8001bee:	4621      	mov	r1, r4
 8001bf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	024a      	lsls	r2, r1, #9
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c08:	f7fe fae2 	bl	80001d0 <__aeabi_uldivmod>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4613      	mov	r3, r2
 8001c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c14:	e058      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c16:	4b38      	ldr	r3, [pc, #224]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	099b      	lsrs	r3, r3, #6
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	4611      	mov	r1, r2
 8001c22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c26:	623b      	str	r3, [r7, #32]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c30:	4642      	mov	r2, r8
 8001c32:	464b      	mov	r3, r9
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	f04f 0100 	mov.w	r1, #0
 8001c3c:	0159      	lsls	r1, r3, #5
 8001c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c42:	0150      	lsls	r0, r2, #5
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4641      	mov	r1, r8
 8001c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c4e:	4649      	mov	r1, r9
 8001c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c68:	ebb2 040a 	subs.w	r4, r2, sl
 8001c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	00eb      	lsls	r3, r5, #3
 8001c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c7e:	00e2      	lsls	r2, r4, #3
 8001c80:	4614      	mov	r4, r2
 8001c82:	461d      	mov	r5, r3
 8001c84:	4643      	mov	r3, r8
 8001c86:	18e3      	adds	r3, r4, r3
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	464b      	mov	r3, r9
 8001c8c:	eb45 0303 	adc.w	r3, r5, r3
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	028b      	lsls	r3, r1, #10
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca8:	4621      	mov	r1, r4
 8001caa:	028a      	lsls	r2, r1, #10
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	61fa      	str	r2, [r7, #28]
 8001cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cbc:	f7fe fa88 	bl	80001d0 <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001cd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce2:	e002      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3750      	adds	r7, #80	@ 0x50
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	00f42400 	.word	0x00f42400
 8001d00:	007a1200 	.word	0x007a1200

08001d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d08:	4b03      	ldr	r3, [pc, #12]	@ (8001d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000000 	.word	0x20000000

08001d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d20:	f7ff fff0 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0a9b      	lsrs	r3, r3, #10
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	@ (8001d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	08005bcc 	.word	0x08005bcc

08001d44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	220f      	movs	r2, #15
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <HAL_RCC_GetClockConfig+0x60>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0207 	and.w	r2, r3, #7
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	601a      	str	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40023c00 	.word	0x40023c00

08001da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07b      	b.n	8001eb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d108      	bne.n	8001dd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dca:	d009      	beq.n	8001de0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
 8001dd2:	e005      	b.n	8001de0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe fee6 	bl	8000bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e64:	ea42 0103 	orr.w	r1, r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	f003 0104 	and.w	r1, r3, #4
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	f003 0210 	and.w	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ea0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b088      	sub	sp, #32
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eca:	f7fe ffe1 	bl	8000e90 <HAL_GetTick>
 8001ece:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d001      	beq.n	8001ee4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e12a      	b.n	800213a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_SPI_Transmit+0x36>
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e122      	b.n	800213a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_SPI_Transmit+0x48>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e11b      	b.n	800213a <HAL_SPI_Transmit+0x280>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	88fa      	ldrh	r2, [r7, #6]
 8001f22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	88fa      	ldrh	r2, [r7, #6]
 8001f28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f50:	d10f      	bne.n	8001f72 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7c:	2b40      	cmp	r3, #64	@ 0x40
 8001f7e:	d007      	beq.n	8001f90 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f98:	d152      	bne.n	8002040 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_SPI_Transmit+0xee>
 8001fa2:	8b7b      	ldrh	r3, [r7, #26]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d145      	bne.n	8002034 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fac:	881a      	ldrh	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	1c9a      	adds	r2, r3, #2
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fcc:	e032      	b.n	8002034 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d112      	bne.n	8002002 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	881a      	ldrh	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	1c9a      	adds	r2, r3, #2
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002000:	e018      	b.n	8002034 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002002:	f7fe ff45 	bl	8000e90 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d803      	bhi.n	800201a <HAL_SPI_Transmit+0x160>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d102      	bne.n	8002020 <HAL_SPI_Transmit+0x166>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e082      	b.n	800213a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1c7      	bne.n	8001fce <HAL_SPI_Transmit+0x114>
 800203e:	e053      	b.n	80020e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <HAL_SPI_Transmit+0x194>
 8002048:	8b7b      	ldrh	r3, [r7, #26]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d147      	bne.n	80020de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	330c      	adds	r3, #12
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002074:	e033      	b.n	80020de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b02      	cmp	r3, #2
 8002082:	d113      	bne.n	80020ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	330c      	adds	r3, #12
 800208e:	7812      	ldrb	r2, [r2, #0]
 8002090:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020aa:	e018      	b.n	80020de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020ac:	f7fe fef0 	bl	8000e90 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d803      	bhi.n	80020c4 <HAL_SPI_Transmit+0x20a>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c2:	d102      	bne.n	80020ca <HAL_SPI_Transmit+0x210>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e02d      	b.n	800213a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1c6      	bne.n	8002076 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	6839      	ldr	r1, [r7, #0]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fbd9 	bl	80028a4 <SPI_EndRxTxTransaction>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10a      	bne.n	800211c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002138:	2300      	movs	r3, #0
  }
}
 800213a:	4618      	mov	r0, r3
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b088      	sub	sp, #32
 8002146:	af02      	add	r7, sp, #8
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d001      	beq.n	8002162 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800215e:	2302      	movs	r3, #2
 8002160:	e104      	b.n	800236c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800216a:	d112      	bne.n	8002192 <HAL_SPI_Receive+0x50>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10e      	bne.n	8002192 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2204      	movs	r2, #4
 8002178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	4613      	mov	r3, r2
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f8f3 	bl	8002374 <HAL_SPI_TransmitReceive>
 800218e:	4603      	mov	r3, r0
 8002190:	e0ec      	b.n	800236c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002192:	f7fe fe7d 	bl	8000e90 <HAL_GetTick>
 8002196:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <HAL_SPI_Receive+0x62>
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0e1      	b.n	800236c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_SPI_Receive+0x74>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e0da      	b.n	800236c <HAL_SPI_Receive+0x22a>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2204      	movs	r2, #4
 80021c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	88fa      	ldrh	r2, [r7, #6]
 80021dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002204:	d10f      	bne.n	8002226 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002230:	2b40      	cmp	r3, #64	@ 0x40
 8002232:	d007      	beq.n	8002244 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d170      	bne.n	800232e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800224c:	e035      	b.n	80022ba <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d115      	bne.n	8002288 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f103 020c 	add.w	r2, r3, #12
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002268:	7812      	ldrb	r2, [r2, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002286:	e018      	b.n	80022ba <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002288:	f7fe fe02 	bl	8000e90 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d803      	bhi.n	80022a0 <HAL_SPI_Receive+0x15e>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229e:	d102      	bne.n	80022a6 <HAL_SPI_Receive+0x164>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e058      	b.n	800236c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1c4      	bne.n	800224e <HAL_SPI_Receive+0x10c>
 80022c4:	e038      	b.n	8002338 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d113      	bne.n	80022fc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022de:	b292      	uxth	r2, r2
 80022e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e6:	1c9a      	adds	r2, r3, #2
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022fa:	e018      	b.n	800232e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022fc:	f7fe fdc8 	bl	8000e90 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d803      	bhi.n	8002314 <HAL_SPI_Receive+0x1d2>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d102      	bne.n	800231a <HAL_SPI_Receive+0x1d8>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e01e      	b.n	800236c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1c6      	bne.n	80022c6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	6839      	ldr	r1, [r7, #0]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fa4b 	bl	80027d8 <SPI_EndRxTransaction>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800236a:	2300      	movs	r3, #0
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	@ 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002382:	2301      	movs	r3, #1
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002386:	f7fe fd83 	bl	8000e90 <HAL_GetTick>
 800238a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002392:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800239e:	7ffb      	ldrb	r3, [r7, #31]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d00c      	beq.n	80023be <HAL_SPI_TransmitReceive+0x4a>
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023aa:	d106      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x46>
 80023b4:	7ffb      	ldrb	r3, [r7, #31]
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d001      	beq.n	80023be <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
 80023bc:	e17f      	b.n	80026be <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0x5c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0x5c>
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e174      	b.n	80026be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_SPI_TransmitReceive+0x6e>
 80023de:	2302      	movs	r3, #2
 80023e0:	e16d      	b.n	80026be <HAL_SPI_TransmitReceive+0x34a>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d003      	beq.n	80023fe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	887a      	ldrh	r2, [r7, #2]
 800240e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243e:	2b40      	cmp	r3, #64	@ 0x40
 8002440:	d007      	beq.n	8002452 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800245a:	d17e      	bne.n	800255a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_SPI_TransmitReceive+0xf6>
 8002464:	8afb      	ldrh	r3, [r7, #22]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d16c      	bne.n	8002544 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	1c9a      	adds	r2, r3, #2
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800248e:	e059      	b.n	8002544 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d11b      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x162>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d016      	beq.n	80024d6 <HAL_SPI_TransmitReceive+0x162>
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d113      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	881a      	ldrh	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	1c9a      	adds	r2, r3, #2
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d119      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x1a4>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d014      	beq.n	8002518 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	b292      	uxth	r2, r2
 80024fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002500:	1c9a      	adds	r2, r3, #2
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002514:	2301      	movs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002518:	f7fe fcba 	bl	8000e90 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002524:	429a      	cmp	r2, r3
 8002526:	d80d      	bhi.n	8002544 <HAL_SPI_TransmitReceive+0x1d0>
 8002528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d009      	beq.n	8002544 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0bc      	b.n	80026be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1a0      	bne.n	8002490 <HAL_SPI_TransmitReceive+0x11c>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d19b      	bne.n	8002490 <HAL_SPI_TransmitReceive+0x11c>
 8002558:	e082      	b.n	8002660 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x1f4>
 8002562:	8afb      	ldrh	r3, [r7, #22]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d171      	bne.n	800264c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	330c      	adds	r3, #12
 8002572:	7812      	ldrb	r2, [r2, #0]
 8002574:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800258e:	e05d      	b.n	800264c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d11c      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x264>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d017      	beq.n	80025d8 <HAL_SPI_TransmitReceive+0x264>
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d114      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	330c      	adds	r3, #12
 80025b8:	7812      	ldrb	r2, [r2, #0]
 80025ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d119      	bne.n	800261a <HAL_SPI_TransmitReceive+0x2a6>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d014      	beq.n	800261a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002616:	2301      	movs	r3, #1
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800261a:	f7fe fc39 	bl	8000e90 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002626:	429a      	cmp	r2, r3
 8002628:	d803      	bhi.n	8002632 <HAL_SPI_TransmitReceive+0x2be>
 800262a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d102      	bne.n	8002638 <HAL_SPI_TransmitReceive+0x2c4>
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e038      	b.n	80026be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d19c      	bne.n	8002590 <HAL_SPI_TransmitReceive+0x21c>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d197      	bne.n	8002590 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f91d 	bl	80028a4 <SPI_EndRxTxTransaction>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e01d      	b.n	80026be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80026bc:	2300      	movs	r3, #0
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3728      	adds	r7, #40	@ 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d8:	f7fe fbda 	bl	8000e90 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e8:	f7fe fbd2 	bl	8000e90 <HAL_GetTick>
 80026ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026ee:	4b39      	ldr	r3, [pc, #228]	@ (80027d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	015b      	lsls	r3, r3, #5
 80026f4:	0d1b      	lsrs	r3, r3, #20
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026fe:	e054      	b.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d050      	beq.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002708:	f7fe fbc2 	bl	8000e90 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	d902      	bls.n	800271e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d13d      	bne.n	800279a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800272c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002736:	d111      	bne.n	800275c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002740:	d004      	beq.n	800274c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800274a:	d107      	bne.n	800275c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800275a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002764:	d10f      	bne.n	8002786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e017      	b.n	80027ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d19b      	bne.n	8002700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000

080027d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027ec:	d111      	bne.n	8002812 <SPI_EndRxTransaction+0x3a>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027f6:	d004      	beq.n	8002802 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002800:	d107      	bne.n	8002812 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800281a:	d12a      	bne.n	8002872 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002824:	d012      	beq.n	800284c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2200      	movs	r2, #0
 800282e:	2180      	movs	r1, #128	@ 0x80
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7ff ff49 	bl	80026c8 <SPI_WaitFlagStateUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02d      	beq.n	8002898 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e026      	b.n	800289a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	2101      	movs	r1, #1
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff ff36 	bl	80026c8 <SPI_WaitFlagStateUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01a      	beq.n	8002898 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e013      	b.n	800289a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	2101      	movs	r1, #1
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff ff23 	bl	80026c8 <SPI_WaitFlagStateUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e000      	b.n	800289a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2201      	movs	r2, #1
 80028b8:	2102      	movs	r1, #2
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7ff ff04 	bl	80026c8 <SPI_WaitFlagStateUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ca:	f043 0220 	orr.w	r2, r3, #32
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e032      	b.n	800293c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002944 <SPI_EndRxTxTransaction+0xa0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1b      	ldr	r2, [pc, #108]	@ (8002948 <SPI_EndRxTxTransaction+0xa4>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	0d5b      	lsrs	r3, r3, #21
 80028e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028f4:	d112      	bne.n	800291c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2200      	movs	r2, #0
 80028fe:	2180      	movs	r1, #128	@ 0x80
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff fee1 	bl	80026c8 <SPI_WaitFlagStateUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d016      	beq.n	800293a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e00f      	b.n	800293c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	3b01      	subs	r3, #1
 8002926:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002932:	2b80      	cmp	r3, #128	@ 0x80
 8002934:	d0f2      	beq.n	800291c <SPI_EndRxTxTransaction+0x78>
 8002936:	e000      	b.n	800293a <SPI_EndRxTxTransaction+0x96>
        break;
 8002938:	bf00      	nop
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000000 	.word	0x20000000
 8002948:	165e9f81 	.word	0x165e9f81

0800294c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e041      	b.n	80029e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f839 	bl	80029ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f000 f9c0 	bl	8002d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d001      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e04e      	b.n	8002ab6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a23      	ldr	r2, [pc, #140]	@ (8002ac4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d022      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a42:	d01d      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d018      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	@ (8002acc <HAL_TIM_Base_Start_IT+0xcc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00e      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d009      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a18      	ldr	r2, [pc, #96]	@ (8002adc <HAL_TIM_Base_Start_IT+0xdc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d111      	bne.n	8002aa4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d010      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa2:	e007      	b.n	8002ab4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800
 8002ad0:	40000c00 	.word	0x40000c00
 8002ad4:	40010400 	.word	0x40010400
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40001800 	.word	0x40001800

08002ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d020      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01b      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0202 	mvn.w	r2, #2
 8002b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8d2 	bl	8002cd4 <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8c4 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8d5 	bl	8002ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d020      	beq.n	8002b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01b      	beq.n	8002b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0204 	mvn.w	r2, #4
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f8ac 	bl	8002cd4 <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f89e 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f8af 	bl	8002ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d020      	beq.n	8002bdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01b      	beq.n	8002bdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0208 	mvn.w	r2, #8
 8002bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f886 	bl	8002cd4 <HAL_TIM_IC_CaptureCallback>
 8002bc8:	e005      	b.n	8002bd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f878 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f889 	bl	8002ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d020      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01b      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0210 	mvn.w	r2, #16
 8002bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f860 	bl	8002cd4 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f852 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f863 	bl	8002ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00c      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0201 	mvn.w	r2, #1
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd ff80 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f906 	bl	8002e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00c      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f834 	bl	8002cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0220 	mvn.w	r2, #32
 8002cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8d8 	bl	8002e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a46      	ldr	r2, [pc, #280]	@ (8002e3c <TIM_Base_SetConfig+0x12c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2e:	d00f      	beq.n	8002d50 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a43      	ldr	r2, [pc, #268]	@ (8002e40 <TIM_Base_SetConfig+0x130>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a42      	ldr	r2, [pc, #264]	@ (8002e44 <TIM_Base_SetConfig+0x134>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a41      	ldr	r2, [pc, #260]	@ (8002e48 <TIM_Base_SetConfig+0x138>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a40      	ldr	r2, [pc, #256]	@ (8002e4c <TIM_Base_SetConfig+0x13c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d108      	bne.n	8002d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a35      	ldr	r2, [pc, #212]	@ (8002e3c <TIM_Base_SetConfig+0x12c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02b      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d70:	d027      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a32      	ldr	r2, [pc, #200]	@ (8002e40 <TIM_Base_SetConfig+0x130>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d023      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a31      	ldr	r2, [pc, #196]	@ (8002e44 <TIM_Base_SetConfig+0x134>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01f      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a30      	ldr	r2, [pc, #192]	@ (8002e48 <TIM_Base_SetConfig+0x138>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01b      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e4c <TIM_Base_SetConfig+0x13c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d017      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2e      	ldr	r2, [pc, #184]	@ (8002e50 <TIM_Base_SetConfig+0x140>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e54 <TIM_Base_SetConfig+0x144>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00f      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2c      	ldr	r2, [pc, #176]	@ (8002e58 <TIM_Base_SetConfig+0x148>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00b      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2b      	ldr	r2, [pc, #172]	@ (8002e5c <TIM_Base_SetConfig+0x14c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e60 <TIM_Base_SetConfig+0x150>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d003      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a29      	ldr	r2, [pc, #164]	@ (8002e64 <TIM_Base_SetConfig+0x154>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d108      	bne.n	8002dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a10      	ldr	r2, [pc, #64]	@ (8002e3c <TIM_Base_SetConfig+0x12c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0xf8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a12      	ldr	r2, [pc, #72]	@ (8002e4c <TIM_Base_SetConfig+0x13c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d105      	bne.n	8002e2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f023 0201 	bic.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	611a      	str	r2, [r3, #16]
  }
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40010000 	.word	0x40010000
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800
 8002e48:	40000c00 	.word	0x40000c00
 8002e4c:	40010400 	.word	0x40010400
 8002e50:	40014000 	.word	0x40014000
 8002e54:	40014400 	.word	0x40014400
 8002e58:	40014800 	.word	0x40014800
 8002e5c:	40001800 	.word	0x40001800
 8002e60:	40001c00 	.word	0x40001c00
 8002e64:	40002000 	.word	0x40002000

08002e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f103 0208 	add.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f103 0208 	add.w	r2, r3, #8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f103 0208 	add.w	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eea:	b480      	push	{r7}
 8002eec:	b085      	sub	sp, #20
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d103      	bne.n	8002f52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e00c      	b.n	8002f6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3308      	adds	r3, #8
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e002      	b.n	8002f60 <vListInsert+0x2e>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d2f6      	bcs.n	8002f5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	601a      	str	r2, [r3, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6892      	ldr	r2, [r2, #8]
 8002fba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6852      	ldr	r2, [r2, #4]
 8002fc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d103      	bne.n	8002fd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1e5a      	subs	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003024:	f002 fa68 	bl	80054f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	441a      	add	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003054:	3b01      	subs	r3, #1
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	441a      	add	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	22ff      	movs	r2, #255	@ 0xff
 8003068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	22ff      	movs	r2, #255	@ 0xff
 8003070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d114      	bne.n	80030a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01a      	beq.n	80030b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3310      	adds	r3, #16
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fa0e 	bl	80044a8 <xTaskRemoveFromEventList>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003092:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <xQueueGenericReset+0xd0>)
 8003094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	e009      	b.n	80030b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3310      	adds	r3, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fef1 	bl	8002e90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3324      	adds	r3, #36	@ 0x24
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff feec 	bl	8002e90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030b8:	f002 fa50 	bl	800555c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030bc:	2301      	movs	r3, #1
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	@ 0x28
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10b      	bne.n	80030f8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	613b      	str	r3, [r7, #16]
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e004      	b.n	800310e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	fb02 f303 	mul.w	r3, r2, r3
 800310c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3350      	adds	r3, #80	@ 0x50
 8003112:	4618      	mov	r0, r3
 8003114:	f002 fb12 	bl	800573c <pvPortMalloc>
 8003118:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3350      	adds	r3, #80	@ 0x50
 8003128:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800312a:	79fa      	ldrb	r2, [r7, #7]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f805 	bl	8003146 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800313c:	69bb      	ldr	r3, [r7, #24]
	}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e002      	b.n	8003168 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003174:	2101      	movs	r1, #1
 8003176:	69b8      	ldr	r0, [r7, #24]
 8003178:	f7ff ff3e 	bl	8002ff8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08e      	sub	sp, #56	@ 0x38
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800319a:	2300      	movs	r3, #0
 800319c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <xQueueGenericSend+0x34>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <xQueueGenericSend+0x42>
 80031c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <xQueueGenericSend+0x46>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <xQueueGenericSend+0x48>
 80031d2:	2300      	movs	r3, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10b      	bne.n	80031f0 <xQueueGenericSend+0x64>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d103      	bne.n	80031fe <xQueueGenericSend+0x72>
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <xQueueGenericSend+0x76>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <xQueueGenericSend+0x78>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <xQueueGenericSend+0x94>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	623b      	str	r3, [r7, #32]
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003220:	f001 fae2 	bl	80047e8 <xTaskGetSchedulerState>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <xQueueGenericSend+0xa4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <xQueueGenericSend+0xa8>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <xQueueGenericSend+0xaa>
 8003234:	2300      	movs	r3, #0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10b      	bne.n	8003252 <xQueueGenericSend+0xc6>
	__asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	61fb      	str	r3, [r7, #28]
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	e7fd      	b.n	800324e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003252:	f002 f951 	bl	80054f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800325a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325e:	429a      	cmp	r2, r3
 8003260:	d302      	bcc.n	8003268 <xQueueGenericSend+0xdc>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d129      	bne.n	80032bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800326e:	f000 fbc5 	bl	80039fc <prvCopyDataToQueue>
 8003272:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	3324      	adds	r3, #36	@ 0x24
 8003280:	4618      	mov	r0, r3
 8003282:	f001 f911 	bl	80044a8 <xTaskRemoveFromEventList>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800328c:	4b3f      	ldr	r3, [pc, #252]	@ (800338c <xQueueGenericSend+0x200>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	e00a      	b.n	80032b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800329e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032a4:	4b39      	ldr	r3, [pc, #228]	@ (800338c <xQueueGenericSend+0x200>)
 80032a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032b4:	f002 f952 	bl	800555c <vPortExitCritical>
				return pdPASS;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e063      	b.n	8003384 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032c2:	f002 f94b 	bl	800555c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e05c      	b.n	8003384 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 f94b 	bl	8004570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032da:	2301      	movs	r3, #1
 80032dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032de:	f002 f93d 	bl	800555c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032e2:	f000 febd 	bl	8004060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032e6:	f002 f907 	bl	80054f8 <vPortEnterCritical>
 80032ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032f0:	b25b      	sxtb	r3, r3
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d103      	bne.n	8003300 <xQueueGenericSend+0x174>
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003306:	b25b      	sxtb	r3, r3
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d103      	bne.n	8003316 <xQueueGenericSend+0x18a>
 800330e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003316:	f002 f921 	bl	800555c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800331a:	1d3a      	adds	r2, r7, #4
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f001 f93a 	bl	800459c <xTaskCheckForTimeOut>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d124      	bne.n	8003378 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800332e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003330:	f000 fc5c 	bl	8003bec <prvIsQueueFull>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d018      	beq.n	800336c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800333a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333c:	3310      	adds	r3, #16
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f001 f85e 	bl	8004404 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800334a:	f000 fbe7 	bl	8003b1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800334e:	f000 fe95 	bl	800407c <xTaskResumeAll>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	f47f af7c 	bne.w	8003252 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800335a:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <xQueueGenericSend+0x200>)
 800335c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	e772      	b.n	8003252 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800336c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800336e:	f000 fbd5 	bl	8003b1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003372:	f000 fe83 	bl	800407c <xTaskResumeAll>
 8003376:	e76c      	b.n	8003252 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800337a:	f000 fbcf 	bl	8003b1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800337e:	f000 fe7d 	bl	800407c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003382:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003384:	4618      	mov	r0, r3
 8003386:	3738      	adds	r7, #56	@ 0x38
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	e000ed04 	.word	0xe000ed04

08003390 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08e      	sub	sp, #56	@ 0x38
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80033a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <xQueueGenericSendFromISR+0x3e>
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <xQueueGenericSendFromISR+0x42>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <xQueueGenericSendFromISR+0x44>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	623b      	str	r3, [r7, #32]
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d103      	bne.n	80033fe <xQueueGenericSendFromISR+0x6e>
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <xQueueGenericSendFromISR+0x72>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <xQueueGenericSendFromISR+0x74>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	61fb      	str	r3, [r7, #28]
}
 800341a:	bf00      	nop
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003420:	f002 f94a 	bl	80056b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003424:	f3ef 8211 	mrs	r2, BASEPRI
 8003428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	61ba      	str	r2, [r7, #24]
 800343a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800343c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <xQueueGenericSendFromISR+0xc2>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d12c      	bne.n	80034ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003458:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003462:	f000 facb 	bl	80039fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003466:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d112      	bne.n	8003496 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	d016      	beq.n	80034a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	3324      	adds	r3, #36	@ 0x24
 800347c:	4618      	mov	r0, r3
 800347e:	f001 f813 	bl	80044a8 <xTaskRemoveFromEventList>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e007      	b.n	80034a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003496:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800349a:	3301      	adds	r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	b25a      	sxtb	r2, r3
 80034a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80034a6:	2301      	movs	r3, #1
 80034a8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80034aa:	e001      	b.n	80034b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3738      	adds	r7, #56	@ 0x38
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b08e      	sub	sp, #56	@ 0x38
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	623b      	str	r3, [r7, #32]
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00b      	beq.n	8003512 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	61fb      	str	r3, [r7, #28]
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	e7fd      	b.n	800350e <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d103      	bne.n	8003522 <xQueueGiveFromISR+0x5c>
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <xQueueGiveFromISR+0x60>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <xQueueGiveFromISR+0x62>
 8003526:	2300      	movs	r3, #0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	61bb      	str	r3, [r7, #24]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003544:	f002 f8b8 	bl	80056b8 <vPortValidateInterruptPriority>
	__asm volatile
 8003548:	f3ef 8211 	mrs	r2, BASEPRI
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	617a      	str	r2, [r7, #20]
 800355e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003560:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003570:	429a      	cmp	r2, r3
 8003572:	d22b      	bcs.n	80035cc <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800357a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003584:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003586:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d112      	bne.n	80035b6 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d016      	beq.n	80035c6 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	3324      	adds	r3, #36	@ 0x24
 800359c:	4618      	mov	r0, r3
 800359e:	f000 ff83 	bl	80044a8 <xTaskRemoveFromEventList>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e007      	b.n	80035c6 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035ba:	3301      	adds	r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	b25a      	sxtb	r2, r3
 80035c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80035c6:	2301      	movs	r3, #1
 80035c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80035ca:	e001      	b.n	80035d0 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80035d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f383 8811 	msr	BASEPRI, r3
}
 80035da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3738      	adds	r7, #56	@ 0x38
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08c      	sub	sp, #48	@ 0x30
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <xQueueReceive+0x32>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	623b      	str	r3, [r7, #32]
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <xQueueReceive+0x40>
 8003620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <xQueueReceive+0x44>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <xQueueReceive+0x46>
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <xQueueReceive+0x62>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	61fb      	str	r3, [r7, #28]
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800364a:	f001 f8cd 	bl	80047e8 <xTaskGetSchedulerState>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <xQueueReceive+0x72>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <xQueueReceive+0x76>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <xQueueReceive+0x78>
 800365e:	2300      	movs	r3, #0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <xQueueReceive+0x94>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	61bb      	str	r3, [r7, #24]
}
 8003676:	bf00      	nop
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800367c:	f001 ff3c 	bl	80054f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01f      	beq.n	80036cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003690:	f000 fa1e 	bl	8003ad0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	1e5a      	subs	r2, r3, #1
 8003698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00f      	beq.n	80036c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a6:	3310      	adds	r3, #16
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fefd 	bl	80044a8 <xTaskRemoveFromEventList>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80036b4:	4b3c      	ldr	r3, [pc, #240]	@ (80037a8 <xQueueReceive+0x1c0>)
 80036b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80036c4:	f001 ff4a 	bl	800555c <vPortExitCritical>
				return pdPASS;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e069      	b.n	80037a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d103      	bne.n	80036da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036d2:	f001 ff43 	bl	800555c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e062      	b.n	80037a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 ff43 	bl	8004570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036ea:	2301      	movs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036ee:	f001 ff35 	bl	800555c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036f2:	f000 fcb5 	bl	8004060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036f6:	f001 feff 	bl	80054f8 <vPortEnterCritical>
 80036fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003700:	b25b      	sxtb	r3, r3
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d103      	bne.n	8003710 <xQueueReceive+0x128>
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003712:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003716:	b25b      	sxtb	r3, r3
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d103      	bne.n	8003726 <xQueueReceive+0x13e>
 800371e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003726:	f001 ff19 	bl	800555c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800372a:	1d3a      	adds	r2, r7, #4
 800372c:	f107 0310 	add.w	r3, r7, #16
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f000 ff32 	bl	800459c <xTaskCheckForTimeOut>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d123      	bne.n	8003786 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800373e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003740:	f000 fa3e 	bl	8003bc0 <prvIsQueueEmpty>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d017      	beq.n	800377a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800374a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374c:	3324      	adds	r3, #36	@ 0x24
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fe56 	bl	8004404 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003758:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800375a:	f000 f9df 	bl	8003b1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800375e:	f000 fc8d 	bl	800407c <xTaskResumeAll>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d189      	bne.n	800367c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003768:	4b0f      	ldr	r3, [pc, #60]	@ (80037a8 <xQueueReceive+0x1c0>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	e780      	b.n	800367c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800377a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800377c:	f000 f9ce 	bl	8003b1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003780:	f000 fc7c 	bl	800407c <xTaskResumeAll>
 8003784:	e77a      	b.n	800367c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003788:	f000 f9c8 	bl	8003b1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800378c:	f000 fc76 	bl	800407c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003790:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003792:	f000 fa15 	bl	8003bc0 <prvIsQueueEmpty>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	f43f af6f 	beq.w	800367c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800379e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3730      	adds	r7, #48	@ 0x30
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	e000ed04 	.word	0xe000ed04

080037ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08e      	sub	sp, #56	@ 0x38
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80037be:	2300      	movs	r3, #0
 80037c0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	623b      	str	r3, [r7, #32]
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80037e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	61fb      	str	r3, [r7, #28]
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003800:	f000 fff2 	bl	80047e8 <xTaskGetSchedulerState>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <xQueueSemaphoreTake+0x64>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <xQueueSemaphoreTake+0x68>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <xQueueSemaphoreTake+0x6a>
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	61bb      	str	r3, [r7, #24]
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	e7fd      	b.n	800382e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003832:	f001 fe61 	bl	80054f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800383c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383e:	2b00      	cmp	r3, #0
 8003840:	d024      	beq.n	800388c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	1e5a      	subs	r2, r3, #1
 8003846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003848:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800384a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003852:	f001 f98b 	bl	8004b6c <pvTaskIncrementMutexHeldCount>
 8003856:	4602      	mov	r2, r0
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00f      	beq.n	8003884 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003866:	3310      	adds	r3, #16
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fe1d 	bl	80044a8 <xTaskRemoveFromEventList>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003874:	4b54      	ldr	r3, [pc, #336]	@ (80039c8 <xQueueSemaphoreTake+0x21c>)
 8003876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003884:	f001 fe6a 	bl	800555c <vPortExitCritical>
				return pdPASS;
 8003888:	2301      	movs	r3, #1
 800388a:	e098      	b.n	80039be <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d112      	bne.n	80038b8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	617b      	str	r3, [r7, #20]
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80038b0:	f001 fe54 	bl	800555c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e082      	b.n	80039be <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038be:	f107 030c 	add.w	r3, r7, #12
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fe54 	bl	8004570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038c8:	2301      	movs	r3, #1
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038cc:	f001 fe46 	bl	800555c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038d0:	f000 fbc6 	bl	8004060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038d4:	f001 fe10 	bl	80054f8 <vPortEnterCritical>
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038de:	b25b      	sxtb	r3, r3
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d103      	bne.n	80038ee <xQueueSemaphoreTake+0x142>
 80038e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d103      	bne.n	8003904 <xQueueSemaphoreTake+0x158>
 80038fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003904:	f001 fe2a 	bl	800555c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003908:	463a      	mov	r2, r7
 800390a:	f107 030c 	add.w	r3, r7, #12
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fe43 	bl	800459c <xTaskCheckForTimeOut>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d132      	bne.n	8003982 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800391c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800391e:	f000 f94f 	bl	8003bc0 <prvIsQueueEmpty>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d026      	beq.n	8003976 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003930:	f001 fde2 	bl	80054f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 ff73 	bl	8004824 <xTaskPriorityInherit>
 800393e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003940:	f001 fe0c 	bl	800555c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003946:	3324      	adds	r3, #36	@ 0x24
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fd59 	bl	8004404 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003952:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003954:	f000 f8e2 	bl	8003b1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003958:	f000 fb90 	bl	800407c <xTaskResumeAll>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	f47f af67 	bne.w	8003832 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003964:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <xQueueSemaphoreTake+0x21c>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	e75d      	b.n	8003832 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003978:	f000 f8d0 	bl	8003b1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800397c:	f000 fb7e 	bl	800407c <xTaskResumeAll>
 8003980:	e757      	b.n	8003832 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003982:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003984:	f000 f8ca 	bl	8003b1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003988:	f000 fb78 	bl	800407c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800398c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800398e:	f000 f917 	bl	8003bc0 <prvIsQueueEmpty>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	f43f af4c 	beq.w	8003832 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800399a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80039a0:	f001 fdaa 	bl	80054f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80039a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039a6:	f000 f811 	bl	80039cc <prvGetDisinheritPriorityAfterTimeout>
 80039aa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80039ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f83e 	bl	8004a34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80039b8:	f001 fdd0 	bl	800555c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3738      	adds	r7, #56	@ 0x38
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1c3 0305 	rsb	r3, r3, #5
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e001      	b.n	80039ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80039ee:	68fb      	ldr	r3, [r7, #12]
	}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10d      	bne.n	8003a36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d14d      	bne.n	8003abe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 ff7c 	bl	8004924 <xTaskPriorityDisinherit>
 8003a2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	e043      	b.n	8003abe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d119      	bne.n	8003a70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6858      	ldr	r0, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	461a      	mov	r2, r3
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	f002 f884 	bl	8005b54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	441a      	add	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d32b      	bcc.n	8003abe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	e026      	b.n	8003abe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68d8      	ldr	r0, [r3, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	f002 f86a 	bl	8005b54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	425b      	negs	r3, r3
 8003a8a:	441a      	add	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d207      	bcs.n	8003aac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	425b      	negs	r3, r3
 8003aa6:	441a      	add	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d105      	bne.n	8003abe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003ac6:	697b      	ldr	r3, [r7, #20]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d018      	beq.n	8003b14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	441a      	add	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d303      	bcc.n	8003b04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68d9      	ldr	r1, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	6838      	ldr	r0, [r7, #0]
 8003b10:	f002 f820 	bl	8005b54 <memcpy>
	}
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b24:	f001 fce8 	bl	80054f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b30:	e011      	b.n	8003b56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d012      	beq.n	8003b60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3324      	adds	r3, #36	@ 0x24
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fcb2 	bl	80044a8 <xTaskRemoveFromEventList>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b4a:	f000 fd8b 	bl	8004664 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	dce9      	bgt.n	8003b32 <prvUnlockQueue+0x16>
 8003b5e:	e000      	b.n	8003b62 <prvUnlockQueue+0x46>
					break;
 8003b60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	22ff      	movs	r2, #255	@ 0xff
 8003b66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003b6a:	f001 fcf7 	bl	800555c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b6e:	f001 fcc3 	bl	80054f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b7a:	e011      	b.n	8003ba0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d012      	beq.n	8003baa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3310      	adds	r3, #16
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fc8d 	bl	80044a8 <xTaskRemoveFromEventList>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b94:	f000 fd66 	bl	8004664 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b98:	7bbb      	ldrb	r3, [r7, #14]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	dce9      	bgt.n	8003b7c <prvUnlockQueue+0x60>
 8003ba8:	e000      	b.n	8003bac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003baa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	22ff      	movs	r2, #255	@ 0xff
 8003bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003bb4:	f001 fcd2 	bl	800555c <vPortExitCritical>
}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bc8:	f001 fc96 	bl	80054f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e001      	b.n	8003bde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bde:	f001 fcbd 	bl	800555c <vPortExitCritical>

	return xReturn;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bf4:	f001 fc80 	bl	80054f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d102      	bne.n	8003c0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c04:	2301      	movs	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e001      	b.n	8003c0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c0e:	f001 fca5 	bl	800555c <vPortExitCritical>

	return xReturn;
 8003c12:	68fb      	ldr	r3, [r7, #12]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e014      	b.n	8003c56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c6c <vQueueAddToRegistry+0x50>)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c38:	490c      	ldr	r1, [pc, #48]	@ (8003c6c <vQueueAddToRegistry+0x50>)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c42:	4a0a      	ldr	r2, [pc, #40]	@ (8003c6c <vQueueAddToRegistry+0x50>)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c4e:	e006      	b.n	8003c5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3301      	adds	r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b07      	cmp	r3, #7
 8003c5a:	d9e7      	bls.n	8003c2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	200000d4 	.word	0x200000d4

08003c70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c80:	f001 fc3a 	bl	80054f8 <vPortEnterCritical>
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c8a:	b25b      	sxtb	r3, r3
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d103      	bne.n	8003c9a <vQueueWaitForMessageRestricted+0x2a>
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ca0:	b25b      	sxtb	r3, r3
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d103      	bne.n	8003cb0 <vQueueWaitForMessageRestricted+0x40>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cb0:	f001 fc54 	bl	800555c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	3324      	adds	r3, #36	@ 0x24
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fbc3 	bl	8004450 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003cca:	6978      	ldr	r0, [r7, #20]
 8003ccc:	f7ff ff26 	bl	8003b1c <prvUnlockQueue>
	}
 8003cd0:	bf00      	nop
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08c      	sub	sp, #48	@ 0x30
 8003cdc:	af04      	add	r7, sp, #16
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fd25 	bl	800573c <pvPortMalloc>
 8003cf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00e      	beq.n	8003d18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cfa:	2058      	movs	r0, #88	@ 0x58
 8003cfc:	f001 fd1e 	bl	800573c <pvPortMalloc>
 8003d00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d0e:	e005      	b.n	8003d1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d10:	6978      	ldr	r0, [r7, #20]
 8003d12:	f001 fddb 	bl	80058cc <vPortFree>
 8003d16:	e001      	b.n	8003d1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d013      	beq.n	8003d4a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	2300      	movs	r3, #0
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f80e 	bl	8003d5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d3e:	69f8      	ldr	r0, [r7, #28]
 8003d40:	f000 f89c 	bl	8003e7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d44:	2301      	movs	r3, #1
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e002      	b.n	8003d50 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d50:	69bb      	ldr	r3, [r7, #24]
	}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b088      	sub	sp, #32
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	461a      	mov	r2, r3
 8003d72:	21a5      	movs	r1, #165	@ 0xa5
 8003d74:	f001 fec2 	bl	8005afc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d82:	3b01      	subs	r3, #1
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f023 0307 	bic.w	r3, r3, #7
 8003d90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	617b      	str	r3, [r7, #20]
}
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	e7fd      	b.n	8003db0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01f      	beq.n	8003dfa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	e012      	b.n	8003de6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	7819      	ldrb	r1, [r3, #0]
 8003dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	3334      	adds	r3, #52	@ 0x34
 8003dd0:	460a      	mov	r2, r1
 8003dd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d006      	beq.n	8003dee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	3301      	adds	r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2b09      	cmp	r3, #9
 8003dea:	d9e9      	bls.n	8003dc0 <prvInitialiseNewTask+0x66>
 8003dec:	e000      	b.n	8003df0 <prvInitialiseNewTask+0x96>
			{
				break;
 8003dee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003df8:	e003      	b.n	8003e02 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d901      	bls.n	8003e0c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e08:	2304      	movs	r3, #4
 8003e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e10:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e16:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	3304      	adds	r3, #4
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff f854 	bl	8002ed0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2a:	3318      	adds	r3, #24
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff f84f 	bl	8002ed0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	f1c3 0205 	rsb	r2, r3, #5
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e46:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	69b8      	ldr	r0, [r7, #24]
 8003e5c:	f001 fa1e 	bl	800529c <pxPortInitialiseStack>
 8003e60:	4602      	mov	r2, r0
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e72:	bf00      	nop
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e84:	f001 fb38 	bl	80054f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e88:	4b2c      	ldr	r3, [pc, #176]	@ (8003f3c <prvAddNewTaskToReadyList+0xc0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f3c <prvAddNewTaskToReadyList+0xc0>)
 8003e90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e92:	4b2b      	ldr	r3, [pc, #172]	@ (8003f40 <prvAddNewTaskToReadyList+0xc4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e9a:	4a29      	ldr	r2, [pc, #164]	@ (8003f40 <prvAddNewTaskToReadyList+0xc4>)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ea0:	4b26      	ldr	r3, [pc, #152]	@ (8003f3c <prvAddNewTaskToReadyList+0xc0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d110      	bne.n	8003eca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ea8:	f000 fc00 	bl	80046ac <prvInitialiseTaskLists>
 8003eac:	e00d      	b.n	8003eca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003eae:	4b25      	ldr	r3, [pc, #148]	@ (8003f44 <prvAddNewTaskToReadyList+0xc8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eb6:	4b22      	ldr	r3, [pc, #136]	@ (8003f40 <prvAddNewTaskToReadyList+0xc4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d802      	bhi.n	8003eca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f40 <prvAddNewTaskToReadyList+0xc4>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003eca:	4b1f      	ldr	r3, [pc, #124]	@ (8003f48 <prvAddNewTaskToReadyList+0xcc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f48 <prvAddNewTaskToReadyList+0xcc>)
 8003ed2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8003f48 <prvAddNewTaskToReadyList+0xcc>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	4b19      	ldr	r3, [pc, #100]	@ (8003f4c <prvAddNewTaskToReadyList+0xd0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	4a18      	ldr	r2, [pc, #96]	@ (8003f4c <prvAddNewTaskToReadyList+0xd0>)
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4a15      	ldr	r2, [pc, #84]	@ (8003f50 <prvAddNewTaskToReadyList+0xd4>)
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3304      	adds	r3, #4
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f7fe fff0 	bl	8002eea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f0a:	f001 fb27 	bl	800555c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <prvAddNewTaskToReadyList+0xc8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f16:	4b0a      	ldr	r3, [pc, #40]	@ (8003f40 <prvAddNewTaskToReadyList+0xc4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d207      	bcs.n	8003f34 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f24:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <prvAddNewTaskToReadyList+0xd8>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	200001ec 	.word	0x200001ec
 8003f40:	20000114 	.word	0x20000114
 8003f44:	200001f8 	.word	0x200001f8
 8003f48:	20000208 	.word	0x20000208
 8003f4c:	200001f4 	.word	0x200001f4
 8003f50:	20000118 	.word	0x20000118
 8003f54:	e000ed04 	.word	0xe000ed04

08003f58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d018      	beq.n	8003f9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f6a:	4b14      	ldr	r3, [pc, #80]	@ (8003fbc <vTaskDelay+0x64>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <vTaskDelay+0x32>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	60bb      	str	r3, [r7, #8]
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	e7fd      	b.n	8003f86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f8a:	f000 f869 	bl	8004060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f8e:	2100      	movs	r1, #0
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fdff 	bl	8004b94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f96:	f000 f871 	bl	800407c <xTaskResumeAll>
 8003f9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d107      	bne.n	8003fb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003fa2:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <vTaskDelay+0x68>)
 8003fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000214 	.word	0x20000214
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003fca:	4b1f      	ldr	r3, [pc, #124]	@ (8004048 <vTaskStartScheduler+0x84>)
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2282      	movs	r2, #130	@ 0x82
 8003fd6:	491d      	ldr	r1, [pc, #116]	@ (800404c <vTaskStartScheduler+0x88>)
 8003fd8:	481d      	ldr	r0, [pc, #116]	@ (8004050 <vTaskStartScheduler+0x8c>)
 8003fda:	f7ff fe7d 	bl	8003cd8 <xTaskCreate>
 8003fde:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d102      	bne.n	8003fec <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003fe6:	f000 fe3b 	bl	8004c60 <xTimerCreateTimerTask>
 8003fea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d116      	bne.n	8004020 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	60bb      	str	r3, [r7, #8]
}
 8004004:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004006:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <vTaskStartScheduler+0x90>)
 8004008:	f04f 32ff 	mov.w	r2, #4294967295
 800400c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800400e:	4b12      	ldr	r3, [pc, #72]	@ (8004058 <vTaskStartScheduler+0x94>)
 8004010:	2201      	movs	r2, #1
 8004012:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004014:	4b11      	ldr	r3, [pc, #68]	@ (800405c <vTaskStartScheduler+0x98>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800401a:	f001 f9c9 	bl	80053b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800401e:	e00f      	b.n	8004040 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d10b      	bne.n	8004040 <vTaskStartScheduler+0x7c>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	607b      	str	r3, [r7, #4]
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <vTaskStartScheduler+0x78>
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000210 	.word	0x20000210
 800404c:	08005ba4 	.word	0x08005ba4
 8004050:	0800467d 	.word	0x0800467d
 8004054:	2000020c 	.word	0x2000020c
 8004058:	200001f8 	.word	0x200001f8
 800405c:	200001f0 	.word	0x200001f0

08004060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004064:	4b04      	ldr	r3, [pc, #16]	@ (8004078 <vTaskSuspendAll+0x18>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	4a03      	ldr	r2, [pc, #12]	@ (8004078 <vTaskSuspendAll+0x18>)
 800406c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800406e:	bf00      	nop
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	20000214 	.word	0x20000214

0800407c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800408a:	4b42      	ldr	r3, [pc, #264]	@ (8004194 <xTaskResumeAll+0x118>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <xTaskResumeAll+0x2e>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	603b      	str	r3, [r7, #0]
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	e7fd      	b.n	80040a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040aa:	f001 fa25 	bl	80054f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040ae:	4b39      	ldr	r3, [pc, #228]	@ (8004194 <xTaskResumeAll+0x118>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	4a37      	ldr	r2, [pc, #220]	@ (8004194 <xTaskResumeAll+0x118>)
 80040b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040b8:	4b36      	ldr	r3, [pc, #216]	@ (8004194 <xTaskResumeAll+0x118>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d161      	bne.n	8004184 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040c0:	4b35      	ldr	r3, [pc, #212]	@ (8004198 <xTaskResumeAll+0x11c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d05d      	beq.n	8004184 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040c8:	e02e      	b.n	8004128 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ca:	4b34      	ldr	r3, [pc, #208]	@ (800419c <xTaskResumeAll+0x120>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3318      	adds	r3, #24
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe ff64 	bl	8002fa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3304      	adds	r3, #4
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe ff5f 	bl	8002fa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ea:	2201      	movs	r2, #1
 80040ec:	409a      	lsls	r2, r3
 80040ee:	4b2c      	ldr	r3, [pc, #176]	@ (80041a0 <xTaskResumeAll+0x124>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	4a2a      	ldr	r2, [pc, #168]	@ (80041a0 <xTaskResumeAll+0x124>)
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4a27      	ldr	r2, [pc, #156]	@ (80041a4 <xTaskResumeAll+0x128>)
 8004106:	441a      	add	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f7fe feeb 	bl	8002eea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004118:	4b23      	ldr	r3, [pc, #140]	@ (80041a8 <xTaskResumeAll+0x12c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	429a      	cmp	r2, r3
 8004120:	d302      	bcc.n	8004128 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004122:	4b22      	ldr	r3, [pc, #136]	@ (80041ac <xTaskResumeAll+0x130>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004128:	4b1c      	ldr	r3, [pc, #112]	@ (800419c <xTaskResumeAll+0x120>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1cc      	bne.n	80040ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004136:	f000 fb37 	bl	80047a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800413a:	4b1d      	ldr	r3, [pc, #116]	@ (80041b0 <xTaskResumeAll+0x134>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d010      	beq.n	8004168 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004146:	f000 f847 	bl	80041d8 <xTaskIncrementTick>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <xTaskResumeAll+0x130>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3b01      	subs	r3, #1
 800415a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f1      	bne.n	8004146 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004162:	4b13      	ldr	r3, [pc, #76]	@ (80041b0 <xTaskResumeAll+0x134>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004168:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <xTaskResumeAll+0x130>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004174:	4b0f      	ldr	r3, [pc, #60]	@ (80041b4 <xTaskResumeAll+0x138>)
 8004176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004184:	f001 f9ea 	bl	800555c <vPortExitCritical>

	return xAlreadyYielded;
 8004188:	68bb      	ldr	r3, [r7, #8]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000214 	.word	0x20000214
 8004198:	200001ec 	.word	0x200001ec
 800419c:	200001ac 	.word	0x200001ac
 80041a0:	200001f4 	.word	0x200001f4
 80041a4:	20000118 	.word	0x20000118
 80041a8:	20000114 	.word	0x20000114
 80041ac:	20000200 	.word	0x20000200
 80041b0:	200001fc 	.word	0x200001fc
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041be:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <xTaskGetTickCount+0x1c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041c4:	687b      	ldr	r3, [r7, #4]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	200001f0 	.word	0x200001f0

080041d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041e2:	4b4f      	ldr	r3, [pc, #316]	@ (8004320 <xTaskIncrementTick+0x148>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 8089 	bne.w	80042fe <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004324 <xTaskIncrementTick+0x14c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004324 <xTaskIncrementTick+0x14c>)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d121      	bne.n	8004244 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004200:	4b49      	ldr	r3, [pc, #292]	@ (8004328 <xTaskIncrementTick+0x150>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <xTaskIncrementTick+0x4a>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	603b      	str	r3, [r7, #0]
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	e7fd      	b.n	800421e <xTaskIncrementTick+0x46>
 8004222:	4b41      	ldr	r3, [pc, #260]	@ (8004328 <xTaskIncrementTick+0x150>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	4b40      	ldr	r3, [pc, #256]	@ (800432c <xTaskIncrementTick+0x154>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a3e      	ldr	r2, [pc, #248]	@ (8004328 <xTaskIncrementTick+0x150>)
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4a3e      	ldr	r2, [pc, #248]	@ (800432c <xTaskIncrementTick+0x154>)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b3e      	ldr	r3, [pc, #248]	@ (8004330 <xTaskIncrementTick+0x158>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3301      	adds	r3, #1
 800423c:	4a3c      	ldr	r2, [pc, #240]	@ (8004330 <xTaskIncrementTick+0x158>)
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	f000 fab2 	bl	80047a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004244:	4b3b      	ldr	r3, [pc, #236]	@ (8004334 <xTaskIncrementTick+0x15c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	429a      	cmp	r2, r3
 800424c:	d348      	bcc.n	80042e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800424e:	4b36      	ldr	r3, [pc, #216]	@ (8004328 <xTaskIncrementTick+0x150>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004258:	4b36      	ldr	r3, [pc, #216]	@ (8004334 <xTaskIncrementTick+0x15c>)
 800425a:	f04f 32ff 	mov.w	r2, #4294967295
 800425e:	601a      	str	r2, [r3, #0]
					break;
 8004260:	e03e      	b.n	80042e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004262:	4b31      	ldr	r3, [pc, #196]	@ (8004328 <xTaskIncrementTick+0x150>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	429a      	cmp	r2, r3
 8004278:	d203      	bcs.n	8004282 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800427a:	4a2e      	ldr	r2, [pc, #184]	@ (8004334 <xTaskIncrementTick+0x15c>)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004280:	e02e      	b.n	80042e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	3304      	adds	r3, #4
 8004286:	4618      	mov	r0, r3
 8004288:	f7fe fe8c 	bl	8002fa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	3318      	adds	r3, #24
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe fe83 	bl	8002fa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	2201      	movs	r2, #1
 80042a4:	409a      	lsls	r2, r3
 80042a6:	4b24      	ldr	r3, [pc, #144]	@ (8004338 <xTaskIncrementTick+0x160>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	4a22      	ldr	r2, [pc, #136]	@ (8004338 <xTaskIncrementTick+0x160>)
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4a1f      	ldr	r2, [pc, #124]	@ (800433c <xTaskIncrementTick+0x164>)
 80042be:	441a      	add	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f7fe fe0f 	bl	8002eea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004340 <xTaskIncrementTick+0x168>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d3b9      	bcc.n	800424e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80042da:	2301      	movs	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042de:	e7b6      	b.n	800424e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042e0:	4b17      	ldr	r3, [pc, #92]	@ (8004340 <xTaskIncrementTick+0x168>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e6:	4915      	ldr	r1, [pc, #84]	@ (800433c <xTaskIncrementTick+0x164>)
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d907      	bls.n	8004308 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80042f8:	2301      	movs	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e004      	b.n	8004308 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042fe:	4b11      	ldr	r3, [pc, #68]	@ (8004344 <xTaskIncrementTick+0x16c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	4a0f      	ldr	r2, [pc, #60]	@ (8004344 <xTaskIncrementTick+0x16c>)
 8004306:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004308:	4b0f      	ldr	r3, [pc, #60]	@ (8004348 <xTaskIncrementTick+0x170>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004314:	697b      	ldr	r3, [r7, #20]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000214 	.word	0x20000214
 8004324:	200001f0 	.word	0x200001f0
 8004328:	200001a4 	.word	0x200001a4
 800432c:	200001a8 	.word	0x200001a8
 8004330:	20000204 	.word	0x20000204
 8004334:	2000020c 	.word	0x2000020c
 8004338:	200001f4 	.word	0x200001f4
 800433c:	20000118 	.word	0x20000118
 8004340:	20000114 	.word	0x20000114
 8004344:	200001fc 	.word	0x200001fc
 8004348:	20000200 	.word	0x20000200

0800434c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004352:	4b27      	ldr	r3, [pc, #156]	@ (80043f0 <vTaskSwitchContext+0xa4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800435a:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <vTaskSwitchContext+0xa8>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004360:	e040      	b.n	80043e4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004362:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <vTaskSwitchContext+0xa8>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004368:	4b23      	ldr	r3, [pc, #140]	@ (80043f8 <vTaskSwitchContext+0xac>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	fab3 f383 	clz	r3, r3
 8004374:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004376:	7afb      	ldrb	r3, [r7, #11]
 8004378:	f1c3 031f 	rsb	r3, r3, #31
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	491f      	ldr	r1, [pc, #124]	@ (80043fc <vTaskSwitchContext+0xb0>)
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <vTaskSwitchContext+0x5e>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	607b      	str	r3, [r7, #4]
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop
 80043a8:	e7fd      	b.n	80043a6 <vTaskSwitchContext+0x5a>
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4a11      	ldr	r2, [pc, #68]	@ (80043fc <vTaskSwitchContext+0xb0>)
 80043b6:	4413      	add	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	3308      	adds	r3, #8
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d104      	bne.n	80043da <vTaskSwitchContext+0x8e>
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a07      	ldr	r2, [pc, #28]	@ (8004400 <vTaskSwitchContext+0xb4>)
 80043e2:	6013      	str	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	20000214 	.word	0x20000214
 80043f4:	20000200 	.word	0x20000200
 80043f8:	200001f4 	.word	0x200001f4
 80043fc:	20000118 	.word	0x20000118
 8004400:	20000114 	.word	0x20000114

08004404 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	60fb      	str	r3, [r7, #12]
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	e7fd      	b.n	8004428 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800442c:	4b07      	ldr	r3, [pc, #28]	@ (800444c <vTaskPlaceOnEventList+0x48>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3318      	adds	r3, #24
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fe fd7c 	bl	8002f32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800443a:	2101      	movs	r1, #1
 800443c:	6838      	ldr	r0, [r7, #0]
 800443e:	f000 fba9 	bl	8004b94 <prvAddCurrentTaskToDelayedList>
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000114 	.word	0x20000114

08004450 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	617b      	str	r3, [r7, #20]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800447a:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3318      	adds	r3, #24
 8004480:	4619      	mov	r1, r3
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7fe fd31 	bl	8002eea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295
 8004492:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	68b8      	ldr	r0, [r7, #8]
 8004498:	f000 fb7c 	bl	8004b94 <prvAddCurrentTaskToDelayedList>
	}
 800449c:	bf00      	nop
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000114 	.word	0x20000114

080044a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	60fb      	str	r3, [r7, #12]
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	e7fd      	b.n	80044d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	3318      	adds	r3, #24
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe fd62 	bl	8002fa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004558 <xTaskRemoveFromEventList+0xb0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11c      	bne.n	8004522 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe fd59 	bl	8002fa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	2201      	movs	r2, #1
 80044f8:	409a      	lsls	r2, r3
 80044fa:	4b18      	ldr	r3, [pc, #96]	@ (800455c <xTaskRemoveFromEventList+0xb4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4313      	orrs	r3, r2
 8004500:	4a16      	ldr	r2, [pc, #88]	@ (800455c <xTaskRemoveFromEventList+0xb4>)
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4a13      	ldr	r2, [pc, #76]	@ (8004560 <xTaskRemoveFromEventList+0xb8>)
 8004512:	441a      	add	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	3304      	adds	r3, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f7fe fce5 	bl	8002eea <vListInsertEnd>
 8004520:	e005      	b.n	800452e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	3318      	adds	r3, #24
 8004526:	4619      	mov	r1, r3
 8004528:	480e      	ldr	r0, [pc, #56]	@ (8004564 <xTaskRemoveFromEventList+0xbc>)
 800452a:	f7fe fcde 	bl	8002eea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004532:	4b0d      	ldr	r3, [pc, #52]	@ (8004568 <xTaskRemoveFromEventList+0xc0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	429a      	cmp	r2, r3
 800453a:	d905      	bls.n	8004548 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800453c:	2301      	movs	r3, #1
 800453e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004540:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <xTaskRemoveFromEventList+0xc4>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e001      	b.n	800454c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800454c:	697b      	ldr	r3, [r7, #20]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000214 	.word	0x20000214
 800455c:	200001f4 	.word	0x200001f4
 8004560:	20000118 	.word	0x20000118
 8004564:	200001ac 	.word	0x200001ac
 8004568:	20000114 	.word	0x20000114
 800456c:	20000200 	.word	0x20000200

08004570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004578:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <vTaskInternalSetTimeOutState+0x24>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <vTaskInternalSetTimeOutState+0x28>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	605a      	str	r2, [r3, #4]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	20000204 	.word	0x20000204
 8004598:	200001f0 	.word	0x200001f0

0800459c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	613b      	str	r3, [r7, #16]
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	60fb      	str	r3, [r7, #12]
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	e7fd      	b.n	80045de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80045e2:	f000 ff89 	bl	80054f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045e6:	4b1d      	ldr	r3, [pc, #116]	@ (800465c <xTaskCheckForTimeOut+0xc0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d102      	bne.n	8004606 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e023      	b.n	800464e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <xTaskCheckForTimeOut+0xc4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d007      	beq.n	8004622 <xTaskCheckForTimeOut+0x86>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	429a      	cmp	r2, r3
 800461a:	d302      	bcc.n	8004622 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800461c:	2301      	movs	r3, #1
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	e015      	b.n	800464e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	429a      	cmp	r2, r3
 800462a:	d20b      	bcs.n	8004644 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	1ad2      	subs	r2, r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff ff99 	bl	8004570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e004      	b.n	800464e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800464a:	2301      	movs	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800464e:	f000 ff85 	bl	800555c <vPortExitCritical>

	return xReturn;
 8004652:	69fb      	ldr	r3, [r7, #28]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	200001f0 	.word	0x200001f0
 8004660:	20000204 	.word	0x20000204

08004664 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004668:	4b03      	ldr	r3, [pc, #12]	@ (8004678 <vTaskMissedYield+0x14>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	20000200 	.word	0x20000200

0800467c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004684:	f000 f852 	bl	800472c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004688:	4b06      	ldr	r3, [pc, #24]	@ (80046a4 <prvIdleTask+0x28>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d9f9      	bls.n	8004684 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004690:	4b05      	ldr	r3, [pc, #20]	@ (80046a8 <prvIdleTask+0x2c>)
 8004692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046a0:	e7f0      	b.n	8004684 <prvIdleTask+0x8>
 80046a2:	bf00      	nop
 80046a4:	20000118 	.word	0x20000118
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	e00c      	b.n	80046d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4a12      	ldr	r2, [pc, #72]	@ (800470c <prvInitialiseTaskLists+0x60>)
 80046c4:	4413      	add	r3, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fbe2 	bl	8002e90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3301      	adds	r3, #1
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d9ef      	bls.n	80046b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046d8:	480d      	ldr	r0, [pc, #52]	@ (8004710 <prvInitialiseTaskLists+0x64>)
 80046da:	f7fe fbd9 	bl	8002e90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046de:	480d      	ldr	r0, [pc, #52]	@ (8004714 <prvInitialiseTaskLists+0x68>)
 80046e0:	f7fe fbd6 	bl	8002e90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046e4:	480c      	ldr	r0, [pc, #48]	@ (8004718 <prvInitialiseTaskLists+0x6c>)
 80046e6:	f7fe fbd3 	bl	8002e90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046ea:	480c      	ldr	r0, [pc, #48]	@ (800471c <prvInitialiseTaskLists+0x70>)
 80046ec:	f7fe fbd0 	bl	8002e90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046f0:	480b      	ldr	r0, [pc, #44]	@ (8004720 <prvInitialiseTaskLists+0x74>)
 80046f2:	f7fe fbcd 	bl	8002e90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <prvInitialiseTaskLists+0x78>)
 80046f8:	4a05      	ldr	r2, [pc, #20]	@ (8004710 <prvInitialiseTaskLists+0x64>)
 80046fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <prvInitialiseTaskLists+0x7c>)
 80046fe:	4a05      	ldr	r2, [pc, #20]	@ (8004714 <prvInitialiseTaskLists+0x68>)
 8004700:	601a      	str	r2, [r3, #0]
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000118 	.word	0x20000118
 8004710:	2000017c 	.word	0x2000017c
 8004714:	20000190 	.word	0x20000190
 8004718:	200001ac 	.word	0x200001ac
 800471c:	200001c0 	.word	0x200001c0
 8004720:	200001d8 	.word	0x200001d8
 8004724:	200001a4 	.word	0x200001a4
 8004728:	200001a8 	.word	0x200001a8

0800472c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004732:	e019      	b.n	8004768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004734:	f000 fee0 	bl	80054f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004738:	4b10      	ldr	r3, [pc, #64]	@ (800477c <prvCheckTasksWaitingTermination+0x50>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fc2d 	bl	8002fa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800474a:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <prvCheckTasksWaitingTermination+0x54>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3b01      	subs	r3, #1
 8004750:	4a0b      	ldr	r2, [pc, #44]	@ (8004780 <prvCheckTasksWaitingTermination+0x54>)
 8004752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <prvCheckTasksWaitingTermination+0x58>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3b01      	subs	r3, #1
 800475a:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <prvCheckTasksWaitingTermination+0x58>)
 800475c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800475e:	f000 fefd 	bl	800555c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f810 	bl	8004788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004768:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <prvCheckTasksWaitingTermination+0x58>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e1      	bne.n	8004734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	200001c0 	.word	0x200001c0
 8004780:	200001ec 	.word	0x200001ec
 8004784:	200001d4 	.word	0x200001d4

08004788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004794:	4618      	mov	r0, r3
 8004796:	f001 f899 	bl	80058cc <vPortFree>
			vPortFree( pxTCB );
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f001 f896 	bl	80058cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ae:	4b0c      	ldr	r3, [pc, #48]	@ (80047e0 <prvResetNextTaskUnblockTime+0x38>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d104      	bne.n	80047c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047b8:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <prvResetNextTaskUnblockTime+0x3c>)
 80047ba:	f04f 32ff 	mov.w	r2, #4294967295
 80047be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047c0:	e008      	b.n	80047d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c2:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <prvResetNextTaskUnblockTime+0x38>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4a04      	ldr	r2, [pc, #16]	@ (80047e4 <prvResetNextTaskUnblockTime+0x3c>)
 80047d2:	6013      	str	r3, [r2, #0]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	200001a4 	.word	0x200001a4
 80047e4:	2000020c 	.word	0x2000020c

080047e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047ee:	4b0b      	ldr	r3, [pc, #44]	@ (800481c <xTaskGetSchedulerState+0x34>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047f6:	2301      	movs	r3, #1
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	e008      	b.n	800480e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fc:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <xTaskGetSchedulerState+0x38>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d102      	bne.n	800480a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004804:	2302      	movs	r3, #2
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	e001      	b.n	800480e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800480e:	687b      	ldr	r3, [r7, #4]
	}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	200001f8 	.word	0x200001f8
 8004820:	20000214 	.word	0x20000214

08004824 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d069      	beq.n	800490e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483e:	4b36      	ldr	r3, [pc, #216]	@ (8004918 <xTaskPriorityInherit+0xf4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	429a      	cmp	r2, r3
 8004846:	d259      	bcs.n	80048fc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	db06      	blt.n	800485e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004850:	4b31      	ldr	r3, [pc, #196]	@ (8004918 <xTaskPriorityInherit+0xf4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004856:	f1c3 0205 	rsb	r2, r3, #5
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6959      	ldr	r1, [r3, #20]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4a2b      	ldr	r2, [pc, #172]	@ (800491c <xTaskPriorityInherit+0xf8>)
 8004870:	4413      	add	r3, r2
 8004872:	4299      	cmp	r1, r3
 8004874:	d13a      	bne.n	80048ec <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	3304      	adds	r3, #4
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe fb92 	bl	8002fa4 <uxListRemove>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d115      	bne.n	80048b2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488a:	4924      	ldr	r1, [pc, #144]	@ (800491c <xTaskPriorityInherit+0xf8>)
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <xTaskPriorityInherit+0x8e>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	2201      	movs	r2, #1
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43da      	mvns	r2, r3
 80048a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004920 <xTaskPriorityInherit+0xfc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4013      	ands	r3, r2
 80048ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004920 <xTaskPriorityInherit+0xfc>)
 80048b0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048b2:	4b19      	ldr	r3, [pc, #100]	@ (8004918 <xTaskPriorityInherit+0xf4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	2201      	movs	r2, #1
 80048c2:	409a      	lsls	r2, r3
 80048c4:	4b16      	ldr	r3, [pc, #88]	@ (8004920 <xTaskPriorityInherit+0xfc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	4a15      	ldr	r2, [pc, #84]	@ (8004920 <xTaskPriorityInherit+0xfc>)
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4a10      	ldr	r2, [pc, #64]	@ (800491c <xTaskPriorityInherit+0xf8>)
 80048dc:	441a      	add	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7fe fb00 	bl	8002eea <vListInsertEnd>
 80048ea:	e004      	b.n	80048f6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <xTaskPriorityInherit+0xf4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80048f6:	2301      	movs	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e008      	b.n	800490e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <xTaskPriorityInherit+0xf4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004906:	429a      	cmp	r2, r3
 8004908:	d201      	bcs.n	800490e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800490a:	2301      	movs	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800490e:	68fb      	ldr	r3, [r7, #12]
	}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000114 	.word	0x20000114
 800491c:	20000118 	.word	0x20000118
 8004920:	200001f4 	.word	0x200001f4

08004924 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d070      	beq.n	8004a1c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800493a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a28 <xTaskPriorityDisinherit+0x104>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	429a      	cmp	r2, r3
 8004942:	d00b      	beq.n	800495c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	60fb      	str	r3, [r7, #12]
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	60bb      	str	r3, [r7, #8]
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004980:	1e5a      	subs	r2, r3, #1
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498e:	429a      	cmp	r2, r3
 8004990:	d044      	beq.n	8004a1c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d140      	bne.n	8004a1c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	3304      	adds	r3, #4
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe fb00 	bl	8002fa4 <uxListRemove>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d115      	bne.n	80049d6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ae:	491f      	ldr	r1, [pc, #124]	@ (8004a2c <xTaskPriorityDisinherit+0x108>)
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <xTaskPriorityDisinherit+0xb2>
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	2201      	movs	r2, #1
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43da      	mvns	r2, r3
 80049cc:	4b18      	ldr	r3, [pc, #96]	@ (8004a30 <xTaskPriorityDisinherit+0x10c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4013      	ands	r3, r2
 80049d2:	4a17      	ldr	r2, [pc, #92]	@ (8004a30 <xTaskPriorityDisinherit+0x10c>)
 80049d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	f1c3 0205 	rsb	r2, r3, #5
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	2201      	movs	r2, #1
 80049f0:	409a      	lsls	r2, r3
 80049f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <xTaskPriorityDisinherit+0x10c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a30 <xTaskPriorityDisinherit+0x10c>)
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4a08      	ldr	r2, [pc, #32]	@ (8004a2c <xTaskPriorityDisinherit+0x108>)
 8004a0a:	441a      	add	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f7fe fa69 	bl	8002eea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a1c:	697b      	ldr	r3, [r7, #20]
	}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000114 	.word	0x20000114
 8004a2c:	20000118 	.word	0x20000118
 8004a30:	200001f4 	.word	0x200001f4

08004a34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004a42:	2301      	movs	r3, #1
 8004a44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8085 	beq.w	8004b58 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	60fb      	str	r3, [r7, #12]
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	e7fd      	b.n	8004a6a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d902      	bls.n	8004a7e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	e002      	b.n	8004a84 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d064      	beq.n	8004b58 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d15f      	bne.n	8004b58 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004a98:	4b31      	ldr	r3, [pc, #196]	@ (8004b60 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d10b      	bne.n	8004aba <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60bb      	str	r3, [r7, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	db04      	blt.n	8004ad8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f1c3 0205 	rsb	r2, r3, #5
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	6959      	ldr	r1, [r3, #20]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b64 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004ae8:	4413      	add	r3, r2
 8004aea:	4299      	cmp	r1, r3
 8004aec:	d134      	bne.n	8004b58 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fa56 	bl	8002fa4 <uxListRemove>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d115      	bne.n	8004b2a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b02:	4918      	ldr	r1, [pc, #96]	@ (8004b64 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	2201      	movs	r2, #1
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43da      	mvns	r2, r3
 8004b20:	4b11      	ldr	r3, [pc, #68]	@ (8004b68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4013      	ands	r3, r2
 8004b26:	4a10      	ldr	r2, [pc, #64]	@ (8004b68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004b28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	2201      	movs	r2, #1
 8004b30:	409a      	lsls	r2, r3
 8004b32:	4b0d      	ldr	r3, [pc, #52]	@ (8004b68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	4a0b      	ldr	r2, [pc, #44]	@ (8004b68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4a06      	ldr	r2, [pc, #24]	@ (8004b64 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004b4a:	441a      	add	r2, r3
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f7fe f9c9 	bl	8002eea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b58:	bf00      	nop
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000114 	.word	0x20000114
 8004b64:	20000118 	.word	0x20000118
 8004b68:	200001f4 	.word	0x200001f4

08004b6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004b70:	4b07      	ldr	r3, [pc, #28]	@ (8004b90 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004b78:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b7e:	3201      	adds	r2, #1
 8004b80:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 8004b82:	4b03      	ldr	r3, [pc, #12]	@ (8004b90 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b84:	681b      	ldr	r3, [r3, #0]
	}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	20000114 	.word	0x20000114

08004b94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b9e:	4b29      	ldr	r3, [pc, #164]	@ (8004c44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ba4:	4b28      	ldr	r3, [pc, #160]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe f9fa 	bl	8002fa4 <uxListRemove>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10b      	bne.n	8004bce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bb6:	4b24      	ldr	r3, [pc, #144]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	4b21      	ldr	r3, [pc, #132]	@ (8004c4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	4a20      	ldr	r2, [pc, #128]	@ (8004c4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bcc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d10a      	bne.n	8004bec <prvAddCurrentTaskToDelayedList+0x58>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4619      	mov	r1, r3
 8004be4:	481a      	ldr	r0, [pc, #104]	@ (8004c50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004be6:	f7fe f980 	bl	8002eea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bea:	e026      	b.n	8004c3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bf4:	4b14      	ldr	r3, [pc, #80]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d209      	bcs.n	8004c18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c04:	4b13      	ldr	r3, [pc, #76]	@ (8004c54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b0f      	ldr	r3, [pc, #60]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7fe f98e 	bl	8002f32 <vListInsert>
}
 8004c16:	e010      	b.n	8004c3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c18:	4b0f      	ldr	r3, [pc, #60]	@ (8004c58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f7fe f984 	bl	8002f32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d202      	bcs.n	8004c3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c34:	4a09      	ldr	r2, [pc, #36]	@ (8004c5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6013      	str	r3, [r2, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200001f0 	.word	0x200001f0
 8004c48:	20000114 	.word	0x20000114
 8004c4c:	200001f4 	.word	0x200001f4
 8004c50:	200001d8 	.word	0x200001d8
 8004c54:	200001a8 	.word	0x200001a8
 8004c58:	200001a4 	.word	0x200001a4
 8004c5c:	2000020c 	.word	0x2000020c

08004c60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c6a:	f000 fae1 	bl	8005230 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c6e:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <xTimerCreateTimerTask+0x58>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004c76:	4b11      	ldr	r3, [pc, #68]	@ (8004cbc <xTimerCreateTimerTask+0x5c>)
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004c84:	490e      	ldr	r1, [pc, #56]	@ (8004cc0 <xTimerCreateTimerTask+0x60>)
 8004c86:	480f      	ldr	r0, [pc, #60]	@ (8004cc4 <xTimerCreateTimerTask+0x64>)
 8004c88:	f7ff f826 	bl	8003cd8 <xTaskCreate>
 8004c8c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	603b      	str	r3, [r7, #0]
}
 8004ca6:	bf00      	nop
 8004ca8:	bf00      	nop
 8004caa:	e7fd      	b.n	8004ca8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004cac:	687b      	ldr	r3, [r7, #4]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000248 	.word	0x20000248
 8004cbc:	2000024c 	.word	0x2000024c
 8004cc0:	08005bac 	.word	0x08005bac
 8004cc4:	08004e01 	.word	0x08004e01

08004cc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	@ 0x28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	623b      	str	r3, [r7, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	e7fd      	b.n	8004cf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cf8:	4b19      	ldr	r3, [pc, #100]	@ (8004d60 <xTimerGenericCommand+0x98>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d02a      	beq.n	8004d56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	dc18      	bgt.n	8004d44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d12:	f7ff fd69 	bl	80047e8 <xTaskGetSchedulerState>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d109      	bne.n	8004d30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d1c:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <xTimerGenericCommand+0x98>)
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	f107 0114 	add.w	r1, r7, #20
 8004d24:	2300      	movs	r3, #0
 8004d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d28:	f7fe fa30 	bl	800318c <xQueueGenericSend>
 8004d2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d2e:	e012      	b.n	8004d56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <xTimerGenericCommand+0x98>)
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	f107 0114 	add.w	r1, r7, #20
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f7fe fa26 	bl	800318c <xQueueGenericSend>
 8004d40:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d42:	e008      	b.n	8004d56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d44:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <xTimerGenericCommand+0x98>)
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	f107 0114 	add.w	r1, r7, #20
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	f7fe fb1e 	bl	8003390 <xQueueGenericSendFromISR>
 8004d54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3728      	adds	r7, #40	@ 0x28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000248 	.word	0x20000248

08004d64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6e:	4b23      	ldr	r3, [pc, #140]	@ (8004dfc <prvProcessExpiredTimer+0x98>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fe f911 	bl	8002fa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d023      	beq.n	8004dd8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	18d1      	adds	r1, r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	6978      	ldr	r0, [r7, #20]
 8004d9e:	f000 f8d5 	bl	8004f4c <prvInsertTimerInActiveList>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d020      	beq.n	8004dea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004da8:	2300      	movs	r3, #0
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	2300      	movs	r3, #0
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	2100      	movs	r1, #0
 8004db2:	6978      	ldr	r0, [r7, #20]
 8004db4:	f7ff ff88 	bl	8004cc8 <xTimerGenericCommand>
 8004db8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d114      	bne.n	8004dea <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
}
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	6978      	ldr	r0, [r7, #20]
 8004df0:	4798      	blx	r3
}
 8004df2:	bf00      	nop
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000240 	.word	0x20000240

08004e00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e08:	f107 0308 	add.w	r3, r7, #8
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 f859 	bl	8004ec4 <prvGetNextExpireTime>
 8004e12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4619      	mov	r1, r3
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f805 	bl	8004e28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e1e:	f000 f8d7 	bl	8004fd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e22:	bf00      	nop
 8004e24:	e7f0      	b.n	8004e08 <prvTimerTask+0x8>
	...

08004e28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e32:	f7ff f915 	bl	8004060 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e36:	f107 0308 	add.w	r3, r7, #8
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f866 	bl	8004f0c <prvSampleTimeNow>
 8004e40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d130      	bne.n	8004eaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <prvProcessTimerOrBlockTask+0x3c>
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d806      	bhi.n	8004e64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e56:	f7ff f911 	bl	800407c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff81 	bl	8004d64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e62:	e024      	b.n	8004eae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d008      	beq.n	8004e7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e6a:	4b13      	ldr	r3, [pc, #76]	@ (8004eb8 <prvProcessTimerOrBlockTask+0x90>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <prvProcessTimerOrBlockTask+0x50>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <prvProcessTimerOrBlockTask+0x52>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <prvProcessTimerOrBlockTask+0x94>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f7fe fef1 	bl	8003c70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e8e:	f7ff f8f5 	bl	800407c <xTaskResumeAll>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e98:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <prvProcessTimerOrBlockTask+0x98>)
 8004e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	f3bf 8f6f 	isb	sy
}
 8004ea8:	e001      	b.n	8004eae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004eaa:	f7ff f8e7 	bl	800407c <xTaskResumeAll>
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000244 	.word	0x20000244
 8004ebc:	20000248 	.word	0x20000248
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <prvGetNextExpireTime+0x44>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <prvGetNextExpireTime+0x16>
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	e000      	b.n	8004edc <prvGetNextExpireTime+0x18>
 8004eda:	2200      	movs	r2, #0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d105      	bne.n	8004ef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ee8:	4b07      	ldr	r3, [pc, #28]	@ (8004f08 <prvGetNextExpireTime+0x44>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	e001      	b.n	8004ef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000240 	.word	0x20000240

08004f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f14:	f7ff f950 	bl	80041b8 <xTaskGetTickCount>
 8004f18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <prvSampleTimeNow+0x3c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d205      	bcs.n	8004f30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f24:	f000 f91e 	bl	8005164 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e002      	b.n	8004f36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f36:	4a04      	ldr	r2, [pc, #16]	@ (8004f48 <prvSampleTimeNow+0x3c>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000250 	.word	0x20000250

08004f4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d812      	bhi.n	8004f98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	1ad2      	subs	r2, r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d302      	bcc.n	8004f86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	e01b      	b.n	8004fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f86:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <prvInsertTimerInActiveList+0x7c>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7fd ffce 	bl	8002f32 <vListInsert>
 8004f96:	e012      	b.n	8004fbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d206      	bcs.n	8004fae <prvInsertTimerInActiveList+0x62>
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e007      	b.n	8004fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fae:	4b07      	ldr	r3, [pc, #28]	@ (8004fcc <prvInsertTimerInActiveList+0x80>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f7fd ffba 	bl	8002f32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004fbe:	697b      	ldr	r3, [r7, #20]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000244 	.word	0x20000244
 8004fcc:	20000240 	.word	0x20000240

08004fd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	@ 0x30
 8004fd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fd6:	e0b2      	b.n	800513e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f2c0 80af 	blt.w	800513e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fd ffd7 	bl	8002fa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ff6:	1d3b      	adds	r3, r7, #4
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff ff87 	bl	8004f0c <prvSampleTimeNow>
 8004ffe:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b09      	cmp	r3, #9
 8005004:	f200 8098 	bhi.w	8005138 <prvProcessReceivedCommands+0x168>
 8005008:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <prvProcessReceivedCommands+0x40>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005039 	.word	0x08005039
 8005014:	08005039 	.word	0x08005039
 8005018:	08005039 	.word	0x08005039
 800501c:	080050af 	.word	0x080050af
 8005020:	080050c3 	.word	0x080050c3
 8005024:	0800510f 	.word	0x0800510f
 8005028:	08005039 	.word	0x08005039
 800502c:	08005039 	.word	0x08005039
 8005030:	080050af 	.word	0x080050af
 8005034:	080050c3 	.word	0x080050c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	b2da      	uxtb	r2, r3
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	18d1      	adds	r1, r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a3a      	ldr	r2, [r7, #32]
 8005056:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005058:	f7ff ff78 	bl	8004f4c <prvInsertTimerInActiveList>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d06c      	beq.n	800513c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005068:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d061      	beq.n	800513c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	441a      	add	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	2100      	movs	r1, #0
 8005088:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800508a:	f7ff fe1d 	bl	8004cc8 <xTimerGenericCommand>
 800508e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d152      	bne.n	800513c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	61bb      	str	r3, [r7, #24]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80050c0:	e03d      	b.n	800513e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <prvProcessReceivedCommands+0x12a>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	617b      	str	r3, [r7, #20]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	18d1      	adds	r1, r2, r3
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	6a3a      	ldr	r2, [r7, #32]
 8005106:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005108:	f7ff ff20 	bl	8004f4c <prvInsertTimerInActiveList>
					break;
 800510c:	e017      	b.n	800513e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d103      	bne.n	8005124 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800511c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800511e:	f000 fbd5 	bl	80058cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005122:	e00c      	b.n	800513e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005136:	e002      	b.n	800513e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <prvProcessReceivedCommands+0x16e>
					break;
 800513c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800513e:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <prvProcessReceivedCommands+0x190>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f107 0108 	add.w	r1, r7, #8
 8005146:	2200      	movs	r2, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe fa4d 	bl	80035e8 <xQueueReceive>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	f47f af41 	bne.w	8004fd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005156:	bf00      	nop
 8005158:	bf00      	nop
 800515a:	3728      	adds	r7, #40	@ 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000248 	.word	0x20000248

08005164 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800516a:	e049      	b.n	8005200 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800516c:	4b2e      	ldr	r3, [pc, #184]	@ (8005228 <prvSwitchTimerLists+0xc4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005176:	4b2c      	ldr	r3, [pc, #176]	@ (8005228 <prvSwitchTimerLists+0xc4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3304      	adds	r3, #4
 8005184:	4618      	mov	r0, r3
 8005186:	f7fd ff0d 	bl	8002fa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02f      	beq.n	8005200 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d90e      	bls.n	80051d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051be:	4b1a      	ldr	r3, [pc, #104]	@ (8005228 <prvSwitchTimerLists+0xc4>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7fd feb2 	bl	8002f32 <vListInsert>
 80051ce:	e017      	b.n	8005200 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051d0:	2300      	movs	r3, #0
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	2100      	movs	r1, #0
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff fd74 	bl	8004cc8 <xTimerGenericCommand>
 80051e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	603b      	str	r3, [r7, #0]
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	e7fd      	b.n	80051fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005200:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <prvSwitchTimerLists+0xc4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1b0      	bne.n	800516c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800520a:	4b07      	ldr	r3, [pc, #28]	@ (8005228 <prvSwitchTimerLists+0xc4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005210:	4b06      	ldr	r3, [pc, #24]	@ (800522c <prvSwitchTimerLists+0xc8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a04      	ldr	r2, [pc, #16]	@ (8005228 <prvSwitchTimerLists+0xc4>)
 8005216:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005218:	4a04      	ldr	r2, [pc, #16]	@ (800522c <prvSwitchTimerLists+0xc8>)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	6013      	str	r3, [r2, #0]
}
 800521e:	bf00      	nop
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000240 	.word	0x20000240
 800522c:	20000244 	.word	0x20000244

08005230 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005234:	f000 f960 	bl	80054f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005238:	4b12      	ldr	r3, [pc, #72]	@ (8005284 <prvCheckForValidListAndQueue+0x54>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d11d      	bne.n	800527c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005240:	4811      	ldr	r0, [pc, #68]	@ (8005288 <prvCheckForValidListAndQueue+0x58>)
 8005242:	f7fd fe25 	bl	8002e90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005246:	4811      	ldr	r0, [pc, #68]	@ (800528c <prvCheckForValidListAndQueue+0x5c>)
 8005248:	f7fd fe22 	bl	8002e90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800524c:	4b10      	ldr	r3, [pc, #64]	@ (8005290 <prvCheckForValidListAndQueue+0x60>)
 800524e:	4a0e      	ldr	r2, [pc, #56]	@ (8005288 <prvCheckForValidListAndQueue+0x58>)
 8005250:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005252:	4b10      	ldr	r3, [pc, #64]	@ (8005294 <prvCheckForValidListAndQueue+0x64>)
 8005254:	4a0d      	ldr	r2, [pc, #52]	@ (800528c <prvCheckForValidListAndQueue+0x5c>)
 8005256:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005258:	2200      	movs	r2, #0
 800525a:	210c      	movs	r1, #12
 800525c:	200a      	movs	r0, #10
 800525e:	f7fd ff35 	bl	80030cc <xQueueGenericCreate>
 8005262:	4603      	mov	r3, r0
 8005264:	4a07      	ldr	r2, [pc, #28]	@ (8005284 <prvCheckForValidListAndQueue+0x54>)
 8005266:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005268:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <prvCheckForValidListAndQueue+0x54>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005270:	4b04      	ldr	r3, [pc, #16]	@ (8005284 <prvCheckForValidListAndQueue+0x54>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4908      	ldr	r1, [pc, #32]	@ (8005298 <prvCheckForValidListAndQueue+0x68>)
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fcd0 	bl	8003c1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800527c:	f000 f96e 	bl	800555c <vPortExitCritical>
}
 8005280:	bf00      	nop
 8005282:	bd80      	pop	{r7, pc}
 8005284:	20000248 	.word	0x20000248
 8005288:	20000218 	.word	0x20000218
 800528c:	2000022c 	.word	0x2000022c
 8005290:	20000240 	.word	0x20000240
 8005294:	20000244 	.word	0x20000244
 8005298:	08005bb4 	.word	0x08005bb4

0800529c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3b04      	subs	r3, #4
 80052ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80052b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3b04      	subs	r3, #4
 80052ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f023 0201 	bic.w	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3b04      	subs	r3, #4
 80052ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005300 <pxPortInitialiseStack+0x64>)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3b14      	subs	r3, #20
 80052d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3b04      	subs	r3, #4
 80052e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f06f 0202 	mvn.w	r2, #2
 80052ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3b20      	subs	r3, #32
 80052f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052f2:	68fb      	ldr	r3, [r7, #12]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	08005305 	.word	0x08005305

08005304 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800530e:	4b13      	ldr	r3, [pc, #76]	@ (800535c <prvTaskExitError+0x58>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005316:	d00b      	beq.n	8005330 <prvTaskExitError+0x2c>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	60fb      	str	r3, [r7, #12]
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	e7fd      	b.n	800532c <prvTaskExitError+0x28>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	60bb      	str	r3, [r7, #8]
}
 8005342:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005344:	bf00      	nop
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0fc      	beq.n	8005346 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	2000000c 	.word	0x2000000c

08005360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005360:	4b07      	ldr	r3, [pc, #28]	@ (8005380 <pxCurrentTCBConst2>)
 8005362:	6819      	ldr	r1, [r3, #0]
 8005364:	6808      	ldr	r0, [r1, #0]
 8005366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536a:	f380 8809 	msr	PSP, r0
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8811 	msr	BASEPRI, r0
 800537a:	4770      	bx	lr
 800537c:	f3af 8000 	nop.w

08005380 <pxCurrentTCBConst2>:
 8005380:	20000114 	.word	0x20000114
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005388:	4808      	ldr	r0, [pc, #32]	@ (80053ac <prvPortStartFirstTask+0x24>)
 800538a:	6800      	ldr	r0, [r0, #0]
 800538c:	6800      	ldr	r0, [r0, #0]
 800538e:	f380 8808 	msr	MSP, r0
 8005392:	f04f 0000 	mov.w	r0, #0
 8005396:	f380 8814 	msr	CONTROL, r0
 800539a:	b662      	cpsie	i
 800539c:	b661      	cpsie	f
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	df00      	svc	0
 80053a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053aa:	bf00      	nop
 80053ac:	e000ed08 	.word	0xe000ed08

080053b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053b6:	4b47      	ldr	r3, [pc, #284]	@ (80054d4 <xPortStartScheduler+0x124>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a47      	ldr	r2, [pc, #284]	@ (80054d8 <xPortStartScheduler+0x128>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10b      	bne.n	80053d8 <xPortStartScheduler+0x28>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	613b      	str	r3, [r7, #16]
}
 80053d2:	bf00      	nop
 80053d4:	bf00      	nop
 80053d6:	e7fd      	b.n	80053d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053d8:	4b3e      	ldr	r3, [pc, #248]	@ (80054d4 <xPortStartScheduler+0x124>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a3f      	ldr	r2, [pc, #252]	@ (80054dc <xPortStartScheduler+0x12c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d10b      	bne.n	80053fa <xPortStartScheduler+0x4a>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	60fb      	str	r3, [r7, #12]
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053fa:	4b39      	ldr	r3, [pc, #228]	@ (80054e0 <xPortStartScheduler+0x130>)
 80053fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	22ff      	movs	r2, #255	@ 0xff
 800540a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800541c:	b2da      	uxtb	r2, r3
 800541e:	4b31      	ldr	r3, [pc, #196]	@ (80054e4 <xPortStartScheduler+0x134>)
 8005420:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005422:	4b31      	ldr	r3, [pc, #196]	@ (80054e8 <xPortStartScheduler+0x138>)
 8005424:	2207      	movs	r2, #7
 8005426:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005428:	e009      	b.n	800543e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800542a:	4b2f      	ldr	r3, [pc, #188]	@ (80054e8 <xPortStartScheduler+0x138>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3b01      	subs	r3, #1
 8005430:	4a2d      	ldr	r2, [pc, #180]	@ (80054e8 <xPortStartScheduler+0x138>)
 8005432:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	b2db      	uxtb	r3, r3
 800543c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005446:	2b80      	cmp	r3, #128	@ 0x80
 8005448:	d0ef      	beq.n	800542a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800544a:	4b27      	ldr	r3, [pc, #156]	@ (80054e8 <xPortStartScheduler+0x138>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1c3 0307 	rsb	r3, r3, #7
 8005452:	2b04      	cmp	r3, #4
 8005454:	d00b      	beq.n	800546e <xPortStartScheduler+0xbe>
	__asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	60bb      	str	r3, [r7, #8]
}
 8005468:	bf00      	nop
 800546a:	bf00      	nop
 800546c:	e7fd      	b.n	800546a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800546e:	4b1e      	ldr	r3, [pc, #120]	@ (80054e8 <xPortStartScheduler+0x138>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	4a1c      	ldr	r2, [pc, #112]	@ (80054e8 <xPortStartScheduler+0x138>)
 8005476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005478:	4b1b      	ldr	r3, [pc, #108]	@ (80054e8 <xPortStartScheduler+0x138>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005480:	4a19      	ldr	r2, [pc, #100]	@ (80054e8 <xPortStartScheduler+0x138>)
 8005482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	b2da      	uxtb	r2, r3
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800548c:	4b17      	ldr	r3, [pc, #92]	@ (80054ec <xPortStartScheduler+0x13c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a16      	ldr	r2, [pc, #88]	@ (80054ec <xPortStartScheduler+0x13c>)
 8005492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005498:	4b14      	ldr	r3, [pc, #80]	@ (80054ec <xPortStartScheduler+0x13c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a13      	ldr	r2, [pc, #76]	@ (80054ec <xPortStartScheduler+0x13c>)
 800549e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80054a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054a4:	f000 f8da 	bl	800565c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054a8:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <xPortStartScheduler+0x140>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054ae:	f000 f8f9 	bl	80056a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054b2:	4b10      	ldr	r3, [pc, #64]	@ (80054f4 <xPortStartScheduler+0x144>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a0f      	ldr	r2, [pc, #60]	@ (80054f4 <xPortStartScheduler+0x144>)
 80054b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80054bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054be:	f7ff ff63 	bl	8005388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054c2:	f7fe ff43 	bl	800434c <vTaskSwitchContext>
	prvTaskExitError();
 80054c6:	f7ff ff1d 	bl	8005304 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	e000ed00 	.word	0xe000ed00
 80054d8:	410fc271 	.word	0x410fc271
 80054dc:	410fc270 	.word	0x410fc270
 80054e0:	e000e400 	.word	0xe000e400
 80054e4:	20000254 	.word	0x20000254
 80054e8:	20000258 	.word	0x20000258
 80054ec:	e000ed20 	.word	0xe000ed20
 80054f0:	2000000c 	.word	0x2000000c
 80054f4:	e000ef34 	.word	0xe000ef34

080054f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	607b      	str	r3, [r7, #4]
}
 8005510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005512:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <vPortEnterCritical+0x5c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3301      	adds	r3, #1
 8005518:	4a0e      	ldr	r2, [pc, #56]	@ (8005554 <vPortEnterCritical+0x5c>)
 800551a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800551c:	4b0d      	ldr	r3, [pc, #52]	@ (8005554 <vPortEnterCritical+0x5c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d110      	bne.n	8005546 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005524:	4b0c      	ldr	r3, [pc, #48]	@ (8005558 <vPortEnterCritical+0x60>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00b      	beq.n	8005546 <vPortEnterCritical+0x4e>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	603b      	str	r3, [r7, #0]
}
 8005540:	bf00      	nop
 8005542:	bf00      	nop
 8005544:	e7fd      	b.n	8005542 <vPortEnterCritical+0x4a>
	}
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	2000000c 	.word	0x2000000c
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005562:	4b12      	ldr	r3, [pc, #72]	@ (80055ac <vPortExitCritical+0x50>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <vPortExitCritical+0x26>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	607b      	str	r3, [r7, #4]
}
 800557c:	bf00      	nop
 800557e:	bf00      	nop
 8005580:	e7fd      	b.n	800557e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005582:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <vPortExitCritical+0x50>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3b01      	subs	r3, #1
 8005588:	4a08      	ldr	r2, [pc, #32]	@ (80055ac <vPortExitCritical+0x50>)
 800558a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800558c:	4b07      	ldr	r3, [pc, #28]	@ (80055ac <vPortExitCritical+0x50>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d105      	bne.n	80055a0 <vPortExitCritical+0x44>
 8005594:	2300      	movs	r3, #0
 8005596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f383 8811 	msr	BASEPRI, r3
}
 800559e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	2000000c 	.word	0x2000000c

080055b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055b0:	f3ef 8009 	mrs	r0, PSP
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	4b15      	ldr	r3, [pc, #84]	@ (8005610 <pxCurrentTCBConst>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	f01e 0f10 	tst.w	lr, #16
 80055c0:	bf08      	it	eq
 80055c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ca:	6010      	str	r0, [r2, #0]
 80055cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80055d4:	f380 8811 	msr	BASEPRI, r0
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f7fe feb4 	bl	800434c <vTaskSwitchContext>
 80055e4:	f04f 0000 	mov.w	r0, #0
 80055e8:	f380 8811 	msr	BASEPRI, r0
 80055ec:	bc09      	pop	{r0, r3}
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	6808      	ldr	r0, [r1, #0]
 80055f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f6:	f01e 0f10 	tst.w	lr, #16
 80055fa:	bf08      	it	eq
 80055fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005600:	f380 8809 	msr	PSP, r0
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	f3af 8000 	nop.w

08005610 <pxCurrentTCBConst>:
 8005610:	20000114 	.word	0x20000114
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop

08005618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
}
 8005630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005632:	f7fe fdd1 	bl	80041d8 <xTaskIncrementTick>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800563c:	4b06      	ldr	r3, [pc, #24]	@ (8005658 <SysTick_Handler+0x40>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f383 8811 	msr	BASEPRI, r3
}
 800564e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005660:	4b0b      	ldr	r3, [pc, #44]	@ (8005690 <vPortSetupTimerInterrupt+0x34>)
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005666:	4b0b      	ldr	r3, [pc, #44]	@ (8005694 <vPortSetupTimerInterrupt+0x38>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800566c:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <vPortSetupTimerInterrupt+0x3c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a0a      	ldr	r2, [pc, #40]	@ (800569c <vPortSetupTimerInterrupt+0x40>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	099b      	lsrs	r3, r3, #6
 8005678:	4a09      	ldr	r2, [pc, #36]	@ (80056a0 <vPortSetupTimerInterrupt+0x44>)
 800567a:	3b01      	subs	r3, #1
 800567c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800567e:	4b04      	ldr	r3, [pc, #16]	@ (8005690 <vPortSetupTimerInterrupt+0x34>)
 8005680:	2207      	movs	r2, #7
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	e000e010 	.word	0xe000e010
 8005694:	e000e018 	.word	0xe000e018
 8005698:	20000000 	.word	0x20000000
 800569c:	10624dd3 	.word	0x10624dd3
 80056a0:	e000e014 	.word	0xe000e014

080056a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80056b4 <vPortEnableVFP+0x10>
 80056a8:	6801      	ldr	r1, [r0, #0]
 80056aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80056ae:	6001      	str	r1, [r0, #0]
 80056b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056b2:	bf00      	nop
 80056b4:	e000ed88 	.word	0xe000ed88

080056b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056be:	f3ef 8305 	mrs	r3, IPSR
 80056c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b0f      	cmp	r3, #15
 80056c8:	d915      	bls.n	80056f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056ca:	4a18      	ldr	r2, [pc, #96]	@ (800572c <vPortValidateInterruptPriority+0x74>)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056d4:	4b16      	ldr	r3, [pc, #88]	@ (8005730 <vPortValidateInterruptPriority+0x78>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	7afa      	ldrb	r2, [r7, #11]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d20b      	bcs.n	80056f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	607b      	str	r3, [r7, #4]
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	e7fd      	b.n	80056f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005734 <vPortValidateInterruptPriority+0x7c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005738 <vPortValidateInterruptPriority+0x80>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d90b      	bls.n	800571e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	603b      	str	r3, [r7, #0]
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	e7fd      	b.n	800571a <vPortValidateInterruptPriority+0x62>
	}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	e000e3f0 	.word	0xe000e3f0
 8005730:	20000254 	.word	0x20000254
 8005734:	e000ed0c 	.word	0xe000ed0c
 8005738:	20000258 	.word	0x20000258

0800573c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	@ 0x28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005748:	f7fe fc8a 	bl	8004060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800574c:	4b5a      	ldr	r3, [pc, #360]	@ (80058b8 <pvPortMalloc+0x17c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005754:	f000 f916 	bl	8005984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005758:	4b58      	ldr	r3, [pc, #352]	@ (80058bc <pvPortMalloc+0x180>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	f040 8090 	bne.w	8005886 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01e      	beq.n	80057aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800576c:	2208      	movs	r2, #8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d015      	beq.n	80057aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f023 0307 	bic.w	r3, r3, #7
 8005784:	3308      	adds	r3, #8
 8005786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <pvPortMalloc+0x6e>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	617b      	str	r3, [r7, #20]
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	e7fd      	b.n	80057a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d06a      	beq.n	8005886 <pvPortMalloc+0x14a>
 80057b0:	4b43      	ldr	r3, [pc, #268]	@ (80058c0 <pvPortMalloc+0x184>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d865      	bhi.n	8005886 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057ba:	4b42      	ldr	r3, [pc, #264]	@ (80058c4 <pvPortMalloc+0x188>)
 80057bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057be:	4b41      	ldr	r3, [pc, #260]	@ (80058c4 <pvPortMalloc+0x188>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057c4:	e004      	b.n	80057d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d903      	bls.n	80057e2 <pvPortMalloc+0xa6>
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f1      	bne.n	80057c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057e2:	4b35      	ldr	r3, [pc, #212]	@ (80058b8 <pvPortMalloc+0x17c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d04c      	beq.n	8005886 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2208      	movs	r2, #8
 80057f2:	4413      	add	r3, r2
 80057f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad2      	subs	r2, r2, r3
 8005806:	2308      	movs	r3, #8
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	429a      	cmp	r2, r3
 800580c:	d920      	bls.n	8005850 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800580e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <pvPortMalloc+0xfc>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	613b      	str	r3, [r7, #16]
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	1ad2      	subs	r2, r2, r3
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800584a:	69b8      	ldr	r0, [r7, #24]
 800584c:	f000 f8fc 	bl	8005a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005850:	4b1b      	ldr	r3, [pc, #108]	@ (80058c0 <pvPortMalloc+0x184>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	4a19      	ldr	r2, [pc, #100]	@ (80058c0 <pvPortMalloc+0x184>)
 800585c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800585e:	4b18      	ldr	r3, [pc, #96]	@ (80058c0 <pvPortMalloc+0x184>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b19      	ldr	r3, [pc, #100]	@ (80058c8 <pvPortMalloc+0x18c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d203      	bcs.n	8005872 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800586a:	4b15      	ldr	r3, [pc, #84]	@ (80058c0 <pvPortMalloc+0x184>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a16      	ldr	r2, [pc, #88]	@ (80058c8 <pvPortMalloc+0x18c>)
 8005870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	4b11      	ldr	r3, [pc, #68]	@ (80058bc <pvPortMalloc+0x180>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	431a      	orrs	r2, r3
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005886:	f7fe fbf9 	bl	800407c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <pvPortMalloc+0x170>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	60fb      	str	r3, [r7, #12]
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <pvPortMalloc+0x16c>
	return pvReturn;
 80058ac:	69fb      	ldr	r3, [r7, #28]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3728      	adds	r7, #40	@ 0x28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20012e64 	.word	0x20012e64
 80058bc:	20012e70 	.word	0x20012e70
 80058c0:	20012e68 	.word	0x20012e68
 80058c4:	20012e5c 	.word	0x20012e5c
 80058c8:	20012e6c 	.word	0x20012e6c

080058cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d04a      	beq.n	8005974 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058de:	2308      	movs	r3, #8
 80058e0:	425b      	negs	r3, r3
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4413      	add	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	4b22      	ldr	r3, [pc, #136]	@ (800597c <vPortFree+0xb0>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <vPortFree+0x46>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	60fb      	str	r3, [r7, #12]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00b      	beq.n	8005932 <vPortFree+0x66>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	60bb      	str	r3, [r7, #8]
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	e7fd      	b.n	800592e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	4b11      	ldr	r3, [pc, #68]	@ (800597c <vPortFree+0xb0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d019      	beq.n	8005974 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d115      	bne.n	8005974 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	4b0b      	ldr	r3, [pc, #44]	@ (800597c <vPortFree+0xb0>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	43db      	mvns	r3, r3
 8005952:	401a      	ands	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005958:	f7fe fb82 	bl	8004060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	4b07      	ldr	r3, [pc, #28]	@ (8005980 <vPortFree+0xb4>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4413      	add	r3, r2
 8005966:	4a06      	ldr	r2, [pc, #24]	@ (8005980 <vPortFree+0xb4>)
 8005968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800596a:	6938      	ldr	r0, [r7, #16]
 800596c:	f000 f86c 	bl	8005a48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005970:	f7fe fb84 	bl	800407c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005974:	bf00      	nop
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20012e70 	.word	0x20012e70
 8005980:	20012e68 	.word	0x20012e68

08005984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800598a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800598e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005990:	4b27      	ldr	r3, [pc, #156]	@ (8005a30 <prvHeapInit+0xac>)
 8005992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3307      	adds	r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0307 	bic.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005a30 <prvHeapInit+0xac>)
 80059b4:	4413      	add	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a34 <prvHeapInit+0xb0>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005a34 <prvHeapInit+0xb0>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4413      	add	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059d0:	2208      	movs	r2, #8
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a15      	ldr	r2, [pc, #84]	@ (8005a38 <prvHeapInit+0xb4>)
 80059e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059e6:	4b14      	ldr	r3, [pc, #80]	@ (8005a38 <prvHeapInit+0xb4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059ee:	4b12      	ldr	r3, [pc, #72]	@ (8005a38 <prvHeapInit+0xb4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a04:	4b0c      	ldr	r3, [pc, #48]	@ (8005a38 <prvHeapInit+0xb4>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	@ (8005a3c <prvHeapInit+0xb8>)
 8005a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4a09      	ldr	r2, [pc, #36]	@ (8005a40 <prvHeapInit+0xbc>)
 8005a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a1c:	4b09      	ldr	r3, [pc, #36]	@ (8005a44 <prvHeapInit+0xc0>)
 8005a1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	2000025c 	.word	0x2000025c
 8005a34:	20012e5c 	.word	0x20012e5c
 8005a38:	20012e64 	.word	0x20012e64
 8005a3c:	20012e6c 	.word	0x20012e6c
 8005a40:	20012e68 	.word	0x20012e68
 8005a44:	20012e70 	.word	0x20012e70

08005a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a50:	4b28      	ldr	r3, [pc, #160]	@ (8005af4 <prvInsertBlockIntoFreeList+0xac>)
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e002      	b.n	8005a5c <prvInsertBlockIntoFreeList+0x14>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d8f7      	bhi.n	8005a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d108      	bne.n	8005a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	441a      	add	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	441a      	add	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d118      	bne.n	8005ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b15      	ldr	r3, [pc, #84]	@ (8005af8 <prvInsertBlockIntoFreeList+0xb0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d00d      	beq.n	8005ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e008      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e003      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d002      	beq.n	8005ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20012e5c 	.word	0x20012e5c
 8005af8:	20012e64 	.word	0x20012e64

08005afc <memset>:
 8005afc:	4402      	add	r2, r0
 8005afe:	4603      	mov	r3, r0
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d100      	bne.n	8005b06 <memset+0xa>
 8005b04:	4770      	bx	lr
 8005b06:	f803 1b01 	strb.w	r1, [r3], #1
 8005b0a:	e7f9      	b.n	8005b00 <memset+0x4>

08005b0c <__libc_init_array>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b44 <__libc_init_array+0x38>)
 8005b10:	4c0d      	ldr	r4, [pc, #52]	@ (8005b48 <__libc_init_array+0x3c>)
 8005b12:	1b64      	subs	r4, r4, r5
 8005b14:	10a4      	asrs	r4, r4, #2
 8005b16:	2600      	movs	r6, #0
 8005b18:	42a6      	cmp	r6, r4
 8005b1a:	d109      	bne.n	8005b30 <__libc_init_array+0x24>
 8005b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b4c <__libc_init_array+0x40>)
 8005b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b50 <__libc_init_array+0x44>)
 8005b20:	f000 f826 	bl	8005b70 <_init>
 8005b24:	1b64      	subs	r4, r4, r5
 8005b26:	10a4      	asrs	r4, r4, #2
 8005b28:	2600      	movs	r6, #0
 8005b2a:	42a6      	cmp	r6, r4
 8005b2c:	d105      	bne.n	8005b3a <__libc_init_array+0x2e>
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b34:	4798      	blx	r3
 8005b36:	3601      	adds	r6, #1
 8005b38:	e7ee      	b.n	8005b18 <__libc_init_array+0xc>
 8005b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3e:	4798      	blx	r3
 8005b40:	3601      	adds	r6, #1
 8005b42:	e7f2      	b.n	8005b2a <__libc_init_array+0x1e>
 8005b44:	08005bdc 	.word	0x08005bdc
 8005b48:	08005bdc 	.word	0x08005bdc
 8005b4c:	08005bdc 	.word	0x08005bdc
 8005b50:	08005be0 	.word	0x08005be0

08005b54 <memcpy>:
 8005b54:	440a      	add	r2, r1
 8005b56:	4291      	cmp	r1, r2
 8005b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b5c:	d100      	bne.n	8005b60 <memcpy+0xc>
 8005b5e:	4770      	bx	lr
 8005b60:	b510      	push	{r4, lr}
 8005b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b6a:	4291      	cmp	r1, r2
 8005b6c:	d1f9      	bne.n	8005b62 <memcpy+0xe>
 8005b6e:	bd10      	pop	{r4, pc}

08005b70 <_init>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	bf00      	nop
 8005b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b76:	bc08      	pop	{r3}
 8005b78:	469e      	mov	lr, r3
 8005b7a:	4770      	bx	lr

08005b7c <_fini>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	bf00      	nop
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr
